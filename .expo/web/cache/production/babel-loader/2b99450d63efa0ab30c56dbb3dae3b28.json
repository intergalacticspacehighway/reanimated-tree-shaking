{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.withConfigPlugins=void 0;function _configPlugins(){var data=require(\"@expo/config-plugins\");_configPlugins=function _configPlugins(){return data;};return data;}function _Serialize(){var data=require(\"../Serialize\");_Serialize=function _Serialize(){return data;};return data;}/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */var withConfigPlugins=function withConfigPlugins(config,skipPlugins){var _config$plugins;// @ts-ignore: plugins not on config type yet -- TODO\nif(!Array.isArray(config.plugins)||!((_config$plugins=config.plugins)!==null&&_config$plugins!==void 0&&_config$plugins.length)){return config;}if(!skipPlugins){// Resolve and evaluate plugins\n// @ts-ignore: TODO: add plugins to the config schema\nconfig=(0,_configPlugins().withPlugins)(config,config.plugins);}else{// Delete the plugins array in case someone added functions or other values which cannot be automatically serialized.\ndelete config.plugins;}// plugins aren't serialized by default, serialize the plugins after resolving them.\nreturn(0,_Serialize().serializeAfterStaticPlugins)(config);};exports.withConfigPlugins=withConfigPlugins;","map":{"version":3,"sources":["../../src/plugins/withConfigPlugins.ts"],"names":["withConfigPlugins","Array","config"],"mappings":"uGAAA,QAAA,CAAA,cAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA,cAAA,CAAA,yBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA,QAAA,CAAA,UAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA,UAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA;AACA;AACA;AACA;AACA;AACA,GACO,GAAMA,CAAAA,iBAAwC,CAAG,QAA3CA,CAAAA,iBAA2C,CAAA,MAAA,CAAA,WAAA,CAAyB,CAAA,GAAA,CAAA,eAAA,CAC/E;AACA,GAAI,CAACC,KAAK,CAALA,OAAAA,CAAcC,MAAM,CAArB,OAACD,CAAD,EAAkC,EAAA,CAAA,eAAA,CAACC,MAAM,CAAP,OAAA,IAAA,IAAA,EAAA,eAAA,GAAA,IAAA,EAAA,EAACA,eAAAA,CAAvC,MAAsC,CAAtC,CAA+D,CAC7D,MAAA,CAAA,MAAA,CACD,CACD,GAAI,CAAJ,WAAA,CAAkB,CAChB;AACA;AACAA,MAAM,CAAG,CAAA,EAAA,cAAA,GAAA,WAAA,EAAA,MAAA,CAAoBA,MAAM,CAAnCA,OAAS,CAATA,CAHF,CAAA,IAIO,CACL;AACA,MAAOA,CAAAA,MAAM,CAAb,OAAA,CAX6E,CAa/E;AACA,MAAO,CAAA,EAAA,UAAA,GAAA,2BAAA,EAAP,MAAO,CAAP,CAdK,CAAA,C","sourcesContent":["import { ConfigPlugin, withPlugins } from '@expo/config-plugins';\n\nimport { serializeAfterStaticPlugins } from '../Serialize';\n\n/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */\nexport const withConfigPlugins: ConfigPlugin<boolean> = (config, skipPlugins) => {\n  // @ts-ignore: plugins not on config type yet -- TODO\n  if (!Array.isArray(config.plugins) || !config.plugins?.length) {\n    return config;\n  }\n  if (!skipPlugins) {\n    // Resolve and evaluate plugins\n    // @ts-ignore: TODO: add plugins to the config schema\n    config = withPlugins(config, config.plugins);\n  } else {\n    // Delete the plugins array in case someone added functions or other values which cannot be automatically serialized.\n    delete config.plugins;\n  }\n  // plugins aren't serialized by default, serialize the plugins after resolving them.\n  return serializeAfterStaticPlugins(config);\n};\n"]},"metadata":{},"sourceType":"script"}