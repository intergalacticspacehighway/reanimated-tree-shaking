{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getExpoUpdatesPackageVersion=getExpoUpdatesPackageVersion;exports.getNativeVersion=getNativeVersion;exports.getRuntimeVersion=getRuntimeVersion;exports.getRuntimeVersionNullable=getRuntimeVersionNullable;exports.getSDKVersion=getSDKVersion;exports.getUpdateUrl=getUpdateUrl;exports.getUpdatesCheckOnLaunch=getUpdatesCheckOnLaunch;exports.getUpdatesCodeSigningCertificate=getUpdatesCodeSigningCertificate;exports.getUpdatesCodeSigningMetadata=getUpdatesCodeSigningMetadata;exports.getUpdatesCodeSigningMetadataStringified=getUpdatesCodeSigningMetadataStringified;exports.getUpdatesEnabled=getUpdatesEnabled;exports.getUpdatesTimeout=getUpdatesTimeout;exports.withRuntimeVersion=void 0;function _sdkRuntimeVersions(){var data=require(\"@expo/sdk-runtime-versions\");_sdkRuntimeVersions=function _sdkRuntimeVersions(){return data;};return data;}function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _getenv(){var data=require(\"getenv\");_getenv=function _getenv(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _resolveFrom(){var data=_interopRequireDefault(require(\"resolve-from\"));_resolveFrom=function _resolveFrom(){return data;};return data;}function _semver(){var data=_interopRequireDefault(require(\"semver\"));_semver=function _semver(){return data;};return data;}function _(){var data=require(\"..\");_=function _(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function getExpoUpdatesPackageVersion(projectRoot){var expoUpdatesPackageJsonPath=_resolveFrom()[\"default\"].silent(projectRoot,'expo-updates/package.json');if(!expoUpdatesPackageJsonPath||!_fs()[\"default\"].existsSync(expoUpdatesPackageJsonPath)){return null;}var packageJson=JSON.parse(_fs()[\"default\"].readFileSync(expoUpdatesPackageJsonPath,'utf8'));return packageJson.version;}function getUpdateUrl(config,username){var _config$updates;if((_config$updates=config.updates)!==null&&_config$updates!==void 0&&_config$updates.url){var _config$updates2;return(_config$updates2=config.updates)===null||_config$updates2===void 0?void 0:_config$updates2.url;}var user=typeof config.owner==='string'?config.owner:username;if(!user){return null;}return\"https://exp.host/@\".concat(user,\"/\").concat(config.slug);}function getNativeVersion(config,platform){var version=_().IOSConfig.Version.getVersion(config);switch(platform){case'ios':{var buildNumber=_().IOSConfig.Version.getBuildNumber(config);return\"\".concat(version,\"(\").concat(buildNumber,\")\");}case'android':{var versionCode=_().AndroidConfig.Version.getVersionCode(config);return\"\".concat(version,\"(\").concat(versionCode,\")\");}default:{throw new Error(\"\\\"\".concat(platform,\"\\\" is not a supported platform. Choose either \\\"ios\\\" or \\\"android\\\".\"));}}}/**\n * Compute runtime version policies.\n * @return an expoConfig with only string valued platform specific runtime versions.\n */var withRuntimeVersion=function withRuntimeVersion(config){var _config$ios,_config$android;if((_config$ios=config.ios)!==null&&_config$ios!==void 0&&_config$ios.runtimeVersion||config.runtimeVersion){var runtimeVersion=getRuntimeVersion(config,'ios');if(runtimeVersion){config.ios=_objectSpread(_objectSpread({},config.ios),{},{runtimeVersion:runtimeVersion});}}if((_config$android=config.android)!==null&&_config$android!==void 0&&_config$android.runtimeVersion||config.runtimeVersion){var _runtimeVersion=getRuntimeVersion(config,'android');if(_runtimeVersion){config.android=_objectSpread(_objectSpread({},config.android),{},{runtimeVersion:_runtimeVersion});}}delete config.runtimeVersion;return config;};exports.withRuntimeVersion=withRuntimeVersion;function getRuntimeVersionNullable(){for(var _len=arguments.length,_ref=new Array(_len),_key=0;_key<_len;_key++){_ref[_key]=arguments[_key];}var config=_ref[0],platform=_ref[1];try{return getRuntimeVersion(config,platform);}catch(e){if((0,_getenv().boolish)('EXPO_DEBUG',false)){console.log(e);}return null;}}function getRuntimeVersion(config,platform){var _config$platform$runt,_config$platform;var runtimeVersion=(_config$platform$runt=(_config$platform=config[platform])===null||_config$platform===void 0?void 0:_config$platform.runtimeVersion)!==null&&_config$platform$runt!==void 0?_config$platform$runt:config.runtimeVersion;if(!runtimeVersion){return null;}if(typeof runtimeVersion==='string'){return runtimeVersion;}else if(runtimeVersion.policy==='nativeVersion'){return getNativeVersion(config,platform);}else if(runtimeVersion.policy==='sdkVersion'){if(!config.sdkVersion){throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");}return(0,_sdkRuntimeVersions().getRuntimeVersionForSDKVersion)(config.sdkVersion);}throw new Error(\"\\\"\".concat(typeof runtimeVersion==='object'?JSON.stringify(runtimeVersion):runtimeVersion,\"\\\" is not a valid runtime version. getRuntimeVersion only supports a string, \\\"sdkVersion\\\", or \\\"nativeVersion\\\" policy.\"));}function getSDKVersion(config){return typeof config.sdkVersion==='string'?config.sdkVersion:null;}function getUpdatesEnabled(config){var _config$updates3;return((_config$updates3=config.updates)===null||_config$updates3===void 0?void 0:_config$updates3.enabled)!==false;}function getUpdatesTimeout(config){var _config$updates$fallb,_config$updates4;return(_config$updates$fallb=(_config$updates4=config.updates)===null||_config$updates4===void 0?void 0:_config$updates4.fallbackToCacheTimeout)!==null&&_config$updates$fallb!==void 0?_config$updates$fallb:0;}function getUpdatesCheckOnLaunch(config,expoUpdatesPackageVersion){var _config$updates5,_config$updates6;if(((_config$updates5=config.updates)===null||_config$updates5===void 0?void 0:_config$updates5.checkAutomatically)==='ON_ERROR_RECOVERY'){// native 'ERROR_RECOVERY_ONLY' option was only introduced in 0.11.x\nif(expoUpdatesPackageVersion&&_semver()[\"default\"].gte(expoUpdatesPackageVersion,'0.11.0')){return'ERROR_RECOVERY_ONLY';}return'NEVER';}else if(((_config$updates6=config.updates)===null||_config$updates6===void 0?void 0:_config$updates6.checkAutomatically)==='ON_LOAD'){return'ALWAYS';}return'ALWAYS';}function getUpdatesCodeSigningCertificate(projectRoot,config){var _config$updates7;var codeSigningCertificatePath=(_config$updates7=config.updates)===null||_config$updates7===void 0?void 0:_config$updates7.codeSigningCertificate;if(!codeSigningCertificatePath){return undefined;}var finalPath=_path()[\"default\"].join(projectRoot,codeSigningCertificatePath);if(!_fs()[\"default\"].existsSync(finalPath)){throw new Error(\"File not found at `updates.codeSigningCertificate` path: \".concat(finalPath));}return _fs()[\"default\"].readFileSync(finalPath,'utf8');}function getUpdatesCodeSigningMetadata(config){var _config$updates8;return(_config$updates8=config.updates)===null||_config$updates8===void 0?void 0:_config$updates8.codeSigningMetadata;}function getUpdatesCodeSigningMetadataStringified(config){var metadata=getUpdatesCodeSigningMetadata(config);if(!metadata){return undefined;}return JSON.stringify(metadata);}","map":{"version":3,"sources":["../../src/utils/Updates.ts"],"names":["expoUpdatesPackageJsonPath","resolveFrom","fs","packageJson","JSON","config","user","version","IOSConfig","buildNumber","versionCode","AndroidConfig","withRuntimeVersion","runtimeVersion","getRuntimeVersion","console","getNativeVersion","expoUpdatesPackageVersion","semver","codeSigningCertificatePath","finalPath","path","metadata","getUpdatesCodeSigningMetadata"],"mappings":"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","sourcesContent":["import { Android, ExpoConfig, IOS } from '@expo/config-types';\nimport { getRuntimeVersionForSDKVersion } from '@expo/sdk-runtime-versions';\nimport fs from 'fs';\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { AndroidConfig, IOSConfig } from '..';\n\nexport type ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport function getExpoUpdatesPackageVersion(projectRoot: string): string | null {\n  const expoUpdatesPackageJsonPath = resolveFrom.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !fs.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  const packageJson = JSON.parse(fs.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>,\n  username: string | null\n): string | null {\n  if (config.updates?.url) {\n    return config.updates?.url;\n  }\n\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getNativeVersion(\n  config: Pick<ExpoConfig, 'version'> & {\n    android?: Pick<Android, 'versionCode'>;\n    ios?: Pick<IOS, 'buildNumber'>;\n  },\n  platform: 'android' | 'ios'\n): string {\n  const version = IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios': {\n      const buildNumber = IOSConfig.Version.getBuildNumber(config);\n      return `${version}(${buildNumber})`;\n    }\n    case 'android': {\n      const versionCode = AndroidConfig.Version.getVersionCode(config);\n      return `${version}(${versionCode})`;\n    }\n    default: {\n      throw new Error(\n        `\"${platform}\" is not a supported platform. Choose either \"ios\" or \"android\".`\n      );\n    }\n  }\n}\n\n/**\n * Compute runtime version policies.\n * @return an expoConfig with only string valued platform specific runtime versions.\n */\nexport const withRuntimeVersion: (config: ExpoConfig) => ExpoConfig = config => {\n  if (config.ios?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'ios');\n    if (runtimeVersion) {\n      config.ios = {\n        ...config.ios,\n        runtimeVersion,\n      };\n    }\n  }\n  if (config.android?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'android');\n    if (runtimeVersion) {\n      config.android = {\n        ...config.android,\n        runtimeVersion,\n      };\n    }\n  }\n  delete config.runtimeVersion;\n  return config;\n};\n\nexport function getRuntimeVersionNullable(\n  ...[config, platform]: Parameters<typeof getRuntimeVersion>\n): string | null {\n  try {\n    return getRuntimeVersion(config, platform);\n  } catch (e) {\n    if (boolish('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfig, 'version' | 'runtimeVersion' | 'sdkVersion'> & {\n    android?: Pick<Android, 'versionCode' | 'runtimeVersion'>;\n    ios?: Pick<IOS, 'buildNumber' | 'runtimeVersion'>;\n  },\n  platform: 'android' | 'ios'\n): string | null {\n  const runtimeVersion = config[platform]?.runtimeVersion ?? config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return getRuntimeVersionForSDKVersion(config.sdkVersion);\n  }\n\n  throw new Error(\n    `\"${\n      typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion\n    }\" is not a valid runtime version. getRuntimeVersion only supports a string, \"sdkVersion\", or \"nativeVersion\" policy.`\n  );\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>,\n  expoUpdatesPackageVersion?: string | null\n): 'NEVER' | 'ERROR_RECOVERY_ONLY' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    // native 'ERROR_RECOVERY_ONLY' option was only introduced in 0.11.x\n    if (expoUpdatesPackageVersion && semver.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport function getUpdatesCodeSigningCertificate(\n  projectRoot: string,\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const codeSigningCertificatePath = config.updates?.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n\n  const finalPath = path.join(projectRoot, codeSigningCertificatePath);\n  if (!fs.existsSync(finalPath)) {\n    throw new Error(`File not found at \\`updates.codeSigningCertificate\\` path: ${finalPath}`);\n  }\n\n  return fs.readFileSync(finalPath, 'utf8');\n}\n\nexport function getUpdatesCodeSigningMetadata(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): NonNullable<ExpoConfigUpdates['updates']>['codeSigningMetadata'] {\n  return config.updates?.codeSigningMetadata;\n}\n\nexport function getUpdatesCodeSigningMetadataStringified(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n\n  return JSON.stringify(metadata);\n}\n"]},"metadata":{},"sourceType":"script"}