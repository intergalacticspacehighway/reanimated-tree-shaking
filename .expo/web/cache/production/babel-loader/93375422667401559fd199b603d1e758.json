{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */'use strict';exports.__esModule=true;exports[\"default\"]=void 0;var _InteractionManager=_interopRequireDefault(require(\"../../../exports/InteractionManager\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */var Batchinator=/*#__PURE__*/function(){function Batchinator(callback,delayMS){this._delay=delayMS;this._callback=callback;}/*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */var _proto=Batchinator.prototype;_proto.dispose=function dispose(options){if(options===void 0){options={abort:false};}if(this._taskHandle){this._taskHandle.cancel();if(!options.abort){this._callback();}this._taskHandle=null;}};_proto.schedule=function schedule(){var _this=this;if(this._taskHandle){return;}var timeoutHandle=setTimeout(function(){_this._taskHandle=_InteractionManager[\"default\"].runAfterInteractions(function(){// Note that we clear the handle before invoking the callback so that if the callback calls\n// schedule again, it will actually schedule another task.\n_this._taskHandle=null;_this._callback();});},this._delay);this._taskHandle={cancel:function cancel(){return clearTimeout(timeoutHandle);}};};return Batchinator;}();var _default=Batchinator;exports[\"default\"]=_default;module.exports=exports[\"default\"];","map":{"version":3,"names":["exports","__esModule","_InteractionManager","_interopRequireDefault","require","obj","Batchinator","callback","delayMS","_delay","_callback","_proto","prototype","dispose","options","abort","_taskHandle","cancel","schedule","_this","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout","_default","module"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-web/dist/cjs/vendor/react-native/Batchinator/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _InteractionManager = _interopRequireDefault(require(\"../../../exports/InteractionManager\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nvar Batchinator = /*#__PURE__*/function () {\n  function Batchinator(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  var _proto = Batchinator.prototype;\n\n  _proto.dispose = function dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  };\n\n  _proto.schedule = function schedule() {\n    var _this = this;\n\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = _InteractionManager.default.runAfterInteractions(function () {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        _this._taskHandle = null;\n\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      }\n    };\n  };\n\n  return Batchinator;\n}();\n\nvar _default = Batchinator;\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,aAEAA,OAAO,CAACC,UAAR,CAAqB,IAArB,CACAD,OAAO,WAAP,CAAkB,IAAK,EAAvB,CAEA,GAAIE,CAAAA,mBAAmB,CAAGC,sBAAsB,CAACC,OAAO,CAAC,qCAAD,CAAR,CAAhD,CAEA,QAASD,CAAAA,sBAAT,CAAgCE,GAAhC,CAAqC,CAAE,MAAOA,CAAAA,GAAG,EAAIA,GAAG,CAACJ,UAAX,CAAwBI,GAAxB,CAA8B,CAAE,UAASA,GAAX,CAArC,CAAwD,CAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAIC,CAAAA,WAAW,CAAG,aAAa,UAAY,CACzC,QAASA,CAAAA,WAAT,CAAqBC,QAArB,CAA+BC,OAA/B,CAAwC,CACtC,KAAKC,MAAL,CAAcD,OAAd,CACA,KAAKE,SAAL,CAAiBH,QAAjB,CACD,CACD;AACF;AACA;AACA;AACA;AACA,KAGE,GAAII,CAAAA,MAAM,CAAGL,WAAW,CAACM,SAAzB,CAEAD,MAAM,CAACE,OAAP,CAAiB,QAASA,CAAAA,OAAT,CAAiBC,OAAjB,CAA0B,CACzC,GAAIA,OAAO,GAAK,IAAK,EAArB,CAAwB,CACtBA,OAAO,CAAG,CACRC,KAAK,CAAE,KADC,CAAV,CAGD,CAED,GAAI,KAAKC,WAAT,CAAsB,CACpB,KAAKA,WAAL,CAAiBC,MAAjB,GAEA,GAAI,CAACH,OAAO,CAACC,KAAb,CAAoB,CAClB,KAAKL,SAAL,GACD,CAED,KAAKM,WAAL,CAAmB,IAAnB,CACD,CACF,CAhBD,CAkBAL,MAAM,CAACO,QAAP,CAAkB,QAASA,CAAAA,QAAT,EAAoB,CACpC,GAAIC,CAAAA,KAAK,CAAG,IAAZ,CAEA,GAAI,KAAKH,WAAT,CAAsB,CACpB,OACD,CAED,GAAII,CAAAA,aAAa,CAAGC,UAAU,CAAC,UAAY,CACzCF,KAAK,CAACH,WAAN,CAAoBd,mBAAmB,WAAnB,CAA4BoB,oBAA5B,CAAiD,UAAY,CAC/E;AACA;AACAH,KAAK,CAACH,WAAN,CAAoB,IAApB,CAEAG,KAAK,CAACT,SAAN,GACD,CANmB,CAApB,CAOD,CAR6B,CAQ3B,KAAKD,MARsB,CAA9B,CASA,KAAKO,WAAL,CAAmB,CACjBC,MAAM,CAAE,QAASA,CAAAA,MAAT,EAAkB,CACxB,MAAOM,CAAAA,YAAY,CAACH,aAAD,CAAnB,CACD,CAHgB,CAAnB,CAKD,CArBD,CAuBA,MAAOd,CAAAA,WAAP,CACD,CAzD8B,EAA/B,CA2DA,GAAIkB,CAAAA,QAAQ,CAAGlB,WAAf,CACAN,OAAO,WAAP,CAAkBwB,QAAlB,CACAC,MAAM,CAACzB,OAAP,CAAiBA,OAAO,WAAxB"},"metadata":{},"sourceType":"script"}