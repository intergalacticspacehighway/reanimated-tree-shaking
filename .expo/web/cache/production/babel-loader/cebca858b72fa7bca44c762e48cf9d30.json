{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _objectWithoutProperties=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");var _excluded=[\"CFBundleDisplayName\"],_excluded2=[\"CFBundleName\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getName=getName;exports.setDisplayName=setDisplayName;exports.setName=setName;exports.setProductName=setProductName;exports.withProductName=exports.withName=exports.withDisplayName=void 0;function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _Target(){var data=require(\"./Target\");_Target=function _Target(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}var withDisplayName=(0,_iosPlugins().createInfoPlistPlugin)(setDisplayName,'withDisplayName');exports.withDisplayName=withDisplayName;var withName=(0,_iosPlugins().createInfoPlistPlugin)(setName,'withName');/** Set the PRODUCT_NAME variable in the xcproj file based on the app.json name property. */exports.withName=withName;var withProductName=function withProductName(config){return(0,_iosPlugins().withXcodeProject)(config,function(config){config.modResults=setProductName(config,config.modResults);return config;});};exports.withProductName=withProductName;function getName(config){return typeof config.name==='string'?config.name:null;}/**\n * CFBundleDisplayName is used for most things: the name on the home screen, in\n * notifications, and others.\n */function setDisplayName(configOrName,_ref){var CFBundleDisplayName=_ref.CFBundleDisplayName,infoPlist=_objectWithoutProperties(_ref,_excluded);var name=null;if(typeof configOrName==='string'){name=configOrName;}else{name=getName(configOrName);}if(!name){return infoPlist;}return _objectSpread(_objectSpread({},infoPlist),{},{CFBundleDisplayName:name});}/**\n * CFBundleName is recommended to be 16 chars or less and is used in lists, eg:\n * sometimes on the App Store\n */function setName(config,_ref2){var CFBundleName=_ref2.CFBundleName,infoPlist=_objectWithoutProperties(_ref2,_excluded2);var name=getName(config);if(!name){return infoPlist;}return _objectSpread(_objectSpread({},infoPlist),{},{CFBundleName:name});}function setProductName(config,project){var _getName;var name=(0,_Xcodeproj().sanitizedName)((_getName=getName(config))!==null&&_getName!==void 0?_getName:'');if(!name){return project;}var quotedName=ensureQuotes(name);var _ref3=(0,_Target().findFirstNativeTarget)(project),_ref4=_slicedToArray(_ref3,2),nativeTarget=_ref4[1];(0,_Xcodeproj().getBuildConfigurationsForListId)(project,nativeTarget.buildConfigurationList).forEach(function(_ref5){var _ref6=_slicedToArray(_ref5,2),item=_ref6[1];item.buildSettings.PRODUCT_NAME=quotedName;});return project;}var ensureQuotes=function ensureQuotes(value){if(!value.match(/^['\"]/)){return\"\\\"\".concat(value,\"\\\"\");}return value;};","map":{"version":3,"sources":["../../src/ios/Name.ts"],"names":["withDisplayName","withName","withProductName","config","setProductName","infoPlist","name","getName","CFBundleDisplayName","CFBundleName","quotedName","ensureQuotes","nativeTarget","item","value"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createInfoPlistPlugin, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { findFirstNativeTarget } from './Target';\nimport {\n  ConfigurationSectionEntry,\n  getBuildConfigurationsForListId,\n  sanitizedName,\n} from './utils/Xcodeproj';\n\nexport const withDisplayName = createInfoPlistPlugin(setDisplayName, 'withDisplayName');\n\nexport const withName = createInfoPlistPlugin(setName, 'withName');\n\n/** Set the PRODUCT_NAME variable in the xcproj file based on the app.json name property. */\nexport const withProductName: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = setProductName(config, config.modResults);\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * CFBundleDisplayName is used for most things: the name on the home screen, in\n * notifications, and others.\n */\nexport function setDisplayName(\n  configOrName: Pick<ExpoConfig, 'name'> | string,\n  { CFBundleDisplayName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  let name: string | null = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleDisplayName: name,\n  };\n}\n\n/**\n * CFBundleName is recommended to be 16 chars or less and is used in lists, eg:\n * sometimes on the App Store\n */\nexport function setName(\n  config: Pick<ExpoConfig, 'name'>,\n  { CFBundleName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const name = getName(config);\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleName: name,\n  };\n}\n\nexport function setProductName(\n  config: Pick<ExpoConfig, 'name'>,\n  project: XcodeProject\n): XcodeProject {\n  const name = sanitizedName(getName(config) ?? '');\n\n  if (!name) {\n    return project;\n  }\n  const quotedName = ensureQuotes(name);\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      item.buildSettings.PRODUCT_NAME = quotedName;\n    }\n  );\n\n  return project;\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n"]},"metadata":{},"sourceType":"script"}