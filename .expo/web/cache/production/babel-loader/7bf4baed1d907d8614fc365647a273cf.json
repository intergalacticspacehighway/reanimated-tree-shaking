{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.compileModsAsync=compileModsAsync;exports.evalModsAsync=evalModsAsync;exports.withDefaultBaseMods=withDefaultBaseMods;exports.withIntrospectionBaseMods=withIntrospectionBaseMods;function _debug(){var data=_interopRequireDefault(require(\"debug\"));_debug=function _debug(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _Xcodeproj(){var data=require(\"../ios/utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _errors(){var data=require(\"../utils/errors\");_errors=function _errors(){return data;};return data;}function Warnings(){var data=_interopRequireWildcard(require(\"../utils/warnings\"));Warnings=function Warnings(){return data;};return data;}function _createBaseMod(){var data=require(\"./createBaseMod\");_createBaseMod=function _createBaseMod(){return data;};return data;}function _withAndroidBaseMods(){var data=require(\"./withAndroidBaseMods\");_withAndroidBaseMods=function _withAndroidBaseMods(){return data;};return data;}function _withIosBaseMods(){var data=require(\"./withIosBaseMods\");_withIosBaseMods=function _withIosBaseMods(){return data;};return data;}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{\"default\":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj[\"default\"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var debug=(0,_debug()[\"default\"])('expo:config-plugins:mod-compiler');function withDefaultBaseMods(config){var props=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};config=(0,_withIosBaseMods().withIosBaseMods)(config,props);config=(0,_withAndroidBaseMods().withAndroidBaseMods)(config,props);return config;}/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */function withIntrospectionBaseMods(config){var props=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};config=(0,_withIosBaseMods().withIosBaseMods)(config,_objectSpread({saveToInternal:true,// This writing optimization can be skipped since we never write in introspection mode.\n// Including empty mods will ensure that all mods get introspected.\nskipEmptyMod:false},props));config=(0,_withAndroidBaseMods().withAndroidBaseMods)(config,_objectSpread({saveToInternal:true,skipEmptyMod:false},props));if(config.mods){// Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\nfor(var _i=0,_Object$keys=Object.keys(config.mods);_i<_Object$keys.length;_i++){var platform=_Object$keys[_i];// const platformPreserve = preserve[platform];\nfor(var _i2=0,_Object$keys2=Object.keys(config.mods[platform]||{});_i2<_Object$keys2.length;_i2++){var key=_Object$keys2[_i2];var _config$mods$platform,_config$mods$platform2;// @ts-ignore\nif(!((_config$mods$platform=config.mods[platform])!==null&&_config$mods$platform!==void 0&&(_config$mods$platform2=_config$mods$platform[key])!==null&&_config$mods$platform2!==void 0&&_config$mods$platform2.isIntrospective)){var _config$mods$platform3;debug(\"removing non-idempotent mod: \".concat(platform,\".\").concat(key));// @ts-ignore\n(_config$mods$platform3=config.mods[platform])===null||_config$mods$platform3===void 0?true:delete _config$mods$platform3[key];}}}}return config;}/**\n *\n * @param projectRoot\n * @param config\n */function compileModsAsync(_x,_x2){return _compileModsAsync.apply(this,arguments);}function _compileModsAsync(){_compileModsAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config,props){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(props.introspect===true){config=withIntrospectionBaseMods(config);}else{config=withDefaultBaseMods(config);}_context.next=3;return evalModsAsync(config,props);case 3:return _context.abrupt(\"return\",_context.sent);case 4:case\"end\":return _context.stop();}}},_callee);}));return _compileModsAsync.apply(this,arguments);}function sortMods(commands,order){var allKeys=commands.map(function(_ref){var _ref2=_slicedToArray(_ref,1),key=_ref2[0];return key;});var completeOrder=_toConsumableArray(new Set([].concat(_toConsumableArray(order),_toConsumableArray(allKeys))));var sorted=[];var _loop=function _loop(){var group=completeOrder.shift();var commandSet=commands.find(function(_ref3){var _ref4=_slicedToArray(_ref3,1),key=_ref4[0];return key===group;});if(commandSet){sorted.push(commandSet);}};while(completeOrder.length){_loop();}return sorted;}var orders={ios:[// dangerous runs first\n'dangerous',// run the XcodeProject mod second because many plugins attempt to read from it.\n'xcodeproj'],android:['dangerous']};/**\n * A generic plugin compiler.\n *\n * @param config\n */function evalModsAsync(_x3,_x4){return _evalModsAsync.apply(this,arguments);}function _evalModsAsync(){_evalModsAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config,_ref5){var projectRoot,introspect,platforms,assertMissingModProviders,_i3,_Object$entries,_Object$entries$_i,platformName,platform,_config$mods,entries,platformProjectRoot,projectName,_iterator,_step,_step$value,modName,mod,modRequest,errorMessage,results;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:projectRoot=_ref5.projectRoot,introspect=_ref5.introspect,platforms=_ref5.platforms,assertMissingModProviders=_ref5.assertMissingModProviders;_i3=0,_Object$entries=Object.entries((_config$mods=config.mods)!==null&&_config$mods!==void 0?_config$mods:{});case 2:if(!(_i3<_Object$entries.length)){_context2.next=46;break;}_Object$entries$_i=_slicedToArray(_Object$entries[_i3],2),platformName=_Object$entries$_i[0],platform=_Object$entries$_i[1];if(!(platforms&&!platforms.includes(platformName))){_context2.next=7;break;}debug(\"skip platform: \".concat(platformName));return _context2.abrupt(\"continue\",43);case 7:entries=Object.entries(platform);if(!entries.length){_context2.next=43;break;}// Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\nentries=sortMods(entries,orders[platformName]);debug(\"run in order: \".concat(entries.map(function(_ref6){var _ref7=_slicedToArray(_ref6,1),name=_ref7[0];return name;}).join(', ')));platformProjectRoot=_path()[\"default\"].join(projectRoot,platformName);projectName=platformName==='ios'?(0,_Xcodeproj().getHackyProjectName)(projectRoot,config):undefined;_iterator=_createForOfIteratorHelper(entries);_context2.prev=14;_iterator.s();case 16:if((_step=_iterator.n()).done){_context2.next=35;break;}_step$value=_slicedToArray(_step.value,2),modName=_step$value[0],mod=_step$value[1];modRequest={projectRoot:projectRoot,projectName:projectName,platformProjectRoot:platformProjectRoot,platform:platformName,modName:modName,introspect:!!introspect};if(mod.isProvider){_context2.next=27;break;}// In strict mode, throw an error.\nerrorMessage=\"Initial base modifier for \\\"\".concat(platformName,\".\").concat(modName,\"\\\" is not a provider and therefore will not provide modResults to child mods\");if(!(assertMissingModProviders!==false)){_context2.next=25;break;}throw new(_errors().PluginError)(errorMessage,'MISSING_PROVIDER');case 25:Warnings().addWarningForPlatform(platformName,\"\".concat(platformName,\".\").concat(modName),\"Skipping: Initial base modifier for \\\"\".concat(platformName,\".\").concat(modName,\"\\\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.\"));// In loose mode, just skip the mod entirely.\nreturn _context2.abrupt(\"continue\",33);case 27:_context2.next=29;return mod(_objectSpread(_objectSpread({},config),{},{modResults:null,modRequest:modRequest}));case 29:results=_context2.sent;// Sanity check to help locate non compliant mods.\nconfig=(0,_createBaseMod().assertModResults)(results,platformName,modName);// @ts-ignore: data is added for modifications\ndelete config.modResults;// @ts-ignore: info is added for modifications\ndelete config.modRequest;case 33:_context2.next=16;break;case 35:_context2.next=40;break;case 37:_context2.prev=37;_context2.t0=_context2[\"catch\"](14);_iterator.e(_context2.t0);case 40:_context2.prev=40;_iterator.f();return _context2.finish(40);case 43:_i3++;_context2.next=2;break;case 46:return _context2.abrupt(\"return\",config);case 47:case\"end\":return _context2.stop();}}},_callee2,null,[[14,37,40,43]]);}));return _evalModsAsync.apply(this,arguments);}","map":{"version":3,"sources":["../../src/plugins/mod-compiler.ts"],"names":["debug","props","config","saveToInternal","skipEmptyMod","platform","Object","key","withIntrospectionBaseMods","withDefaultBaseMods","evalModsAsync","allKeys","commands","completeOrder","sorted","group","commandSet","orders","ios","android","assertMissingModProviders","platforms","entries","sortMods","platformProjectRoot","path","projectName","platformName","modRequest","projectRoot","modName","introspect","mod","errorMessage","PluginError","Warnings","results","modResults"],"mappings":"6lGAAA,QAAA,CAAA,MAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,KAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAGA,QAAA,CAAA,UAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,UAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,QAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,cAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA,cAAA,CAAA,yBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,oBAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA,oBAAA,CAAA,+BAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,gBAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA,gBAAA,CAAA,2BAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,olCAEA,GAAMA,CAAAA,KAAK,CAAG,CAAA,EAAA,MAAA,aAAA,EAAd,kCAAc,CAAd,CAEO,QAAA,CAAA,mBAAA,CAAA,MAAA,CAGW,IADhBC,CAAAA,KACgB,2DAHX,EAGW,CAChBC,MAAM,CAAG,CAAA,EAAA,gBAAA,GAAA,eAAA,EAAA,MAAA,CAATA,KAAS,CAATA,CACAA,MAAM,CAAG,CAAA,EAAA,oBAAA,GAAA,mBAAA,EAAA,MAAA,CAATA,KAAS,CAATA,CACA,MAAA,CAAA,MAAA,CACD,CAED;AACA;AACA;AACA;AACA,GACO,QAAA,CAAA,yBAAA,CAAA,MAAA,CAGW,IADhBD,CAAAA,KACgB,2DAHX,EAGW,CAChBC,MAAM,CAAG,CAAA,EAAA,gBAAA,GAAA,eAAA,EAAA,MAAA,gBACPC,cAAc,CADiB,IAAxB,CAEP;AACA;AACAC,YAAY,CAJmB,KAAxB,EAKJH,KALI,EAATC,CAOAA,MAAM,CAAG,CAAA,EAAA,oBAAA,GAAA,mBAAA,EAAA,MAAA,gBACPC,cAAc,CADqB,IAA5B,CAEPC,YAAY,CAFuB,KAA5B,EAGJH,KAHI,EAATC,CAMA,GAAIA,MAAM,CAAV,IAAA,CAAiB,CACf;AACA,0BAAuBI,MAAM,CAANA,IAAAA,CAAYJ,MAAM,CAAzC,IAAuBI,CAAvB,6BAAkE,CAA7D,GAAMD,CAAAA,QAAX,iBAAK,CACH;AACA,4BAAkBC,MAAM,CAANA,IAAAA,CAAYJ,MAAM,CAANA,IAAAA,CAAAA,QAAAA,GAA9B,EAAkBI,CAAlB,gCAA4D,CAAvD,GAAMC,CAAAA,GAAX,mBAAK,CAAuD,GAAA,CAAA,qBAAA,CAAA,sBAAA,CAC1D;AACA,GAAI,EAAA,CAAA,qBAAA,CAACL,MAAM,CAANA,IAAAA,CAAD,QAACA,CAAD,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,EAAA,CAAA,sBAAA,CAACA,qBAAAA,CAAD,GAACA,CAAD,IAAA,IAAA,EAAA,sBAAA,GAAA,IAAA,EAAA,EAACA,sBAAAA,CAAL,eAAI,CAAJ,CAAoD,CAAA,GAAA,CAAA,sBAAA,CAClDF,KAAK,wCAAiCK,QAAjC,aAD6C,GAC7C,EAALL,CACA;AACA,CAAA,sBAAA,CAAOE,MAAM,CAANA,IAAAA,CAAP,QAAOA,CAAP,IAAA,IAAA,EAAA,sBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,CAAA,MAAOA,CAAAA,sBAAAA,CAAP,GAAOA,CAAP,CACD,CACF,CACF,CACF,CAED,MAAA,CAAA,MAAA,CACD,CAED;AACA;AACA;AACA;AACA,G,QACO,CAAA,gB,gKAAA,iBAAA,MAAA,CAAA,KAAA,kHASL,GAAID,KAAK,CAALA,UAAAA,GAAJ,IAAA,CAA+B,CAC7BC,MAAM,CAAGM,yBAAyB,CAAlCN,MAAkC,CAAlCA,CADF,CAAA,IAEO,CACLA,MAAM,CAAGO,mBAAmB,CAA5BP,MAA4B,CAA5BA,CACD,CAbI,sBAcQQ,CAAAA,aAAa,CAAA,MAAA,CAA1B,KAA0B,CAdrB,6G,mDAiBP,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,KAAA,CAA+E,CAC7E,GAAMC,CAAAA,OAAO,CAAGC,QAAQ,CAARA,GAAAA,CAAa,gDAAA,GAAA,gBAA7B,CAAA,GAA6B,EAAbA,CAAhB,CACA,GAAMC,CAAAA,aAAa,oBAAO,GAAA,CAAA,GAAA,8BAAQ,KAAR,qBAA1B,OAA0B,GAAP,CAAnB,CACA,GAAMC,CAAAA,MAAuB,CAA7B,EAAA,CAH6E,2BAK3E,GAAMC,CAAAA,KAAK,CAAGF,aAAa,CAA3B,KAAcA,EAAd,CACA,GAAMG,CAAAA,UAAU,CAAGJ,QAAQ,CAARA,IAAAA,CAAc,kDAAA,GAAA,gBAAWL,CAAAA,GAAG,GAA/C,KAAiC,EAAdK,CAAnB,CACA,GAAA,UAAA,CAAgB,CACdE,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EACD,CAT0E,EAI7E,MAAOD,aAAa,CAApB,MAAA,CAA6B,SAM5B,CACD,MAAA,CAAA,MAAA,CACD,CAED,GAAMI,CAAAA,MAAgC,CAAG,CACvCC,GAAG,CAAE,CACH;AADG,WAAA,CAGH;AAJqC,WAClC,CADkC,CAOvCC,OAAO,CAAE,CAAA,WAAA,CAP8B,CAAzC,CASA;AACA;AACA;AACA;AACA,G,QACO,CAAA,a,wJAAA,kBAAA,MAAA,qXAEL,WAFK,OAEL,WAFK,CAEL,UAFK,OAEL,UAFK,CAEL,SAFK,OAEL,SAFK,CAUHC,yBAVG,OAUHA,yBAVG,uBAkBkCd,MAAM,CAANA,OAAAA,CAAAA,CAAAA,YAAAA,CAAeJ,MAAM,CAArBI,IAAAA,IAAAA,IAAAA,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,CAAAA,YAAAA,CAAvC,EAAuCA,CAlBlC,6HAkBM,YAlBN,uBAkBL,QAlBK,4BAmBCe,SAAS,EAAI,CAACA,SAAS,CAATA,QAAAA,CAAlB,YAAkBA,CAnBf,2BAoBDrB,KAAK,0BAALA,YAAK,EAALA,CApBC,8CAwBCsB,OAxBD,CAwBWhB,MAAM,CAANA,OAAAA,CAAd,QAAcA,CAxBX,KAyBCgB,OAAO,CAAX,MAzBG,2BA0BD;AACAA,OAAO,CAAGC,QAAQ,CAAA,OAAA,CAAUN,MAAM,CAAlCK,YAAkC,CAAhB,CAAlBA,CACAtB,KAAK,yBAAkBsB,OAAO,CAAPA,GAAAA,CAAY,kDAAA,IAAA,gBAAZA,CAAAA,IAAY,EAAZA,EAAAA,IAAAA,CAAvBtB,IAAuBsB,CAAlB,EAALtB,CACMwB,mBA7BL,CA6B2BC,KAAAA,aAAAA,CAAAA,IAAAA,CAAAA,WAAAA,CAA5B,YAA4BA,CA7B3B,CA8BKC,WA9BL,CA+BCC,YAAY,GAAZA,KAAAA,CAAyB,CAAA,EAAA,UAAA,GAAA,mBAAA,EAAA,WAAA,CAAzBA,MAAyB,CAAzBA,CADF,SA9BC,sCAiCD,OAjCC,4IAiCU,OAjCV,gBAiCD,GAjCC,gBAkCOC,UAlCP,CAkCoB,CACjBC,WADiB,CACjBA,WADiB,CAEjBH,WAFiB,CAEjBA,WAFiB,CAGjBF,mBAHiB,CAGjBA,mBAHiB,CAIjBnB,QAAQ,CAJS,YAAA,CAKjByB,OALiB,CAKjBA,OALiB,CAMjBC,UAAU,CAAE,CAAC,CAACA,UANG,CAlCpB,IA2COC,GAAD,CAAL,UA3CD,2BA4CG;AACMC,YA7CT,uCA6CsDN,YA7CtD,aA6CG,OA7CH,sFA8COP,yBAAyB,GAA7B,KA9CH,iCA+CW,KAAIc,OAAAA,GAAJ,WAAA,EAAA,YAAA,CAAN,kBAAM,CA/CX,SAiDKC,QAAQ,GAARA,qBAAAA,CAAAA,YAAAA,WAEKR,YAFLQ,aAAAA,OAAAA,kDAG0CR,YAH1CQ,aADK,OACLA,uIAKA;AAtDL,uEA2DwBH,CAAAA,GAAD,gCAAa,MAAb,MAEpBK,UAAU,CAFuB,IAAb,CAGpBT,UAAAA,CAAAA,UAHoB,GA3DvB,SA2DOQ,OA3DP,gBAiEC;AACAlC,MAAM,CAAG,CAAA,EAAA,cAAA,GAAA,gBAAA,EAAA,OAAA,CAAA,YAAA,CAjC2B,OAiC3B,CAATA,CACA;AACA,MAAOA,CAAAA,MAAM,CAnCuB,UAmCpC,CACA;AACA,MAAOA,CAAAA,MAAM,CAAb,UAAA,CAtED,0SA2EL,MA3EK,gF","sourcesContent":["import Debug from 'debug';\nimport path from 'path';\n\nimport { ExportedConfig, Mod, ModConfig, ModPlatform } from '../Plugin.types';\nimport { getHackyProjectName } from '../ios/utils/Xcodeproj';\nimport { PluginError } from '../utils/errors';\nimport * as Warnings from '../utils/warnings';\nimport { assertModResults, ForwardedBaseModOptions } from './createBaseMod';\nimport { withAndroidBaseMods } from './withAndroidBaseMods';\nimport { withIosBaseMods } from './withIosBaseMods';\n\nconst debug = Debug('expo:config-plugins:mod-compiler');\n\nexport function withDefaultBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, props);\n  config = withAndroidBaseMods(config, props);\n  return config;\n}\n\n/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */\nexport function withIntrospectionBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, {\n    saveToInternal: true,\n    // This writing optimization can be skipped since we never write in introspection mode.\n    // Including empty mods will ensure that all mods get introspected.\n    skipEmptyMod: false,\n    ...props,\n  });\n  config = withAndroidBaseMods(config, {\n    saveToInternal: true,\n    skipEmptyMod: false,\n    ...props,\n  });\n\n  if (config.mods) {\n    // Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\n    for (const platform of Object.keys(config.mods) as ModPlatform[]) {\n      // const platformPreserve = preserve[platform];\n      for (const key of Object.keys(config.mods[platform] || {})) {\n        // @ts-ignore\n        if (!config.mods[platform]?.[key]?.isIntrospective) {\n          debug(`removing non-idempotent mod: ${platform}.${key}`);\n          // @ts-ignore\n          delete config.mods[platform]?.[key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\n/**\n *\n * @param projectRoot\n * @param config\n */\nexport async function compileModsAsync(\n  config: ExportedConfig,\n  props: {\n    projectRoot: string;\n    platforms?: ModPlatform[];\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n  }\n): Promise<ExportedConfig> {\n  if (props.introspect === true) {\n    config = withIntrospectionBaseMods(config);\n  } else {\n    config = withDefaultBaseMods(config);\n  }\n  return await evalModsAsync(config, props);\n}\n\nfunction sortMods(commands: [string, any][], order: string[]): [string, any][] {\n  const allKeys = commands.map(([key]) => key);\n  const completeOrder = [...new Set([...order, ...allKeys])];\n  const sorted: [string, any][] = [];\n  while (completeOrder.length) {\n    const group = completeOrder.shift()!;\n    const commandSet = commands.find(([key]) => key === group);\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  }\n  return sorted;\n}\n\nconst orders: Record<string, string[]> = {\n  ios: [\n    // dangerous runs first\n    'dangerous',\n    // run the XcodeProject mod second because many plugins attempt to read from it.\n    'xcodeproj',\n  ],\n  android: ['dangerous'],\n};\n/**\n * A generic plugin compiler.\n *\n * @param config\n */\nexport async function evalModsAsync(\n  config: ExportedConfig,\n  {\n    projectRoot,\n    introspect,\n    platforms,\n    /**\n     * Throw errors when mods are missing providers.\n     * @default true\n     */\n    assertMissingModProviders,\n  }: {\n    projectRoot: string;\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n    platforms?: ModPlatform[];\n  }\n): Promise<ExportedConfig> {\n  for (const [platformName, platform] of Object.entries(config.mods ?? ({} as ModConfig))) {\n    if (platforms && !platforms.includes(platformName as any)) {\n      debug(`skip platform: ${platformName}`);\n      continue;\n    }\n\n    let entries = Object.entries(platform);\n    if (entries.length) {\n      // Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\n      entries = sortMods(entries, orders[platformName]!);\n      debug(`run in order: ${entries.map(([name]) => name).join(', ')}`);\n      const platformProjectRoot = path.join(projectRoot, platformName);\n      const projectName =\n        platformName === 'ios' ? getHackyProjectName(projectRoot, config) : undefined;\n\n      for (const [modName, mod] of entries) {\n        const modRequest = {\n          projectRoot,\n          projectName,\n          platformProjectRoot,\n          platform: platformName as ModPlatform,\n          modName,\n          introspect: !!introspect,\n        };\n\n        if (!(mod as Mod).isProvider) {\n          // In strict mode, throw an error.\n          const errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n          if (assertMissingModProviders !== false) {\n            throw new PluginError(errorMessage, 'MISSING_PROVIDER');\n          } else {\n            Warnings.addWarningForPlatform(\n              platformName as ModPlatform,\n              `${platformName}.${modName}`,\n              `Skipping: Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.`\n            );\n            // In loose mode, just skip the mod entirely.\n            continue;\n          }\n        }\n\n        const results = await (mod as Mod)({\n          ...config,\n          modResults: null,\n          modRequest,\n        });\n\n        // Sanity check to help locate non compliant mods.\n        config = assertModResults(results, platformName, modName);\n        // @ts-ignore: data is added for modifications\n        delete config.modResults;\n        // @ts-ignore: info is added for modifications\n        delete config.modRequest;\n      }\n    }\n  }\n\n  return config;\n}\n"]},"metadata":{},"sourceType":"script"}