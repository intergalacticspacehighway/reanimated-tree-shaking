{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.applyPlugin=applyPlugin;exports.getGoogleServicesFilePath=getGoogleServicesFilePath;exports.setClassPath=setClassPath;exports.setGoogleServicesFile=setGoogleServicesFile;exports.withGoogleServicesFile=exports.withClassPath=exports.withApplyPlugin=void 0;function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _withDangerousMod(){var data=require(\"../plugins/withDangerousMod\");_withDangerousMod=function _withDangerousMod(){return data;};return data;}function _fs(){var data=require(\"../utils/fs\");_fs=function _fs(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var DEFAULT_TARGET_PATH='./android/app/google-services.json';var googleServicesClassPath='com.google.gms:google-services';var googleServicesPlugin='com.google.gms.google-services';// NOTE(brentvatne): This may be annoying to keep up to date...\nvar googleServicesVersion='4.3.3';var withClassPath=function withClassPath(config){return(0,_androidPlugins().withProjectBuildGradle)(config,function(config){if(config.modResults.language==='groovy'){config.modResults.contents=setClassPath(config,config.modResults.contents);}else{(0,_warnings().addWarningAndroid)('android.googleServicesFile',\"Cannot automatically configure project build.gradle if it's not groovy\");}return config;});};exports.withClassPath=withClassPath;var withApplyPlugin=function withApplyPlugin(config){return(0,_androidPlugins().withAppBuildGradle)(config,function(config){if(config.modResults.language==='groovy'){config.modResults.contents=applyPlugin(config,config.modResults.contents);}else{(0,_warnings().addWarningAndroid)('android.googleServicesFile',\"Cannot automatically configure app build.gradle if it's not groovy\");}return config;});};/**\n * Add `google-services.json` to project\n */exports.withApplyPlugin=withApplyPlugin;var withGoogleServicesFile=function withGoogleServicesFile(config){return(0,_withDangerousMod().withDangerousMod)(config,['android',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return setGoogleServicesFile(config,config.modRequest.projectRoot);case 2:return _context.abrupt(\"return\",config);case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()]);};exports.withGoogleServicesFile=withGoogleServicesFile;function getGoogleServicesFilePath(config){var _config$android$googl,_config$android;return(_config$android$googl=(_config$android=config.android)===null||_config$android===void 0?void 0:_config$android.googleServicesFile)!==null&&_config$android$googl!==void 0?_config$android$googl:null;}function setGoogleServicesFile(_x2,_x3){return _setGoogleServicesFile.apply(this,arguments);}/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */function _setGoogleServicesFile(){_setGoogleServicesFile=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config,projectRoot){var targetPath,partialSourcePath,completeSourcePath,destinationPath,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:targetPath=_args2.length>2&&_args2[2]!==undefined?_args2[2]:DEFAULT_TARGET_PATH;partialSourcePath=getGoogleServicesFilePath(config);if(partialSourcePath){_context2.next=4;break;}return _context2.abrupt(\"return\",false);case 4:completeSourcePath=_path()[\"default\"].resolve(projectRoot,partialSourcePath);destinationPath=_path()[\"default\"].resolve(projectRoot,targetPath);_context2.prev=6;_context2.next=9;return(0,_fs().copyFilePathToPathAsync)(completeSourcePath,destinationPath);case 9:_context2.next=15;break;case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](6);console.log(_context2.t0);throw new Error(\"Cannot copy google-services.json from \".concat(completeSourcePath,\" to \").concat(destinationPath,\". Please make sure the source and destination paths exist.\"));case 15:return _context2.abrupt(\"return\",true);case 16:case\"end\":return _context2.stop();}}},_callee2,null,[[6,11]]);}));return _setGoogleServicesFile.apply(this,arguments);}function setClassPath(config,buildGradle){var googleServicesFile=getGoogleServicesFilePath(config);if(!googleServicesFile){return buildGradle;}if(buildGradle.includes(googleServicesClassPath)){return buildGradle;}//\nreturn buildGradle.replace(/dependencies\\s?{/,\"dependencies {\\n        classpath '\".concat(googleServicesClassPath,\":\").concat(googleServicesVersion,\"'\"));}function applyPlugin(config,appBuildGradle){var googleServicesFile=getGoogleServicesFilePath(config);if(!googleServicesFile){return appBuildGradle;}// Make sure the project does not have the plugin already\nvar pattern=new RegExp(\"apply\\\\s+plugin:\\\\s+['\\\"]\".concat(googleServicesPlugin,\"['\\\"]\"));if(appBuildGradle.match(pattern)){return appBuildGradle;}// Add it to the end of the file\nreturn appBuildGradle+\"\\napply plugin: '\".concat(googleServicesPlugin,\"'\");}","map":{"version":3,"sources":["../../src/android/GoogleServices.ts"],"names":["DEFAULT_TARGET_PATH","googleServicesClassPath","googleServicesPlugin","googleServicesVersion","withClassPath","config","setClassPath","withApplyPlugin","applyPlugin","withGoogleServicesFile","setGoogleServicesFile","targetPath","partialSourcePath","getGoogleServicesFilePath","completeSourcePath","path","destinationPath","console","googleServicesFile","buildGradle","pattern","appBuildGradle"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { copyFilePathToPathAsync } from '../utils/fs';\nimport { addWarningAndroid } from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = config => {\n  return withProjectBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = path.resolve(projectRoot, partialSourcePath);\n  const destinationPath = path.resolve(projectRoot, targetPath);\n\n  try {\n    await copyFilePathToPathAsync(completeSourcePath, destinationPath);\n  } catch (e) {\n    console.log(e);\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"]},"metadata":{},"sourceType":"script"}