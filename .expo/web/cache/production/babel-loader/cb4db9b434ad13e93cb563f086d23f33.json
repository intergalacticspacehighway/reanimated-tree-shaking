{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getApplicationTargetNameForSchemeAsync=getApplicationTargetNameForSchemeAsync;exports.getArchiveBuildConfigurationForSchemeAsync=getArchiveBuildConfigurationForSchemeAsync;exports.getRunnableSchemesFromXcodeproj=getRunnableSchemesFromXcodeproj;exports.getSchemesFromXcodeproj=getSchemesFromXcodeproj;function _XML(){var data=require(\"../utils/XML\");_XML=function _XML(){return data;};return data;}function _Paths(){var data=require(\"./Paths\");_Paths=function _Paths(){return data;};return data;}function _Target(){var data=require(\"./Target\");_Target=function _Target(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function getSchemesFromXcodeproj(projectRoot){return(0,_Paths().findSchemeNames)(projectRoot);}function getRunnableSchemesFromXcodeproj(projectRoot){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref$configuration=_ref.configuration,configuration=_ref$configuration===void 0?'Debug':_ref$configuration;var project=(0,_Xcodeproj().getPbxproj)(projectRoot);return(0,_Target().findSignableTargets)(project).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),target=_ref3[1];var osType='iOS';var type=(0,_Xcodeproj().unquote)(target.productType);if(type===_Target().TargetType.WATCH){osType='watchOS';}else if(// (apps) com.apple.product-type.application\n// (app clips) com.apple.product-type.application.on-demand-install-capable\n// NOTE(EvanBacon): This matches against `watchOS` as well so we check for watch first.\ntype.startsWith(_Target().TargetType.APPLICATION)){// Attempt to resolve the platform SDK for each target so we can filter devices.\nvar xcConfigurationList=project.hash.project.objects.XCConfigurationList[target.buildConfigurationList];if(xcConfigurationList){var buildConfiguration=xcConfigurationList.buildConfigurations.find(function(value){return value.comment===configuration;})||xcConfigurationList.buildConfigurations[0];if(buildConfiguration!==null&&buildConfiguration!==void 0&&buildConfiguration.value){var _project$hash$project;var xcBuildConfiguration=(_project$hash$project=project.hash.project.objects.XCBuildConfiguration)===null||_project$hash$project===void 0?void 0:_project$hash$project[buildConfiguration.value];var buildSdkRoot=xcBuildConfiguration.buildSettings.SDKROOT;if(buildSdkRoot==='appletvos'||'TVOS_DEPLOYMENT_TARGET'in xcBuildConfiguration.buildSettings){// Is a TV app...\nosType='tvOS';}else if(buildSdkRoot==='iphoneos'){osType='iOS';}}}}return{name:(0,_Xcodeproj().unquote)(target.name),osType:osType,type:(0,_Xcodeproj().unquote)(target.productType)};});}function readSchemeAsync(_x,_x2){return _readSchemeAsync.apply(this,arguments);}function _readSchemeAsync(){_readSchemeAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(projectRoot,scheme){var allSchemePaths,re,schemePath;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:allSchemePaths=(0,_Paths().findSchemePaths)(projectRoot);re=new RegExp(\"/\".concat(scheme,\".xcscheme\"),'i');schemePath=allSchemePaths.find(function(i){return re.exec(i);});if(!schemePath){_context.next=9;break;}_context.next=6;return(0,_XML().readXMLAsync)({path:schemePath});case 6:return _context.abrupt(\"return\",_context.sent);case 9:throw new Error(\"scheme '\".concat(scheme,\"' does not exist, make sure it's marked as shared\"));case 10:case\"end\":return _context.stop();}}},_callee);}));return _readSchemeAsync.apply(this,arguments);}function getApplicationTargetNameForSchemeAsync(_x3,_x4){return _getApplicationTargetNameForSchemeAsync.apply(this,arguments);}function _getApplicationTargetNameForSchemeAsync(){_getApplicationTargetNameForSchemeAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(projectRoot,scheme){var _schemeXML$Scheme,_schemeXML$Scheme$Bui,_schemeXML$Scheme$Bui2,_schemeXML$Scheme$Bui3,_schemeXML$Scheme$Bui4,schemeXML,buildActionEntry,targetName;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return readSchemeAsync(projectRoot,scheme);case 2:schemeXML=_context2.sent;buildActionEntry=schemeXML===null||schemeXML===void 0?void 0:(_schemeXML$Scheme=schemeXML.Scheme)===null||_schemeXML$Scheme===void 0?void 0:(_schemeXML$Scheme$Bui=_schemeXML$Scheme.BuildAction)===null||_schemeXML$Scheme$Bui===void 0?void 0:(_schemeXML$Scheme$Bui2=_schemeXML$Scheme$Bui[0])===null||_schemeXML$Scheme$Bui2===void 0?void 0:(_schemeXML$Scheme$Bui3=_schemeXML$Scheme$Bui2.BuildActionEntries)===null||_schemeXML$Scheme$Bui3===void 0?void 0:(_schemeXML$Scheme$Bui4=_schemeXML$Scheme$Bui3[0])===null||_schemeXML$Scheme$Bui4===void 0?void 0:_schemeXML$Scheme$Bui4.BuildActionEntry;targetName=(buildActionEntry===null||buildActionEntry===void 0?void 0:buildActionEntry.length)===1?getBlueprintName(buildActionEntry[0]):getBlueprintName(buildActionEntry===null||buildActionEntry===void 0?void 0:buildActionEntry.find(function(entry){var _entry$BuildableRefer,_entry$BuildableRefer2,_entry$BuildableRefer3,_entry$BuildableRefer4;return(_entry$BuildableRefer=entry.BuildableReference)===null||_entry$BuildableRefer===void 0?void 0:(_entry$BuildableRefer2=_entry$BuildableRefer[0])===null||_entry$BuildableRefer2===void 0?void 0:(_entry$BuildableRefer3=_entry$BuildableRefer2['$'])===null||_entry$BuildableRefer3===void 0?void 0:(_entry$BuildableRefer4=_entry$BuildableRefer3.BuildableName)===null||_entry$BuildableRefer4===void 0?void 0:_entry$BuildableRefer4.endsWith('.app');}));if(targetName){_context2.next=7;break;}throw new Error(\"\".concat(scheme,\".xcscheme seems to be corrupted\"));case 7:return _context2.abrupt(\"return\",targetName);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return _getApplicationTargetNameForSchemeAsync.apply(this,arguments);}function getArchiveBuildConfigurationForSchemeAsync(_x5,_x6){return _getArchiveBuildConfigurationForSchemeAsync.apply(this,arguments);}function _getArchiveBuildConfigurationForSchemeAsync(){_getArchiveBuildConfigurationForSchemeAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(projectRoot,scheme){var _schemeXML$Scheme2,_schemeXML$Scheme2$Ar,_schemeXML$Scheme2$Ar2,_schemeXML$Scheme2$Ar3,schemeXML,buildConfiguration;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return readSchemeAsync(projectRoot,scheme);case 2:schemeXML=_context3.sent;buildConfiguration=schemeXML===null||schemeXML===void 0?void 0:(_schemeXML$Scheme2=schemeXML.Scheme)===null||_schemeXML$Scheme2===void 0?void 0:(_schemeXML$Scheme2$Ar=_schemeXML$Scheme2.ArchiveAction)===null||_schemeXML$Scheme2$Ar===void 0?void 0:(_schemeXML$Scheme2$Ar2=_schemeXML$Scheme2$Ar[0])===null||_schemeXML$Scheme2$Ar2===void 0?void 0:(_schemeXML$Scheme2$Ar3=_schemeXML$Scheme2$Ar2['$'])===null||_schemeXML$Scheme2$Ar3===void 0?void 0:_schemeXML$Scheme2$Ar3.buildConfiguration;if(buildConfiguration){_context3.next=6;break;}throw new Error(\"\".concat(scheme,\".xcscheme seems to be corrupted\"));case 6:return _context3.abrupt(\"return\",buildConfiguration);case 7:case\"end\":return _context3.stop();}}},_callee3);}));return _getArchiveBuildConfigurationForSchemeAsync.apply(this,arguments);}function getBlueprintName(entry){var _entry$BuildableRefer5,_entry$BuildableRefer6,_entry$BuildableRefer7;return entry===null||entry===void 0?void 0:(_entry$BuildableRefer5=entry.BuildableReference)===null||_entry$BuildableRefer5===void 0?void 0:(_entry$BuildableRefer6=_entry$BuildableRefer5[0])===null||_entry$BuildableRefer6===void 0?void 0:(_entry$BuildableRefer7=_entry$BuildableRefer6['$'])===null||_entry$BuildableRefer7===void 0?void 0:_entry$BuildableRefer7.BlueprintName;}","map":{"version":3,"sources":["../../src/ios/BuildScheme.ts"],"names":["configuration","project","osType","type","target","TargetType","xcConfigurationList","buildConfiguration","value","xcBuildConfiguration","buildSdkRoot","name","allSchemePaths","re","schemePath","i","path","schemeXML","readSchemeAsync","buildActionEntry","targetName","getBlueprintName","entry"],"mappings":"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","sourcesContent":["import { readXMLAsync } from '../utils/XML';\nimport { findSchemeNames, findSchemePaths } from './Paths';\nimport { findSignableTargets, TargetType } from './Target';\nimport { getPbxproj, unquote } from './utils/Xcodeproj';\n\ninterface SchemeXML {\n  Scheme?: {\n    BuildAction?: {\n      BuildActionEntries?: {\n        BuildActionEntry?: BuildActionEntryType[];\n      }[];\n    }[];\n    ArchiveAction?: {\n      $?: {\n        buildConfiguration?: string;\n      };\n    }[];\n  };\n}\n\ninterface BuildActionEntryType {\n  BuildableReference?: {\n    $?: {\n      BlueprintName?: string;\n      BuildableName?: string;\n    };\n  }[];\n}\n\nexport function getSchemesFromXcodeproj(projectRoot: string): string[] {\n  return findSchemeNames(projectRoot);\n}\n\nexport function getRunnableSchemesFromXcodeproj(\n  projectRoot: string,\n  { configuration = 'Debug' }: { configuration?: 'Debug' | 'Release' } = {}\n): { name: string; osType: string; type: string }[] {\n  const project = getPbxproj(projectRoot);\n\n  return findSignableTargets(project).map(([, target]) => {\n    let osType = 'iOS';\n    const type = unquote(target.productType);\n\n    if (type === TargetType.WATCH) {\n      osType = 'watchOS';\n    } else if (\n      // (apps) com.apple.product-type.application\n      // (app clips) com.apple.product-type.application.on-demand-install-capable\n      // NOTE(EvanBacon): This matches against `watchOS` as well so we check for watch first.\n      type.startsWith(TargetType.APPLICATION)\n    ) {\n      // Attempt to resolve the platform SDK for each target so we can filter devices.\n      const xcConfigurationList =\n        project.hash.project.objects.XCConfigurationList[target.buildConfigurationList];\n\n      if (xcConfigurationList) {\n        const buildConfiguration =\n          xcConfigurationList.buildConfigurations.find(\n            (value: { comment: string; value: string }) => value.comment === configuration\n          ) || xcConfigurationList.buildConfigurations[0];\n        if (buildConfiguration?.value) {\n          const xcBuildConfiguration =\n            project.hash.project.objects.XCBuildConfiguration?.[buildConfiguration.value];\n\n          const buildSdkRoot = xcBuildConfiguration.buildSettings.SDKROOT;\n          if (\n            buildSdkRoot === 'appletvos' ||\n            'TVOS_DEPLOYMENT_TARGET' in xcBuildConfiguration.buildSettings\n          ) {\n            // Is a TV app...\n            osType = 'tvOS';\n          } else if (buildSdkRoot === 'iphoneos') {\n            osType = 'iOS';\n          }\n        }\n      }\n    }\n\n    return {\n      name: unquote(target.name),\n      osType,\n      type: unquote(target.productType),\n    };\n  });\n}\n\nasync function readSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<SchemeXML | undefined> {\n  const allSchemePaths = findSchemePaths(projectRoot);\n  const re = new RegExp(`/${scheme}.xcscheme`, 'i');\n  const schemePath = allSchemePaths.find(i => re.exec(i));\n  if (schemePath) {\n    return ((await readXMLAsync({ path: schemePath })) as unknown) as SchemeXML | undefined;\n  } else {\n    throw new Error(`scheme '${scheme}' does not exist, make sure it's marked as shared`);\n  }\n}\n\nexport async function getApplicationTargetNameForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildActionEntry =\n    schemeXML?.Scheme?.BuildAction?.[0]?.BuildActionEntries?.[0]?.BuildActionEntry;\n  const targetName =\n    buildActionEntry?.length === 1\n      ? getBlueprintName(buildActionEntry[0])\n      : getBlueprintName(\n          buildActionEntry?.find(entry => {\n            return entry.BuildableReference?.[0]?.['$']?.BuildableName?.endsWith('.app');\n          })\n        );\n  if (!targetName) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return targetName;\n}\n\nexport async function getArchiveBuildConfigurationForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildConfiguration = schemeXML?.Scheme?.ArchiveAction?.[0]?.['$']?.buildConfiguration;\n  if (!buildConfiguration) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return buildConfiguration;\n}\n\nfunction getBlueprintName(entry?: BuildActionEntryType): string | undefined {\n  return entry?.BuildableReference?.[0]?.['$']?.BlueprintName;\n}\n"]},"metadata":{},"sourceType":"script"}