{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.addBuildSourceFileToGroup=addBuildSourceFileToGroup;exports.addFileToGroupAndLink=addFileToGroupAndLink;exports.addFramework=addFramework;exports.addResourceFileToGroup=addResourceFileToGroup;exports.ensureGroupRecursively=ensureGroupRecursively;exports.getApplicationNativeTarget=getApplicationNativeTarget;exports.getBuildConfigurationForListIdAndName=getBuildConfigurationForListIdAndName;exports.getBuildConfigurationsForListId=getBuildConfigurationsForListId;exports.getHackyProjectName=getHackyProjectName;exports.getPbxproj=getPbxproj;exports.getProductName=getProductName;exports.getProjectName=getProjectName;exports.getProjectSection=getProjectSection;exports.getXCConfigurationListEntries=getXCConfigurationListEntries;exports.isBuildConfig=isBuildConfig;exports.isNotComment=isNotComment;exports.isNotTestHost=isNotTestHost;exports.resolvePathOrProject=resolvePathOrProject;exports.sanitizedName=sanitizedName;exports.unquote=unquote;function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _slugify(){var data=_interopRequireDefault(require(\"slugify\"));_slugify=function _slugify(){return data;};return data;}function _xcode(){var data=_interopRequireDefault(require(\"xcode\"));_xcode=function _xcode(){return data;};return data;}function _pbxFile(){var data=_interopRequireDefault(require(\"xcode/lib/pbxFile\"));_pbxFile=function _pbxFile(){return data;};return data;}function _warnings(){var data=require(\"../../utils/warnings\");_warnings=function _warnings(){return data;};return data;}function Paths(){var data=_interopRequireWildcard(require(\"../Paths\"));Paths=function Paths(){return data;};return data;}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{\"default\":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj[\"default\"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function getProjectName(projectRoot){var sourceRoot=Paths().getSourceRoot(projectRoot);return _path()[\"default\"].basename(sourceRoot);}function resolvePathOrProject(projectRootOrProject){if(typeof projectRootOrProject==='string'){try{return getPbxproj(projectRootOrProject);}catch(_unused){return null;}}return projectRootOrProject;}// TODO: come up with a better solution for using app.json expo.name in various places\nfunction sanitizedName(name){// Default to the name `app` when every safe character has been sanitized\nreturn sanitizedNameForProjects(name)||sanitizedNameForProjects((0,_slugify()[\"default\"])(name))||'app';}function sanitizedNameForProjects(name){return name.replace(/[\\W_]+/g,'').normalize('NFD').replace(/[\\u0300-\\u036f]/g,'');}// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nfunction getHackyProjectName(projectRoot,config){// Attempt to get the current ios folder name (apply).\ntry{return getProjectName(projectRoot);}catch(_unused2){// If no iOS project exists then create a new one (eject).\nvar projectName=config.name;(0,_assert()[\"default\"])(projectName,'Your project needs a name in app.json/app.config.js.');return sanitizedName(projectName);}}function createProjectFileForGroup(_ref){var filepath=_ref.filepath,group=_ref.group;var file=new(_pbxFile()[\"default\"])(filepath);var conflictingFile=group.children.find(function(child){return child.comment===file.basename;});if(conflictingFile){// This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n// Not much we can do here since it might be a conflicting file.\nreturn null;}return file;}/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */function addResourceFileToGroup(_ref2){var filepath=_ref2.filepath,groupName=_ref2.groupName,isBuildFile=_ref2.isBuildFile,project=_ref2.project,verbose=_ref2.verbose,targetUuid=_ref2.targetUuid;return addFileToGroupAndLink({filepath:filepath,groupName:groupName,project:project,verbose:verbose,targetUuid:targetUuid,addFileToProject:function addFileToProject(_ref3){var project=_ref3.project,file=_ref3.file;project.addToPbxFileReferenceSection(file);if(isBuildFile){project.addToPbxBuildFileSection(file);}project.addToPbxResourcesBuildPhase(file);}});}/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */function addBuildSourceFileToGroup(_ref4){var filepath=_ref4.filepath,groupName=_ref4.groupName,project=_ref4.project,verbose=_ref4.verbose,targetUuid=_ref4.targetUuid;return addFileToGroupAndLink({filepath:filepath,groupName:groupName,project:project,verbose:verbose,targetUuid:targetUuid,addFileToProject:function addFileToProject(_ref5){var project=_ref5.project,file=_ref5.file;project.addToPbxFileReferenceSection(file);project.addToPbxBuildFileSection(file);project.addToPbxSourcesBuildPhase(file);}});}// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nfunction addFileToGroupAndLink(_ref6){var filepath=_ref6.filepath,groupName=_ref6.groupName,project=_ref6.project,verbose=_ref6.verbose,addFileToProject=_ref6.addFileToProject,targetUuid=_ref6.targetUuid;var group=pbxGroupByPathOrAssert(project,groupName);var file=createProjectFileForGroup({filepath:filepath,group:group});if(!file){if(verbose){// This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n// Not much we can do here since it might be a conflicting file.\n(0,_warnings().addWarningIOS)('ios-xcode-project',\"Skipped adding duplicate file \\\"\".concat(filepath,\"\\\" to PBXGroup named \\\"\").concat(groupName,\"\\\"\"));}return project;}if(targetUuid!=null){file.target=targetUuid;}else{var applicationNativeTarget=project.getTarget('com.apple.product-type.application');file.target=applicationNativeTarget===null||applicationNativeTarget===void 0?void 0:applicationNativeTarget.uuid;}file.uuid=project.generateUuid();file.fileRef=project.generateUuid();addFileToProject({project:project,file:file});group.children.push({value:file.fileRef,comment:file.basename});return project;}function getApplicationNativeTarget(_ref7){var project=_ref7.project,projectName=_ref7.projectName;var applicationNativeTarget=project.getTarget('com.apple.product-type.application');(0,_assert()[\"default\"])(applicationNativeTarget,\"Couldn't locate application PBXNativeTarget in '.xcodeproj' file.\");(0,_assert()[\"default\"])(String(applicationNativeTarget.target.name)===projectName,\"Application native target name mismatch. Expected \".concat(projectName,\", but found \").concat(applicationNativeTarget.target.name,\".\"));return applicationNativeTarget;}/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */function addFramework(_ref8){var project=_ref8.project,projectName=_ref8.projectName,framework=_ref8.framework;var target=getApplicationNativeTarget({project:project,projectName:projectName});return project.addFramework(framework,{target:target.uuid});}function splitPath(path){// TODO: Should we account for other platforms that may not use `/`\nreturn path.split('/');}var findGroup=function findGroup(group,name){if(!group){return undefined;}return group.children.find(function(group){return group.comment===name;});};function findGroupInsideGroup(project,group,name){var foundGroup=findGroup(group,name);if(foundGroup){var _project$getPBXGroupB;return(_project$getPBXGroupB=project.getPBXGroupByKey(foundGroup.value))!==null&&_project$getPBXGroupB!==void 0?_project$getPBXGroupB:null;}return null;}function pbxGroupByPathOrAssert(project,path){var _project$getFirstProj=project.getFirstProject(),firstProject=_project$getFirstProj.firstProject;var group=project.getPBXGroupByKey(firstProject.mainGroup);var components=splitPath(path);var _iterator=_createForOfIteratorHelper(components),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var name=_step.value;var nextGroup=findGroupInsideGroup(project,group,name);if(nextGroup){group=nextGroup;}else{break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(!group){throw Error(\"Xcode PBXGroup with name \\\"\".concat(path,\"\\\" could not be found in the Xcode project.\"));}return group;}function ensureGroupRecursively(project,filepath){var _topMostGroup;var components=splitPath(filepath);var hasChild=function hasChild(group,name){return group.children.find(function(_ref9){var comment=_ref9.comment;return comment===name;});};var _project$getFirstProj2=project.getFirstProject(),firstProject=_project$getFirstProj2.firstProject;var topMostGroup=project.getPBXGroupByKey(firstProject.mainGroup);var _iterator2=_createForOfIteratorHelper(components),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var pathComponent=_step2.value;if(topMostGroup&&!hasChild(topMostGroup,pathComponent)){topMostGroup.children.push({comment:pathComponent,value:project.pbxCreateGroup(pathComponent,'\"\"')});}topMostGroup=project.pbxGroupByName(pathComponent);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return(_topMostGroup=topMostGroup)!==null&&_topMostGroup!==void 0?_topMostGroup:null;}/**\n * Get the pbxproj for the given path\n */function getPbxproj(projectRoot){var projectPath=Paths().getPBXProjectPath(projectRoot);var project=_xcode()[\"default\"].project(projectPath);project.parseSync();return project;}/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */function getProductName(project){var productName='$(TARGET_NAME)';try{// If the product name is numeric, this will fail (it's a getter).\n// If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n// will be a numeric value, this results in a bug where the product name isn't useful,\n// i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\nproductName=project.productName;}catch(_unused3){}if(productName==='$(TARGET_NAME)'){var _project$getFirstTarg,_project$getFirstTarg2;var targetName=(_project$getFirstTarg=project.getFirstTarget())===null||_project$getFirstTarg===void 0?void 0:(_project$getFirstTarg2=_project$getFirstTarg.firstTarget)===null||_project$getFirstTarg2===void 0?void 0:_project$getFirstTarg2.productName;productName=targetName!==null&&targetName!==void 0?targetName:productName;}return productName;}function getProjectSection(project){return project.pbxProjectSection();}function getXCConfigurationListEntries(project){var lists=project.pbxXCConfigurationList();return Object.entries(lists).filter(isNotComment);}function getBuildConfigurationsForListId(project,configurationListId){var configurationListEntries=getXCConfigurationListEntries(project);var _configurationListEnt=configurationListEntries.find(function(_ref10){var _ref11=_slicedToArray(_ref10,1),key=_ref11[0];return key===configurationListId;}),_configurationListEnt2=_slicedToArray(_configurationListEnt,2),configurationList=_configurationListEnt2[1];var buildConfigurations=configurationList.buildConfigurations.map(function(i){return i.value;});return Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment).filter(isBuildConfig).filter(function(_ref12){var _ref13=_slicedToArray(_ref12,1),key=_ref13[0];return buildConfigurations.includes(key);});}function getBuildConfigurationForListIdAndName(project,_ref14){var configurationListId=_ref14.configurationListId,buildConfiguration=_ref14.buildConfiguration;var xcBuildConfigurationEntry=getBuildConfigurationsForListId(project,configurationListId).find(function(i){return i[1].name===buildConfiguration;});if(!xcBuildConfigurationEntry){throw new Error(\"Build configuration '\".concat(buildConfiguration,\"' does not exist in list with id '\").concat(configurationListId,\"'\"));}return xcBuildConfigurationEntry;}function isBuildConfig(_ref15){var _ref16=_slicedToArray(_ref15,2),sectionItem=_ref16[1];return sectionItem.isa==='XCBuildConfiguration';}function isNotTestHost(_ref17){var _ref18=_slicedToArray(_ref17,2),sectionItem=_ref18[1];return!sectionItem.buildSettings.TEST_HOST;}function isNotComment(_ref19){var _ref20=_slicedToArray(_ref19,1),key=_ref20[0];return!key.endsWith(\"_comment\");}// Remove surrounding double quotes if they exist.\nfunction unquote(value){var _value$match$,_value$match;// projects with numeric names will fail due to a bug in the xcode package.\nif(typeof value==='number'){value=String(value);}return(_value$match$=(_value$match=value.match(/^\"(.*)\"$/))===null||_value$match===void 0?void 0:_value$match[1])!==null&&_value$match$!==void 0?_value$match$:value;}","map":{"version":3,"sources":["../../../src/ios/utils/Xcodeproj.ts"],"names":["sourceRoot","Paths","path","getPbxproj","sanitizedNameForProjects","name","getProjectName","projectName","config","sanitizedName","group","file","pbxFile","conflictingFile","child","targetUuid","addFileToGroupAndLink","filepath","groupName","project","verbose","addFileToProject","pbxGroupByPathOrAssert","createProjectFileForGroup","applicationNativeTarget","value","comment","basename","String","framework","target","getApplicationNativeTarget","uuid","findGroup","foundGroup","firstProject","components","splitPath","nextGroup","findGroupInsideGroup","Error","hasChild","topMostGroup","projectPath","xcode","productName","targetName","lists","Object","configurationListEntries","getXCConfigurationListEntries","key","buildConfigurations","configurationList","i","buildConfiguration","xcBuildConfigurationEntry","getBuildConfigurationsForListId","sectionItem"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\nimport path from 'path';\nimport slugify from 'slugify';\nimport xcode, {\n  PBXFile,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nimport { addWarningIOS } from '../../utils/warnings';\nimport * as Paths from '../Paths';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = Paths.getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function resolvePathOrProject(\n  projectRootOrProject: string | XcodeProject\n): XcodeProject | null {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nexport function sanitizedName(name: string) {\n  // Default to the name `app` when every safe character has been sanitized\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects(slugify(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getHackyProjectName(projectRoot: string, config: ExpoConfig): string {\n  // Attempt to get the current ios folder name (apply).\n  try {\n    return getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const projectName = config.name;\n    assert(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup({ filepath, group }: { filepath: string; group: PBXGroup }) {\n  const file = new pbxFile(filepath);\n\n  const conflictingFile = group.children.find(child => child.comment === file.basename);\n  if (conflictingFile) {\n    // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n    // Not much we can do here since it might be a conflicting file.\n    return null;\n  }\n  return file;\n}\n\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addResourceFileToGroup({\n  filepath,\n  groupName,\n  // Should add to `PBXBuildFile Section`\n  isBuildFile,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  isBuildFile?: boolean;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    },\n  });\n}\n\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addBuildSourceFileToGroup({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    },\n  });\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroupAndLink({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  addFileToProject,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n  addFileToProject: (props: { file: PBXFile; project: XcodeProject }) => void;\n}): XcodeProject {\n  const group = pbxGroupByPathOrAssert(project, groupName);\n\n  const file = createProjectFileForGroup({ filepath, group });\n\n  if (!file) {\n    if (verbose) {\n      // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n      // Not much we can do here since it might be a conflicting file.\n      addWarningIOS(\n        'ios-xcode-project',\n        `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`\n      );\n    }\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget?.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n\n  addFileToProject({ project, file });\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport function addFramework({\n  project,\n  projectName,\n  framework,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  framework: string;\n}) {\n  const target = getApplicationNativeTarget({ project, projectName });\n  return project.addFramework(framework, { target: target.uuid });\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find(group => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project: XcodeProject, path: string): PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n\n  return group;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const projectPath = Paths.getPBXProjectPath(projectRoot);\n  const project = xcode.project(projectPath);\n  project.parseSync();\n  return project;\n}\n\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport function getProductName(project: XcodeProject): string {\n  let productName = '$(TARGET_NAME)';\n  try {\n    // If the product name is numeric, this will fail (it's a getter).\n    // If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n    // will be a numeric value, this results in a bug where the product name isn't useful,\n    // i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\n    productName = project.productName;\n  } catch {}\n\n  if (productName === '$(TARGET_NAME)') {\n    const targetName = project.getFirstTarget()?.firstTarget?.productName;\n    productName = targetName ?? productName;\n  }\n\n  return productName;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationsForListId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map(i => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function getBuildConfigurationForListIdAndName(\n  project: XcodeProject,\n  {\n    configurationListId,\n    buildConfiguration,\n  }: { configurationListId: string; buildConfiguration: string }\n): ConfigurationSectionEntry {\n  const xcBuildConfigurationEntry = getBuildConfigurationsForListId(\n    project,\n    configurationListId\n  ).find(i => i[1].name === buildConfiguration);\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\n      `Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`\n    );\n  }\n  return xcBuildConfigurationEntry;\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n\n// Remove surrounding double quotes if they exist.\nexport function unquote(value: string): string {\n  // projects with numeric names will fail due to a bug in the xcode package.\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return value.match(/^\"(.*)\"$/)?.[1] ?? value;\n}\n"]},"metadata":{},"sourceType":"script"}