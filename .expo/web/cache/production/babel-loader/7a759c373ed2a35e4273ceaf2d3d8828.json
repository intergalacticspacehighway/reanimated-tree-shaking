{"ast":null,"code":"function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var Range=require('../classes/range.js');var _require=require('../classes/comparator.js'),ANY=_require.ANY;var satisfies=require('../functions/satisfies.js');var compare=require('../functions/compare.js');// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a subset of some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else return false\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n// - If LT\n//   - If LT.semver is greater than that of any > comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n// - If any C is a = range, and GT or LT are set, return false\n// - Else return true\nvar subset=function subset(sub,dom,options){sub=new Range(sub,options);dom=new Range(dom,options);var sawNonNull=false;var _iterator=_createForOfIteratorHelper(sub.set),_step;try{OUTER:for(_iterator.s();!(_step=_iterator.n()).done;){var simpleSub=_step.value;var _iterator2=_createForOfIteratorHelper(dom.set),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var simpleDom=_step2.value;var isSub=simpleSubset(simpleSub,simpleDom,options);sawNonNull=sawNonNull||isSub!==null;if(isSub)continue OUTER;}// the null set is a subset of everything, but null simple ranges in\n// a complex range should be ignored.  so if we saw a non-null range,\n// then we know this isn't a subset, but if EVERY simple range was null,\n// then it is a subset.\n}catch(err){_iterator2.e(err);}finally{_iterator2.f();}if(sawNonNull)return false;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return true;};var simpleSubset=function simpleSubset(sub,dom,options){if(sub.length===1&&sub[0].semver===ANY)return dom.length===1&&dom[0].semver===ANY;var eqSet=new Set();var gt,lt;var _iterator3=_createForOfIteratorHelper(sub),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var c=_step3.value;if(c.operator==='>'||c.operator==='>=')gt=higherGT(gt,c,options);else if(c.operator==='<'||c.operator==='<=')lt=lowerLT(lt,c,options);else eqSet.add(c.semver);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}if(eqSet.size>1)return null;var gtltComp;if(gt&&lt){gtltComp=compare(gt.semver,lt.semver,options);if(gtltComp>0)return null;else if(gtltComp===0&&(gt.operator!=='>='||lt.operator!=='<='))return null;}// will iterate one or zero times\nvar _iterator4=_createForOfIteratorHelper(eqSet),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var eq=_step4.value;if(gt&&!satisfies(eq,String(gt),options))return null;if(lt&&!satisfies(eq,String(lt),options))return null;var _iterator6=_createForOfIteratorHelper(dom),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var _c=_step6.value;if(!satisfies(eq,String(_c),options))return false;}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return true;}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}var higher,lower;var hasDomLT,hasDomGT;var _iterator5=_createForOfIteratorHelper(dom),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _c2=_step5.value;hasDomGT=hasDomGT||_c2.operator==='>'||_c2.operator==='>=';hasDomLT=hasDomLT||_c2.operator==='<'||_c2.operator==='<=';if(gt){if(_c2.operator==='>'||_c2.operator==='>='){higher=higherGT(gt,_c2,options);if(higher===_c2)return false;}else if(gt.operator==='>='&&!satisfies(gt.semver,String(_c2),options))return false;}if(lt){if(_c2.operator==='<'||_c2.operator==='<='){lower=lowerLT(lt,_c2,options);if(lower===_c2)return false;}else if(lt.operator==='<='&&!satisfies(lt.semver,String(_c2),options))return false;}if(!_c2.operator&&(lt||gt)&&gtltComp!==0)return false;}// if there was a < or >, and nothing in the dom, then must be false\n// UNLESS it was limited by another range in the other direction.\n// Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n}catch(err){_iterator5.e(err);}finally{_iterator5.f();}if(gt&&hasDomLT&&!lt&&gtltComp!==0)return false;if(lt&&hasDomGT&&!gt&&gtltComp!==0)return false;return true;};// >=1.2.3 is lower than >1.2.3\nvar higherGT=function higherGT(a,b,options){if(!a)return b;var comp=compare(a.semver,b.semver,options);return comp>0?a:comp<0?b:b.operator==='>'&&a.operator==='>='?b:a;};// <=1.2.3 is higher than <1.2.3\nvar lowerLT=function lowerLT(a,b,options){if(!a)return b;var comp=compare(a.semver,b.semver,options);return comp<0?a:comp>0?b:b.operator==='<'&&a.operator==='<='?b:a;};module.exports=subset;","map":{"version":3,"names":["Range","require","ANY","satisfies","compare","subset","sub","dom","options","sawNonNull","set","OUTER","simpleSub","simpleDom","isSub","simpleSubset","length","semver","eqSet","Set","gt","lt","c","operator","higherGT","lowerLT","add","size","gtltComp","eq","String","higher","lower","hasDomLT","hasDomGT","a","b","comp","module","exports"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/@expo/image-utils/node_modules/semver/ranges/subset.js"],"sourcesContent":["const Range = require('../classes/range.js')\nconst { ANY } = require('../classes/comparator.js')\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a subset of some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else return false\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n// - If LT\n//   - If LT.semver is greater than that of any > comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n// - If any C is a = range, and GT or LT are set, return false\n// - Else return true\n\nconst subset = (sub, dom, options) => {\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub)\n        continue OUTER\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull)\n      return false\n  }\n  return true\n}\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub.length === 1 && sub[0].semver === ANY)\n    return dom.length === 1 && dom[0].semver === ANY\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=')\n      gt = higherGT(gt, c, options)\n    else if (c.operator === '<' || c.operator === '<=')\n      lt = lowerLT(lt, c, options)\n    else\n      eqSet.add(c.semver)\n  }\n\n  if (eqSet.size > 1)\n    return null\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0)\n      return null\n    else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<='))\n      return null\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options))\n      return null\n\n    if (lt && !satisfies(eq, String(lt), options))\n      return null\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options))\n        return false\n    }\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c)\n          return false\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options))\n        return false\n    }\n    if (lt) {\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c)\n          return false\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options))\n        return false\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0)\n      return false\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0)\n    return false\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0)\n    return false\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}