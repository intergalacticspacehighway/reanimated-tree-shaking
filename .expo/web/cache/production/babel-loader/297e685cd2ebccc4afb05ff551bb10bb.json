{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getBundleIdentifier=getBundleIdentifier;exports.getBundleIdentifierFromPbxproj=getBundleIdentifierFromPbxproj;exports.resetAllPlistBundleIdentifiers=resetAllPlistBundleIdentifiers;exports.resetPlistBundleIdentifier=resetPlistBundleIdentifier;exports.setBundleIdentifier=setBundleIdentifier;exports.setBundleIdentifierForPbxproj=setBundleIdentifierForPbxproj;exports.updateBundleIdentifierForPbxproj=updateBundleIdentifierForPbxproj;exports.withBundleIdentifier=void 0;function _plist(){var data=_interopRequireDefault(require(\"@expo/plist\"));_plist=function _plist(){return data;};return data;}function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _xcode(){var data=_interopRequireDefault(require(\"xcode\"));_xcode=function _xcode(){return data;};return data;}function _withDangerousMod(){var data=require(\"../plugins/withDangerousMod\");_withDangerousMod=function _withDangerousMod(){return data;};return data;}function _Paths(){var data=require(\"./Paths\");_Paths=function _Paths(){return data;};return data;}function _Target(){var data=require(\"./Target\");_Target=function _Target(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _string(){var data=require(\"./utils/string\");_string=function _string(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var withBundleIdentifier=function withBundleIdentifier(config,_ref){var bundleIdentifier=_ref.bundleIdentifier;return(0,_withDangerousMod().withDangerousMod)(config,['ios',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){var _config$ios,bundleId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:bundleId=bundleIdentifier!==null&&bundleIdentifier!==void 0?bundleIdentifier:(_config$ios=config.ios)===null||_config$ios===void 0?void 0:_config$ios.bundleIdentifier;(0,_assert()[\"default\"])(bundleId,'`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.');_context.next=4;return setBundleIdentifierForPbxproj(config.modRequest.projectRoot,bundleId);case 4:return _context.abrupt(\"return\",config);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}()]);};exports.withBundleIdentifier=withBundleIdentifier;function getBundleIdentifier(config){var _config$ios$bundleIde,_config$ios2;return(_config$ios$bundleIde=(_config$ios2=config.ios)===null||_config$ios2===void 0?void 0:_config$ios2.bundleIdentifier)!==null&&_config$ios$bundleIde!==void 0?_config$ios$bundleIde:null;}/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */function setBundleIdentifier(config,infoPlist){var bundleIdentifier=getBundleIdentifier(config);if(!bundleIdentifier){return infoPlist;}return _objectSpread(_objectSpread({},infoPlist),{},{CFBundleIdentifier:bundleIdentifier});}/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */function getBundleIdentifierFromPbxproj(projectRoot){var _ref3=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},targetName=_ref3.targetName,_ref3$buildConfigurat=_ref3.buildConfiguration,buildConfiguration=_ref3$buildConfigurat===void 0?'Release':_ref3$buildConfigurat;var pbxprojPath;try{pbxprojPath=(0,_Paths().getPBXProjectPath)(projectRoot);}catch(_unused){return null;}var project=_xcode()[\"default\"].project(pbxprojPath);project.parseSync();var xcBuildConfiguration=(0,_Target().getXCBuildConfigurationFromPbxproj)(project,{targetName:targetName,buildConfiguration:buildConfiguration});if(!xcBuildConfiguration){return null;}return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);}function getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration){var bundleIdentifierRaw=xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;if(bundleIdentifierRaw){var bundleIdentifier=(0,_string().trimQuotes)(bundleIdentifierRaw);// it's possible to use interpolation for the bundle identifier\n// the most common case is when the last part of the id is set to `$(PRODUCT_NAME:rfc1034identifier)`\n// in this case, PRODUCT_NAME should be replaced with its value\n// the `rfc1034identifier` modifier replaces all non-alphanumeric characters with dashes\nvar bundleIdentifierParts=bundleIdentifier.split('.');if(bundleIdentifierParts[bundleIdentifierParts.length-1]==='$(PRODUCT_NAME:rfc1034identifier)'&&xcBuildConfiguration.buildSettings.PRODUCT_NAME){bundleIdentifierParts[bundleIdentifierParts.length-1]=xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g,'-');}return bundleIdentifierParts.join('.');}else{return null;}}/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */function updateBundleIdentifierForPbxproj(pbxprojPath,bundleIdentifier){var updateProductName=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var project=_xcode()[\"default\"].project(pbxprojPath);project.parseSync();var _ref4=(0,_Target().findFirstNativeTarget)(project),_ref5=_slicedToArray(_ref4,2),nativeTarget=_ref5[1];(0,_Xcodeproj().getBuildConfigurationsForListId)(project,nativeTarget.buildConfigurationList).forEach(function(_ref6){var _ref7=_slicedToArray(_ref6,2),item=_ref7[1];if(item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER===bundleIdentifier){return;}item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER=\"\\\"\".concat(bundleIdentifier,\"\\\"\");if(updateProductName){var productName=bundleIdentifier.split('.').pop();if(!(productName!==null&&productName!==void 0&&productName.includes('$'))){item.buildSettings.PRODUCT_NAME=productName;}}});_fs()[\"default\"].writeFileSync(pbxprojPath,project.writeSync());}/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */function setBundleIdentifierForPbxproj(projectRoot,bundleIdentifier){var updateProductName=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;// Get all pbx projects in the ${projectRoot}/ios directory\nvar pbxprojPaths=[];try{pbxprojPaths=(0,_Paths().getAllPBXProjectPaths)(projectRoot);}catch(_unused2){}var _iterator=_createForOfIteratorHelper(pbxprojPaths),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var pbxprojPath=_step.value;updateBundleIdentifierForPbxproj(pbxprojPath,bundleIdentifier,updateProductName);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */var defaultBundleId='$(PRODUCT_BUNDLE_IDENTIFIER)';function resetAllPlistBundleIdentifiers(projectRoot){var infoPlistPaths=(0,_Paths().getAllInfoPlistPaths)(projectRoot);var _iterator2=_createForOfIteratorHelper(infoPlistPaths),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var plistPath=_step2.value;resetPlistBundleIdentifier(plistPath);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}function resetPlistBundleIdentifier(plistPath){var rawPlist=_fs()[\"default\"].readFileSync(plistPath,'utf8');var plistObject=_plist()[\"default\"].parse(rawPlist);if(plistObject.CFBundleIdentifier){if(plistObject.CFBundleIdentifier===defaultBundleId)return;// attempt to match default Info.plist format\nvar format={pretty:true,indent:\"\\t\"};var xml=_plist()[\"default\"].build(_objectSpread(_objectSpread({},plistObject),{},{CFBundleIdentifier:defaultBundleId}),format);if(xml!==rawPlist){_fs()[\"default\"].writeFileSync(plistPath,xml);}}}","map":{"version":3,"sources":["../../src/ios/BundleIdentifier.ts"],"names":["withBundleIdentifier","bundleIdentifier","bundleId","config","setBundleIdentifierForPbxproj","getBundleIdentifier","CFBundleIdentifier","buildConfiguration","pbxprojPath","project","xcode","xcBuildConfiguration","targetName","getProductBundleIdentifierFromBuildConfiguration","bundleIdentifierRaw","bundleIdentifierParts","updateProductName","nativeTarget","item","productName","fs","pbxprojPaths","updateBundleIdentifierForPbxproj","defaultBundleId","infoPlistPaths","resetPlistBundleIdentifier","rawPlist","plistObject","plist","format","pretty","indent","xml"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport xcode, { XCBuildConfiguration } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { InfoPlist } from './IosConfig.types';\nimport { getAllInfoPlistPaths, getAllPBXProjectPaths, getPBXProjectPath } from './Paths';\nimport { findFirstNativeTarget, getXCBuildConfigurationFromPbxproj } from './Target';\nimport { ConfigurationSectionEntry, getBuildConfigurationsForListId } from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\nexport const withBundleIdentifier: ConfigPlugin<{ bundleIdentifier?: string }> = (\n  config,\n  { bundleIdentifier }\n) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const bundleId = bundleIdentifier ?? config.ios?.bundleIdentifier;\n      assert(\n        bundleId,\n        '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.'\n      );\n      await setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId!);\n      return config;\n    },\n  ]);\n};\n\nfunction getBundleIdentifier(config: Pick<ExpoConfig, 'ios'>): string | null {\n  return config.ios?.bundleIdentifier ?? null;\n}\n\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\nfunction setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist {\n  const bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleIdentifier: bundleIdentifier,\n  };\n}\n\n/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\nfunction getBundleIdentifierFromPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  let pbxprojPath: string;\n  try {\n    pbxprojPath = getPBXProjectPath(projectRoot);\n  } catch {\n    return null;\n  }\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const xcBuildConfiguration = getXCBuildConfigurationFromPbxproj(project, {\n    targetName,\n    buildConfiguration,\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\n\nfunction getProductBundleIdentifierFromBuildConfiguration(\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    const bundleIdentifier = trimQuotes(bundleIdentifierRaw);\n    // it's possible to use interpolation for the bundle identifier\n    // the most common case is when the last part of the id is set to `$(PRODUCT_NAME:rfc1034identifier)`\n    // in this case, PRODUCT_NAME should be replaced with its value\n    // the `rfc1034identifier` modifier replaces all non-alphanumeric characters with dashes\n    const bundleIdentifierParts = bundleIdentifier.split('.');\n    if (\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] ===\n        '$(PRODUCT_NAME:rfc1034identifier)' &&\n      xcBuildConfiguration.buildSettings.PRODUCT_NAME\n    ) {\n      bundleIdentifierParts[\n        bundleIdentifierParts.length - 1\n      ] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction updateBundleIdentifierForPbxproj(\n  pbxprojPath: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n        return;\n      }\n\n      item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n      if (updateProductName) {\n        const productName = bundleIdentifier.split('.').pop();\n        if (!productName?.includes('$')) {\n          item.buildSettings.PRODUCT_NAME = productName;\n        }\n      }\n    }\n  );\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction setBundleIdentifierForPbxproj(\n  projectRoot: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  // Get all pbx projects in the ${projectRoot}/ios directory\n  let pbxprojPaths: string[] = [];\n  try {\n    pbxprojPaths = getAllPBXProjectPaths(projectRoot);\n  } catch {}\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\n/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot: string): void {\n  const infoPlistPaths = getAllInfoPlistPaths(projectRoot);\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath: string): void {\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nexport {\n  getBundleIdentifier,\n  setBundleIdentifier,\n  getBundleIdentifierFromPbxproj,\n  updateBundleIdentifierForPbxproj,\n  setBundleIdentifierForPbxproj,\n  resetAllPlistBundleIdentifiers,\n  resetPlistBundleIdentifier,\n};\n"]},"metadata":{},"sourceType":"script"}