{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getVersionCode=getVersionCode;exports.getVersionName=getVersionName;exports.setMinBuildScriptExtVersion=setMinBuildScriptExtVersion;exports.setVersionCode=setVersionCode;exports.setVersionName=setVersionName;exports.withVersion=exports.withBuildScriptExtMinimumVersion=void 0;function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}var withVersion=function withVersion(config){return(0,_androidPlugins().withAppBuildGradle)(config,function(config){if(config.modResults.language==='groovy'){config.modResults.contents=setVersionCode(config,config.modResults.contents);config.modResults.contents=setVersionName(config,config.modResults.contents);}else{(0,_warnings().addWarningAndroid)('android.versionCode',\"Cannot automatically configure app build.gradle if it's not groovy\");}return config;});};/** Sets a numeric version for a value in the project.gradle buildscript.ext object to be at least the provided props.minVersion, if the existing value is greater then no change will be made. */exports.withVersion=withVersion;var withBuildScriptExtMinimumVersion=function withBuildScriptExtMinimumVersion(config,props){return(0,_androidPlugins().withProjectBuildGradle)(config,function(config){if(config.modResults.language==='groovy'){config.modResults.contents=setMinBuildScriptExtVersion(config.modResults.contents,props);}else{(0,_warnings().addWarningAndroid)('withBuildScriptExtVersion',\"Cannot automatically configure project build.gradle if it's not groovy\");}return config;});};exports.withBuildScriptExtMinimumVersion=withBuildScriptExtMinimumVersion;function setMinBuildScriptExtVersion(buildGradle,_ref){var name=_ref.name,minVersion=_ref.minVersion;var _buildGradle$match;var regex=new RegExp(\"(\".concat(name,\"\\\\s?=\\\\s?)(\\\\d+(?:\\\\.\\\\d+)?)\"));var currentVersion=(_buildGradle$match=buildGradle.match(regex))===null||_buildGradle$match===void 0?void 0:_buildGradle$match[2];if(!currentVersion){(0,_warnings().addWarningAndroid)('withBuildScriptExtVersion',\"Cannot set minimum buildscript.ext.\".concat(name,\" version because the property \\\"\").concat(name,\"\\\" cannot be found or does not have a numeric value.\"));// TODO: Maybe just add the property...\nreturn buildGradle;}var currentVersionNum=Number(currentVersion);return buildGradle.replace(regex,\"$1\".concat(Math.max(minVersion,currentVersionNum)));}function getVersionName(config){var _config$version;return(_config$version=config.version)!==null&&_config$version!==void 0?_config$version:null;}function setVersionName(config,buildGradle){var versionName=getVersionName(config);if(versionName===null){return buildGradle;}var pattern=new RegExp(\"versionName \\\".*\\\"\");return buildGradle.replace(pattern,\"versionName \\\"\".concat(versionName,\"\\\"\"));}function getVersionCode(config){var _config$android$versi,_config$android;return(_config$android$versi=(_config$android=config.android)===null||_config$android===void 0?void 0:_config$android.versionCode)!==null&&_config$android$versi!==void 0?_config$android$versi:1;}function setVersionCode(config,buildGradle){var versionCode=getVersionCode(config);if(versionCode===null){return buildGradle;}var pattern=new RegExp(\"versionCode.*\");return buildGradle.replace(pattern,\"versionCode \".concat(versionCode));}","map":{"version":3,"sources":["../../src/android/Version.ts"],"names":["withVersion","config","setVersionCode","setVersionName","withBuildScriptExtMinimumVersion","setMinBuildScriptExtVersion","minVersion","regex","currentVersion","buildGradle","name","currentVersionNum","Number","Math","versionName","getVersionName","pattern","versionCode","getVersionCode"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\n\nexport const withVersion: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.versionCode',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/** Sets a numeric version for a value in the project.gradle buildscript.ext object to be at least the provided props.minVersion, if the existing value is greater then no change will be made. */\nexport const withBuildScriptExtMinimumVersion: ConfigPlugin<{\n  name: string;\n  minVersion: number;\n}> = (config, props) => {\n  return withProjectBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setMinBuildScriptExtVersion(config.modResults.contents, props);\n    } else {\n      addWarningAndroid(\n        'withBuildScriptExtVersion',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function setMinBuildScriptExtVersion(\n  buildGradle: string,\n  { name, minVersion }: { name: string; minVersion: number }\n) {\n  const regex = new RegExp(`(${name}\\\\s?=\\\\s?)(\\\\d+(?:\\\\.\\\\d+)?)`);\n  const currentVersion = buildGradle.match(regex)?.[2];\n  if (!currentVersion) {\n    addWarningAndroid(\n      'withBuildScriptExtVersion',\n      `Cannot set minimum buildscript.ext.${name} version because the property \"${name}\" cannot be found or does not have a numeric value.`\n    );\n    // TODO: Maybe just add the property...\n    return buildGradle;\n  }\n\n  const currentVersionNum = Number(currentVersion);\n  return buildGradle.replace(regex, `$1${Math.max(minVersion, currentVersionNum)}`);\n}\n\nexport function getVersionName(config: Pick<ExpoConfig, 'version'>) {\n  return config.version ?? null;\n}\n\nexport function setVersionName(config: Pick<ExpoConfig, 'version'>, buildGradle: string) {\n  const versionName = getVersionName(config);\n  if (versionName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionName \".*\"`);\n  return buildGradle.replace(pattern, `versionName \"${versionName}\"`);\n}\n\nexport function getVersionCode(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.versionCode ?? 1;\n}\n\nexport function setVersionCode(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const versionCode = getVersionCode(config);\n  if (versionCode === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionCode.*`);\n  return buildGradle.replace(pattern, `versionCode ${versionCode}`);\n}\n"]},"metadata":{},"sourceType":"script"}