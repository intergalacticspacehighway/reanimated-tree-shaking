{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.createAndroidManifestPlugin=createAndroidManifestPlugin;exports.createStringsXmlPlugin=createStringsXmlPlugin;exports.withStringsXml=exports.withSettingsGradle=exports.withProjectBuildGradle=exports.withMainApplication=exports.withMainActivity=exports.withGradleProperties=exports.withAppBuildGradle=exports.withAndroidStyles=exports.withAndroidManifest=exports.withAndroidColorsNight=exports.withAndroidColors=void 0;function _withMod(){var data=require(\"./withMod\");_withMod=function _withMod(){return data;};return data;}/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */function createAndroidManifestPlugin(action,name){var withUnknown=function withUnknown(config){return withAndroidManifest(config,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return action(config,config.modResults);case 2:config.modResults=_context.sent;return _context.abrupt(\"return\",config);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};if(name){Object.defineProperty(withUnknown,'name',{value:name});}return withUnknown;}function createStringsXmlPlugin(action,name){var withUnknown=function withUnknown(config){return withStringsXml(config,/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return action(config,config.modResults);case 2:config.modResults=_context2.sent;return _context2.abrupt(\"return\",config);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());};if(name){Object.defineProperty(withUnknown,'name',{value:name});}return withUnknown;}/**\n * Provides the AndroidManifest.xml for modification.\n *\n * @param config\n * @param action\n */var withAndroidManifest=function withAndroidManifest(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'manifest',action:action});};/**\n * Provides the strings.xml for modification.\n *\n * @param config\n * @param action\n */exports.withAndroidManifest=withAndroidManifest;var withStringsXml=function withStringsXml(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'strings',action:action});};/**\n * Provides the `android/app/src/main/res/values/colors.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */exports.withStringsXml=withStringsXml;var withAndroidColors=function withAndroidColors(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'colors',action:action});};/**\n * Provides the `android/app/src/main/res/values-night/colors.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */exports.withAndroidColors=withAndroidColors;var withAndroidColorsNight=function withAndroidColorsNight(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'colorsNight',action:action});};/**\n * Provides the `android/app/src/main/res/values/styles.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */exports.withAndroidColorsNight=withAndroidColorsNight;var withAndroidStyles=function withAndroidStyles(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'styles',action:action});};/**\n * Provides the project MainActivity for modification.\n *\n * @param config\n * @param action\n */exports.withAndroidStyles=withAndroidStyles;var withMainActivity=function withMainActivity(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'mainActivity',action:action});};/**\n * Provides the project MainApplication for modification.\n *\n * @param config\n * @param action\n */exports.withMainActivity=withMainActivity;var withMainApplication=function withMainApplication(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'mainApplication',action:action});};/**\n * Provides the project /build.gradle for modification.\n *\n * @param config\n * @param action\n */exports.withMainApplication=withMainApplication;var withProjectBuildGradle=function withProjectBuildGradle(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'projectBuildGradle',action:action});};/**\n * Provides the app/build.gradle for modification.\n *\n * @param config\n * @param action\n */exports.withProjectBuildGradle=withProjectBuildGradle;var withAppBuildGradle=function withAppBuildGradle(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'appBuildGradle',action:action});};/**\n * Provides the /settings.gradle for modification.\n *\n * @param config\n * @param action\n */exports.withAppBuildGradle=withAppBuildGradle;var withSettingsGradle=function withSettingsGradle(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'settingsGradle',action:action});};/**\n * Provides the /gradle.properties for modification.\n *\n * @param config\n * @param action\n */exports.withSettingsGradle=withSettingsGradle;var withGradleProperties=function withGradleProperties(config,action){return(0,_withMod().withMod)(config,{platform:'android',mod:'gradleProperties',action:action});};exports.withGradleProperties=withGradleProperties;","map":{"version":3,"sources":["../../src/plugins/android-plugins.ts"],"names":["withUnknown","config","withAndroidManifest","action","Object","value","name","withStringsXml","platform","mod","withAndroidColors","withAndroidColorsNight","withAndroidStyles","withMainActivity","withMainApplication","withProjectBuildGradle","withAppBuildGradle","withSettingsGradle","withGradleProperties"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin, Mod } from '../Plugin.types';\nimport { Manifest, Paths, Properties, Resources } from '../android';\nimport { withMod } from './withMod';\n\ntype OptionalPromise<T> = T | Promise<T>;\n\ntype MutateDataAction<T> = (expo: ExpoConfig, data: T) => OptionalPromise<T>;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createAndroidManifestPlugin(\n  action: MutateDataAction<Manifest.AndroidManifest>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withAndroidManifest(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\nexport function createStringsXmlPlugin(\n  action: MutateDataAction<Resources.ResourceXML>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withStringsXml(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AndroidManifest.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withAndroidManifest: ConfigPlugin<Mod<Manifest.AndroidManifest>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'manifest',\n    action,\n  });\n};\n\n/**\n * Provides the strings.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withStringsXml: ConfigPlugin<Mod<Resources.ResourceXML>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'strings',\n    action,\n  });\n};\n\n/**\n * Provides the `android/app/src/main/res/values/colors.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */\nexport const withAndroidColors: ConfigPlugin<Mod<Resources.ResourceXML>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'colors',\n    action,\n  });\n};\n\n/**\n * Provides the `android/app/src/main/res/values-night/colors.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */\nexport const withAndroidColorsNight: ConfigPlugin<Mod<Resources.ResourceXML>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'colorsNight',\n    action,\n  });\n};\n\n/**\n * Provides the `android/app/src/main/res/values/styles.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */\nexport const withAndroidStyles: ConfigPlugin<Mod<Resources.ResourceXML>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'styles',\n    action,\n  });\n};\n\n/**\n * Provides the project MainActivity for modification.\n *\n * @param config\n * @param action\n */\nexport const withMainActivity: ConfigPlugin<Mod<Paths.ApplicationProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    action,\n  });\n};\n\n/**\n * Provides the project MainApplication for modification.\n *\n * @param config\n * @param action\n */\nexport const withMainApplication: ConfigPlugin<Mod<Paths.ApplicationProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'mainApplication',\n    action,\n  });\n};\n\n/**\n * Provides the project /build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withProjectBuildGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the app/build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppBuildGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the /settings.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withSettingsGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    action,\n  });\n};\n\n/**\n * Provides the /gradle.properties for modification.\n *\n * @param config\n * @param action\n */\nexport const withGradleProperties: ConfigPlugin<Mod<Properties.PropertiesItem[]>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'gradleProperties',\n    action,\n  });\n};\n"]},"metadata":{},"sourceType":"script"}