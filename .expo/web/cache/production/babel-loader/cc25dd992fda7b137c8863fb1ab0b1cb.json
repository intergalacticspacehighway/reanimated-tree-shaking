{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.parsePropertiesFile=parsePropertiesFile;exports.propertiesListToString=propertiesListToString;function parsePropertiesFile(contents){var propertiesList=[];var lines=contents.split('\\n');for(var i=0;i<lines.length;i++){var line=lines[i].trim();if(!line){propertiesList.push({type:'empty'});}else if(line.startsWith('#')){propertiesList.push({type:'comment',value:line.substring(1).trimStart()});}else{var eok=line.indexOf('=');var key=line.slice(0,eok);var value=line.slice(eok+1,line.length);propertiesList.push({type:'property',key:key,value:value});}}return propertiesList;}function propertiesListToString(props){var output='';for(var i=0;i<props.length;i++){var prop=props[i];if(prop.type==='empty'){output+='';}else if(prop.type==='comment'){output+='# '+prop.value;}else if(prop.type==='property'){output+=\"\".concat(prop.key,\"=\").concat(prop.value);}else{// @ts-ignore: assertion\nthrow new Error(\"Invalid properties type \\\"\".concat(prop.type,\"\\\"\"));}if(i<props.length-1){output+='\\n';}}return output;}","map":{"version":3,"sources":["../../src/android/Properties.ts"],"names":["propertiesList","lines","contents","i","line","type","value","eok","key","output","props","prop"],"mappings":"4KAcO,QAAA,CAAA,mBAAA,CAAA,QAAA,CAAiE,CACtE,GAAMA,CAAAA,cAAgC,CAAtC,EAAA,CACA,GAAMC,CAAAA,KAAK,CAAGC,QAAQ,CAARA,KAAAA,CAAd,IAAcA,CAAd,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAV,CAAA,CAAgBA,CAAC,CAAGF,KAAK,CAAzB,MAAA,CAAkCE,CAAlC,EAAA,CAAuC,CACrC,GAAMC,CAAAA,IAAI,CAAGH,KAAK,CAALA,CAAK,CAALA,CAAb,IAAaA,EAAb,CACA,GAAI,CAAJ,IAAA,CAAW,CACTD,cAAc,CAAdA,IAAAA,CAAoB,CAAEK,IAAI,CAAE,OAAR,CAApBL,EADF,CAAA,IAEO,IAAII,IAAI,CAAJA,UAAAA,CAAJ,GAAIA,CAAJ,CAA0B,CAC/BJ,cAAc,CAAdA,IAAAA,CAAoB,CAAEK,IAAI,CAAN,SAAA,CAAmBC,KAAK,CAAEF,IAAI,CAAJA,SAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAA1B,CAApBJ,EADK,CAAA,IAEA,CACL,GAAMO,CAAAA,GAAG,CAAGH,IAAI,CAAJA,OAAAA,CAAZ,GAAYA,CAAZ,CACA,GAAMI,CAAAA,GAAG,CAAGJ,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,CAAZ,GAAYA,CAAZ,CACA,GAAME,CAAAA,KAAK,CAAGF,IAAI,CAAJA,KAAAA,CAAWG,GAAG,CAAdH,CAAAA,CAAoBA,IAAI,CAAtC,MAAcA,CAAd,CACAJ,cAAc,CAAdA,IAAAA,CAAoB,CAAEK,IAAI,CAAN,UAAA,CAAoBG,GAApB,CAAoBA,GAApB,CAAyBF,KAAAA,CAAAA,KAAzB,CAApBN,EACD,CACF,CAED,MAAA,CAAA,cAAA,CACD,CAEM,QAAA,CAAA,sBAAA,CAAA,KAAA,CAAiE,CACtE,GAAIS,CAAAA,MAAM,CAAV,EAAA,CACA,IAAK,GAAIN,CAAAA,CAAC,CAAV,CAAA,CAAgBA,CAAC,CAAGO,KAAK,CAAzB,MAAA,CAAkCP,CAAlC,EAAA,CAAuC,CACrC,GAAMQ,CAAAA,IAAI,CAAGD,KAAK,CAAlB,CAAkB,CAAlB,CACA,GAAIC,IAAI,CAAJA,IAAAA,GAAJ,OAAA,CAA2B,CACzBF,MAAM,EAANA,EAAAA,CADF,CAAA,IAEO,IAAIE,IAAI,CAAJA,IAAAA,GAAJ,SAAA,CAA6B,CAClCF,MAAM,EAAI,KAAOE,IAAI,CAArBF,KAAAA,CADK,CAAA,IAEA,IAAIE,IAAI,CAAJA,IAAAA,GAAJ,UAAA,CAA8B,CACnCF,MAAM,YAAOE,IAAI,CAACH,GAAZ,aAAmBG,IAAI,CAA7BF,KAAM,CAANA,CADK,CAAA,IAEA,CACL;AACA,KAAM,IAAA,CAAA,KAAA,qCAAsCE,IAAI,CAAhD,IAAM,OAAN,CACD,CACD,GAAIR,CAAC,CAAGO,KAAK,CAALA,MAAAA,CAAR,CAAA,CAA0B,CACxBD,MAAM,EAANA,IAAAA,CACD,CACF,CACD,MAAA,CAAA,MAAA,CACD","sourcesContent":["export type PropertiesItem =\n  | {\n      type: 'comment';\n      value: string;\n    }\n  | {\n      type: 'empty';\n    }\n  | {\n      type: 'property';\n      key: string;\n      value: string;\n    };\n\nexport function parsePropertiesFile(contents: string): PropertiesItem[] {\n  const propertiesList: PropertiesItem[] = [];\n  const lines = contents.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) {\n      propertiesList.push({ type: 'empty' });\n    } else if (line.startsWith('#')) {\n      propertiesList.push({ type: 'comment', value: line.substring(1).trimStart() });\n    } else {\n      const eok = line.indexOf('=');\n      const key = line.slice(0, eok);\n      const value = line.slice(eok + 1, line.length);\n      propertiesList.push({ type: 'property', key, value });\n    }\n  }\n\n  return propertiesList;\n}\n\nexport function propertiesListToString(props: PropertiesItem[]): string {\n  let output = '';\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (prop.type === 'empty') {\n      output += '';\n    } else if (prop.type === 'comment') {\n      output += '# ' + prop.value;\n    } else if (prop.type === 'property') {\n      output += `${prop.key}=${prop.value}`;\n    } else {\n      // @ts-ignore: assertion\n      throw new Error(`Invalid properties type \"${prop.type}\"`);\n    }\n    if (i < props.length - 1) {\n      output += '\\n';\n    }\n  }\n  return output;\n}\n"]},"metadata":{},"sourceType":"script"}