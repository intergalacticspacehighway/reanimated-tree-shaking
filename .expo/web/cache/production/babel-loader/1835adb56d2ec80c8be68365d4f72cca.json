{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getBareExtensions=getBareExtensions;exports.getExtensions=getExtensions;exports.getLanguageExtensionsInOrder=getLanguageExtensionsInOrder;exports.getManagedExtensions=getManagedExtensions;function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function getExtensions(platforms,extensions,workflows){// In the past we used spread operators to collect the values so now we enforce type safety on them.\n(0,_assert()[\"default\"])(Array.isArray(platforms),'Expected: `platforms: string[]`');(0,_assert()[\"default\"])(Array.isArray(extensions),'Expected: `extensions: string[]`');(0,_assert()[\"default\"])(Array.isArray(workflows),'Expected: `workflows: string[]`');var fileExtensions=[];// support .expo files\nfor(var _i=0,_arr=[].concat(_toConsumableArray(workflows),['']);_i<_arr.length;_i++){var workflow=_arr[_i];// Ensure order is correct: [platformA.js, platformB.js, js]\nfor(var _i2=0,_arr2=[].concat(_toConsumableArray(platforms),['']);_i2<_arr2.length;_i2++){var platform=_arr2[_i2];// Support both TypeScript and JavaScript\nvar _iterator=_createForOfIteratorHelper(extensions),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var extension=_step.value;fileExtensions.push([platform,workflow,extension].filter(Boolean).join('.'));}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}return fileExtensions;}function getLanguageExtensionsInOrder(_ref){var isTS=_ref.isTS,isModern=_ref.isModern,isReact=_ref.isReact;// @ts-ignore: filter removes false type\nvar addLanguage=function addLanguage(lang){return[lang,isReact&&\"\".concat(lang,\"x\")].filter(Boolean);};// Support JavaScript\nvar extensions=addLanguage('js');if(isModern){extensions.unshift('mjs');}if(isTS){extensions=[].concat(_toConsumableArray(addLanguage('ts')),_toConsumableArray(extensions));}return extensions;}function getManagedExtensions(platforms){var languageOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{isTS:true,isModern:true,isReact:true};var fileExtensions=getExtensions(platforms,getLanguageExtensionsInOrder(languageOptions),['expo']);// Always add these last\n_addMiscellaneousExtensions(platforms,fileExtensions);return fileExtensions;}function getBareExtensions(platforms){var languageOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{isTS:true,isModern:true,isReact:true};var fileExtensions=getExtensions(platforms,getLanguageExtensionsInOrder(languageOptions),[]);// Always add these last\n_addMiscellaneousExtensions(platforms,fileExtensions);return fileExtensions;}function _addMiscellaneousExtensions(platforms,fileExtensions){// Always add these with no platform extension\n// In the future we may want to add platform and workspace extensions to json.\nfileExtensions.push('json');// Native doesn't currently support web assembly.\nif(platforms.includes('web')){fileExtensions.push('wasm');}return fileExtensions;}","map":{"version":3,"sources":["../../src/paths/extensions.ts"],"names":["Array","fileExtensions","workflow","platform","isReact","addLanguage","lang","extensions","languageOptions","isTS","isModern","getExtensions","getLanguageExtensionsInOrder","_addMiscellaneousExtensions","platforms"],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nexport type LanguageOptions = {\n  isTS: boolean;\n  isModern: boolean;\n  isReact: boolean;\n};\n\nexport function getExtensions(\n  platforms: string[],\n  extensions: string[],\n  workflows: string[]\n): string[] {\n  // In the past we used spread operators to collect the values so now we enforce type safety on them.\n  assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  assert(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n\n  const fileExtensions = [];\n  // support .expo files\n  for (const workflow of [...workflows, '']) {\n    // Ensure order is correct: [platformA.js, platformB.js, js]\n    for (const platform of [...platforms, '']) {\n      // Support both TypeScript and JavaScript\n      for (const extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\n\nexport function getLanguageExtensionsInOrder({\n  isTS,\n  isModern,\n  isReact,\n}: LanguageOptions): string[] {\n  // @ts-ignore: filter removes false type\n  const addLanguage = (lang: string): string[] => [lang, isReact && `${lang}x`].filter(Boolean);\n\n  // Support JavaScript\n  let extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [...addLanguage('ts'), ...extensions];\n  }\n\n  return extensions;\n}\n\nexport function getManagedExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), [\n    'expo',\n  ]);\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nexport function getBareExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(\n    platforms,\n    getLanguageExtensionsInOrder(languageOptions),\n    []\n  );\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms: string[], fileExtensions: string[]): string[] {\n  // Always add these with no platform extension\n  // In the future we may want to add platform and workspace extensions to json.\n  fileExtensions.push('json');\n  // Native doesn't currently support web assembly.\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}\n"]},"metadata":{},"sourceType":"script"}