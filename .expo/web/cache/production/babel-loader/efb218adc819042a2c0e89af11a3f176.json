{"ast":null,"code":"\"use strict\";exports.__esModule=true;exports[\"default\"]=void 0;var _unitlessNumbers=_interopRequireDefault(require(\"../unitlessNumbers\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}/* eslint-disable */ /**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n * \n */ /**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */function dangerousStyleValue(name,value,isCustomProperty){// Note that we've removed escapeTextForBrowser() calls here since the\n// whole string will be escaped when the attribute is injected into\n// the markup. If you provide unsafe user data here they can inject\n// arbitrary CSS which may be problematic (I couldn't repro this):\n// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n// This is not an XSS hole but instead a potential CSS injection issue\n// which has lead to a greater discussion about how we're going to\n// trust URLs moving forward. See #2115901\nvar isEmpty=value==null||typeof value==='boolean'||value==='';if(isEmpty){return'';}if(!isCustomProperty&&typeof value==='number'&&value!==0&&!(_unitlessNumbers[\"default\"].hasOwnProperty(name)&&_unitlessNumbers[\"default\"][name])){return value+'px';// Presumes implicit 'px' suffix for unitless numbers\n}return(''+value).trim();}var _default=dangerousStyleValue;exports[\"default\"]=_default;module.exports=exports[\"default\"];","map":{"version":3,"names":["exports","__esModule","_unitlessNumbers","_interopRequireDefault","require","obj","dangerousStyleValue","name","value","isCustomProperty","isEmpty","hasOwnProperty","trim","_default","module"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-web/dist/cjs/modules/setValueForStyles/dangerousStyleValue.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _unitlessNumbers = _interopRequireDefault(require(\"../unitlessNumbers\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n * \n */\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(_unitlessNumbers.default.hasOwnProperty(name) && _unitlessNumbers.default[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n}\n\nvar _default = dangerousStyleValue;\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA,aAEAA,OAAO,CAACC,UAAR,CAAqB,IAArB,CACAD,OAAO,WAAP,CAAkB,IAAK,EAAvB,CAEA,GAAIE,CAAAA,gBAAgB,CAAGC,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAA7C,CAEA,QAASD,CAAAA,sBAAT,CAAgCE,GAAhC,CAAqC,CAAE,MAAOA,CAAAA,GAAG,EAAIA,GAAG,CAACJ,UAAX,CAAwBI,GAAxB,CAA8B,CAAE,UAASA,GAAX,CAArC,CAAwD,CAE/F,oB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,mBAAT,CAA6BC,IAA7B,CAAmCC,KAAnC,CAA0CC,gBAA1C,CAA4D,CAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAIC,CAAAA,OAAO,CAAGF,KAAK,EAAI,IAAT,EAAiB,MAAOA,CAAAA,KAAP,GAAiB,SAAlC,EAA+CA,KAAK,GAAK,EAAvE,CAEA,GAAIE,OAAJ,CAAa,CACX,MAAO,EAAP,CACD,CAED,GAAI,CAACD,gBAAD,EAAqB,MAAOD,CAAAA,KAAP,GAAiB,QAAtC,EAAkDA,KAAK,GAAK,CAA5D,EAAiE,EAAEN,gBAAgB,WAAhB,CAAyBS,cAAzB,CAAwCJ,IAAxC,GAAiDL,gBAAgB,WAAhB,CAAyBK,IAAzB,CAAnD,CAArE,CAAyJ,CACvJ,MAAOC,CAAAA,KAAK,CAAG,IAAf,CAAqB;AACtB,CAED,MAAO,CAAC,GAAKA,KAAN,EAAaI,IAAb,EAAP,CACD,CAED,GAAIC,CAAAA,QAAQ,CAAGP,mBAAf,CACAN,OAAO,WAAP,CAAkBa,QAAlB,CACAC,MAAM,CAACd,OAAP,CAAiBA,OAAO,WAAxB"},"metadata":{},"sourceType":"script"}