{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.setProvisioningProfileForPbxproj=setProvisioningProfileForPbxproj;function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _Target(){var data=require(\"./Target\");_Target=function _Target(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function setProvisioningProfileForPbxproj(projectRoot,_ref){var targetName=_ref.targetName,profileName=_ref.profileName,appleTeamId=_ref.appleTeamId,_ref$buildConfigurati=_ref.buildConfiguration,buildConfiguration=_ref$buildConfigurati===void 0?'Release':_ref$buildConfigurati;var project=(0,_Xcodeproj().getPbxproj)(projectRoot);var nativeTargetEntry=targetName?(0,_Target().findNativeTargetByName)(project,targetName):(0,_Target().findFirstNativeTarget)(project);var _nativeTargetEntry=_slicedToArray(nativeTargetEntry,2),nativeTargetId=_nativeTargetEntry[0],nativeTarget=_nativeTargetEntry[1];var quotedAppleTeamId=ensureQuotes(appleTeamId);(0,_Xcodeproj().getBuildConfigurationsForListId)(project,nativeTarget.buildConfigurationList).filter(function(_ref2){var _ref3=_slicedToArray(_ref2,2),item=_ref3[1];return item.name===buildConfiguration;}).forEach(function(_ref4){var _ref5=_slicedToArray(_ref4,2),item=_ref5[1];item.buildSettings.PROVISIONING_PROFILE_SPECIFIER=\"\\\"\".concat(profileName,\"\\\"\");item.buildSettings.DEVELOPMENT_TEAM=quotedAppleTeamId;item.buildSettings.CODE_SIGN_IDENTITY='\"iPhone Distribution\"';item.buildSettings.CODE_SIGN_STYLE='Manual';});Object.entries((0,_Xcodeproj().getProjectSection)(project)).filter(_Xcodeproj().isNotComment).forEach(function(_ref6){var _ref7=_slicedToArray(_ref6,2),item=_ref7[1];if(!item.attributes.TargetAttributes[nativeTargetId]){item.attributes.TargetAttributes[nativeTargetId]={};}item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam=quotedAppleTeamId;item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle='Manual';});_fs()[\"default\"].writeFileSync(project.filepath,project.writeSync());}var ensureQuotes=function ensureQuotes(value){if(!value.match(/^['\"]/)){return\"\\\"\".concat(value,\"\\\"\");}return value;};","map":{"version":3,"sources":["../../src/ios/ProvisioningProfile.ts"],"names":["buildConfiguration","project","nativeTargetEntry","targetName","quotedAppleTeamId","ensureQuotes","nativeTarget","item","Object","isNotComment","fs","value"],"mappings":"kSAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,UAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA,UAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,qFAgBO,QAAA,CAAA,gCAAA,CAAA,WAAA,MAQC,IANN,CAAA,UAMM,MANN,UAMM,CANN,WAMM,MANN,WAMM,CANN,WAMM,MANN,WAMM,4BAFJA,kBAEI,CAFJA,kBAEI,gCAFiB,SAEjB,uBACN,GAAMC,CAAAA,OAAO,CAAG,CAAA,EAAA,UAAA,GAAA,UAAA,EAAhB,WAAgB,CAAhB,CAEA,GAAMC,CAAAA,iBAAiB,CAAGC,UAAU,CAChC,CAAA,EAAA,OAAA,GAAA,sBAAA,EAAA,OAAA,CADgC,UAChC,CADgC,CAEhC,CAAA,EAAA,OAAA,GAAA,qBAAA,EAFJ,OAEI,CAFJ,CAGA,sCAAA,iBAAA,IAAM,cAAN,uBAAM,YAAN,uBAEA,GAAMC,CAAAA,iBAAiB,CAAGC,YAAY,CAAtC,WAAsC,CAAtC,CAEA,CAAA,EAAA,UAAA,GAAA,+BAAA,EAAA,OAAA,CAAyCC,YAAY,CAArD,sBAAA,EAAA,MAAA,CACU,kDAAA,IAAA,gBAAyCC,CAAAA,IAAI,CAAJA,IAAAA,GADnD,kBACU,EADV,EAAA,OAAA,CAEW,eAAyC,mCAAzC,IAAyC,UAChDA,IAAI,CAAJA,aAAAA,CAAAA,8BAAAA,aAAAA,WAAAA,OACAA,IAAI,CAAJA,aAAAA,CAAAA,gBAAAA,CAAAA,iBAAAA,CACAA,IAAI,CAAJA,aAAAA,CAAAA,kBAAAA,CAAAA,uBAAAA,CACAA,IAAI,CAAJA,aAAAA,CAAAA,eAAAA,CAAAA,QAAAA,CANJ,CAAA,EASAC,MAAM,CAANA,OAAAA,CAAe,CAAA,EAAA,UAAA,GAAA,iBAAA,EAAfA,OAAe,CAAfA,EAAAA,MAAAA,CACUC,UAAAA,GADVD,YAAAA,EAAAA,OAAAA,CAEW,eAAmC,mCAAnC,IAAmC,UAC1C,GAAI,CAACD,IAAI,CAAJA,UAAAA,CAAAA,gBAAAA,CAAL,cAAKA,CAAL,CAAuD,CACrDA,IAAI,CAAJA,UAAAA,CAAAA,gBAAAA,CAAAA,cAAAA,EAAAA,EAAAA,CACD,CACDA,IAAI,CAAJA,UAAAA,CAAAA,gBAAAA,CAAAA,cAAAA,EAAAA,eAAAA,CAAAA,iBAAAA,CACAA,IAAI,CAAJA,UAAAA,CAAAA,gBAAAA,CAAAA,cAAAA,EAAAA,iBAAAA,CAAAA,QAAAA,CAPJC,CAAAA,EAUAE,GAAAA,aAAAA,CAAAA,aAAAA,CAAiBT,OAAO,CAAxBS,QAAAA,CAAmCT,OAAO,CAA1CS,SAAmCT,EAAnCS,EACD,CAED,GAAML,CAAAA,YAAY,CAAIM,QAAhBN,CAAAA,YAAgBM,CAAAA,KAAD,CAAmB,CACtC,GAAI,CAACA,KAAK,CAALA,KAAAA,CAAL,OAAKA,CAAL,CAA2B,CACzB,kBAAA,KAAA,OACD,CACD,MAAA,CAAA,KAAA,CAJF,CAAA","sourcesContent":["import fs from 'fs';\n\nimport { findFirstNativeTarget, findNativeTargetByName } from './Target';\nimport {\n  ConfigurationSectionEntry,\n  getBuildConfigurationsForListId,\n  getPbxproj,\n  getProjectSection,\n  isNotComment,\n  ProjectSectionEntry,\n} from './utils/Xcodeproj';\n\ntype ProvisioningProfileSettings = {\n  targetName?: string;\n  appleTeamId: string;\n  profileName: string;\n  buildConfiguration?: string;\n};\n\nexport function setProvisioningProfileForPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    profileName,\n    appleTeamId,\n    buildConfiguration = 'Release',\n  }: ProvisioningProfileSettings\n): void {\n  const project = getPbxproj(projectRoot);\n\n  const nativeTargetEntry = targetName\n    ? findNativeTargetByName(project, targetName)\n    : findFirstNativeTarget(project);\n  const [nativeTargetId, nativeTarget] = nativeTargetEntry;\n\n  const quotedAppleTeamId = ensureQuotes(appleTeamId);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList)\n    .filter(([, item]: ConfigurationSectionEntry) => item.name === buildConfiguration)\n    .forEach(([, item]: ConfigurationSectionEntry) => {\n      item.buildSettings.PROVISIONING_PROFILE_SPECIFIER = `\"${profileName}\"`;\n      item.buildSettings.DEVELOPMENT_TEAM = quotedAppleTeamId;\n      item.buildSettings.CODE_SIGN_IDENTITY = '\"iPhone Distribution\"';\n      item.buildSettings.CODE_SIGN_STYLE = 'Manual';\n    });\n\n  Object.entries(getProjectSection(project))\n    .filter(isNotComment)\n    .forEach(([, item]: ProjectSectionEntry) => {\n      if (!item.attributes.TargetAttributes[nativeTargetId]) {\n        item.attributes.TargetAttributes[nativeTargetId] = {};\n      }\n      item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = quotedAppleTeamId;\n      item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = 'Manual';\n    });\n\n  fs.writeFileSync(project.filepath, project.writeSync());\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n"]},"metadata":{},"sourceType":"script"}