{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getExpoHomeDirectory=getExpoHomeDirectory;exports.getUserState=getUserState;exports.getUserStatePath=getUserStatePath;function _jsonFile(){var data=_interopRequireDefault(require(\"@expo/json-file\"));_jsonFile=function _jsonFile(){return data;};return data;}function _getenv(){var data=require(\"getenv\");_getenv=function _getenv(){return data;};return data;}function _os(){var data=require(\"os\");_os=function _os(){return data;};return data;}function path(){var data=_interopRequireWildcard(require(\"path\"));path=function path(){return data;};return data;}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{\"default\":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj[\"default\"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}// The ~/.expo directory is used to store authentication sessions,\n// which are shared between EAS CLI and Expo CLI.\nfunction getExpoHomeDirectory(){var home=(0,_os().homedir)();if(process.env.__UNSAFE_EXPO_HOME_DIRECTORY){return process.env.__UNSAFE_EXPO_HOME_DIRECTORY;}else if((0,_getenv().boolish)('EXPO_STAGING',false)){return path().join(home,'.expo-staging');}else if((0,_getenv().boolish)('EXPO_LOCAL',false)){return path().join(home,'.expo-local');}return path().join(home,'.expo');}function getUserStatePath(){return path().join(getExpoHomeDirectory(),'state.json');}function getUserState(){return new(_jsonFile()[\"default\"])(getUserStatePath(),{jsonParseErrorDefault:{},// This will ensure that an error isn't thrown if the file doesn't exist.\ncantReadFileDefault:{}});}","map":{"version":3,"sources":["../src/getUserState.ts"],"names":["home","process","path","getExpoHomeDirectory","JsonFile","getUserStatePath","jsonParseErrorDefault","cantReadFileDefault"],"mappings":"oMAAA,QAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,IAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,olCA6BA;AACA;AACO,QAAA,CAAA,oBAAA,EAAgC,CACrC,GAAMA,CAAAA,IAAI,CAAG,CAAA,EAAA,GAAA,GAAb,OAAa,GAAb,CAEA,GAAIC,OAAO,CAAPA,GAAAA,CAAJ,4BAAA,CAA8C,CAC5C,MAAOA,CAAAA,OAAO,CAAPA,GAAAA,CAAP,4BAAA,CADF,CAAA,IAEO,IAAI,CAAA,EAAA,OAAA,GAAA,OAAA,EAAA,cAAA,CAAJ,KAAI,CAAJ,CAAoC,CACzC,MAAOC,CAAAA,IAAI,GAAJA,IAAAA,CAAAA,IAAAA,CAAP,eAAOA,CAAP,CADK,CAAA,IAEA,IAAI,CAAA,EAAA,OAAA,GAAA,OAAA,EAAA,YAAA,CAAJ,KAAI,CAAJ,CAAkC,CACvC,MAAOA,CAAAA,IAAI,GAAJA,IAAAA,CAAAA,IAAAA,CAAP,aAAOA,CAAP,CACD,CACD,MAAOA,CAAAA,IAAI,GAAJA,IAAAA,CAAAA,IAAAA,CAAP,OAAOA,CAAP,CACD,CAEM,QAAA,CAAA,gBAAA,EAA4B,CACjC,MAAOA,CAAAA,IAAI,GAAJA,IAAAA,CAAUC,oBAAVD,EAAAA,CAAP,YAAOA,CAAP,CACD,CAEM,QAAA,CAAA,YAAA,EAAwB,CAC7B,MAAO,KAAIE,SAAJ,aAAA,EAA+BC,gBAA/B,EAAA,CAAmD,CACxDC,qBAAqB,CADmC,EAAA,CAExD;AACAC,mBAAmB,CAAE,EAHmC,CAAnD,CAAP,CAKD","sourcesContent":["import JsonFile from '@expo/json-file';\nimport { boolish } from 'getenv';\nimport { homedir } from 'os';\nimport * as path from 'path';\n\nexport type UserSettingsData = {\n  developmentCodeSigningId?: string;\n  appleId?: string;\n  accessToken?: string;\n  auth?: UserData | null;\n  ignoreBundledBinaries?: string[];\n  openDevToolsAtStartup?: boolean;\n  PATH?: string;\n  sendTo?: string;\n  uuid?: string;\n};\n\nexport type UserData = {\n  appleId?: string;\n  userId?: string;\n  username?: string;\n  currentConnection?: ConnectionType;\n  sessionSecret?: string;\n};\n\nexport type ConnectionType =\n  | 'Access-Token-Authentication'\n  | 'Username-Password-Authentication'\n  | 'facebook'\n  | 'google-oauth2'\n  | 'github';\n\n// The ~/.expo directory is used to store authentication sessions,\n// which are shared between EAS CLI and Expo CLI.\nexport function getExpoHomeDirectory() {\n  const home = homedir();\n\n  if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n    return process.env.__UNSAFE_EXPO_HOME_DIRECTORY;\n  } else if (boolish('EXPO_STAGING', false)) {\n    return path.join(home, '.expo-staging');\n  } else if (boolish('EXPO_LOCAL', false)) {\n    return path.join(home, '.expo-local');\n  }\n  return path.join(home, '.expo');\n}\n\nexport function getUserStatePath() {\n  return path.join(getExpoHomeDirectory(), 'state.json');\n}\n\nexport function getUserState() {\n  return new JsonFile<UserSettingsData>(getUserStatePath(), {\n    jsonParseErrorDefault: {},\n    // This will ensure that an error isn't thrown if the file doesn't exist.\n    cantReadFileDefault: {},\n  });\n}\n"]},"metadata":{},"sourceType":"script"}