{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getRootPackageJsonPath=getRootPackageJsonPath;function _fs(){var data=require(\"fs\");_fs=function _fs(){return data;};return data;}function _path(){var data=require(\"path\");_path=function _path(){return data;};return data;}function _Errors(){var data=require(\"./Errors\");_Errors=function _Errors(){return data;};return data;}function fileExists(file){try{return(0,_fs().statSync)(file).isFile();}catch(_unused){return false;}}function getRootPackageJsonPath(projectRoot){var packageJsonPath=(0,_path().join)(projectRoot,'package.json');if(!fileExists(packageJsonPath)){throw new(_Errors().ConfigError)(\"The expected package.json path: \".concat(packageJsonPath,\" does not exist\"),'MODULE_NOT_FOUND');}return packageJsonPath;}","map":{"version":3,"sources":["../src/resolvePackageJson.ts"],"names":["packageJsonPath","fileExists","ConfigError"],"mappings":"4HAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,KAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA,QAAA,CAAA,UAAA,CAAA,IAAA,CAA2C,CACzC,GAAI,CACF,MAAO,CAAA,EAAA,GAAA,GAAA,QAAA,EAAA,IAAA,EAAP,MAAO,EAAP,CADF,CAEE,cAAM,CACN,MAAA,MAAA,CACD,CACF,CAEM,QAAA,CAAA,sBAAA,CAAA,WAAA,CAA6D,CAClE,GAAMA,CAAAA,eAAe,CAAG,CAAA,EAAA,KAAA,GAAA,IAAA,EAAA,WAAA,CAAxB,cAAwB,CAAxB,CACA,GAAI,CAACC,UAAU,CAAf,eAAe,CAAf,CAAkC,CAChC,KAAM,KAAIC,OAAAA,GAAJ,WAAA,4CAAA,eAAA,oBAAN,kBAAM,CAAN,CAID,CACD,MAAA,CAAA,eAAA,CACD","sourcesContent":["import { statSync } from 'fs';\nimport { join } from 'path';\n\nimport { ConfigError } from './Errors';\n\nfunction fileExists(file: string): boolean {\n  try {\n    return statSync(file).isFile();\n  } catch {\n    return false;\n  }\n}\n\nexport function getRootPackageJsonPath(projectRoot: string): string {\n  const packageJsonPath = join(projectRoot, 'package.json');\n  if (!fileExists(packageJsonPath)) {\n    throw new ConfigError(\n      `The expected package.json path: ${packageJsonPath} does not exist`,\n      'MODULE_NOT_FOUND'\n    );\n  }\n  return packageJsonPath;\n}\n"]},"metadata":{},"sourceType":"script"}