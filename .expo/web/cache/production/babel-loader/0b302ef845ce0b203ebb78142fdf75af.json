{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ // It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */function swap(ary,x,y){var temp=ary[x];ary[x]=ary[y];ary[y]=temp;}/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */function randomIntInRange(low,high){return Math.round(low+Math.random()*(high-low));}/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */function doQuickSort(ary,comparator,p,r){// If our lower bound is less than our upper bound, we (1) partition the\n// array into two pieces and (2) recurse on each half. If it is not, this is\n// the empty array and our base case.\nif(p<r){// (1) Partitioning.\n//\n// The partitioning chooses a pivot between `p` and `r` and moves all\n// elements that are less than or equal to the pivot to the before it, and\n// all the elements that are greater than it after it. The effect is that\n// once partition is done, the pivot is in the exact place it will be when\n// the array is put in sorted order, and it will not need to be moved\n// again. This runs in O(n) time.\n// Always choose a random pivot so that an input array which is reverse\n// sorted does not cause O(n^2) running time.\nvar pivotIndex=randomIntInRange(p,r);var i=p-1;swap(ary,pivotIndex,r);var pivot=ary[r];// Immediately after `j` is incremented in this loop, the following hold\n// true:\n//\n//   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n//\n//   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\nfor(var j=p;j<r;j++){if(comparator(ary[j],pivot)<=0){i+=1;swap(ary,i,j);}}swap(ary,i+1,j);var q=i+1;// (2) Recurse on each half.\ndoQuickSort(ary,comparator,p,q-1);doQuickSort(ary,comparator,q+1,r);}}/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */exports.quickSort=function(ary,comparator){doQuickSort(ary,comparator,0,ary.length-1);};","map":{"version":3,"names":["swap","ary","x","y","temp","randomIntInRange","low","high","Math","round","random","doQuickSort","comparator","p","r","pivotIndex","i","pivot","j","q","exports","quickSort","length"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/@expo/webpack-config/node_modules/source-map/lib/quick-sort.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n"],"mappings":"AAAA,2C,CACA;AACA;AACA;AACA;AACA,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASA,CAAAA,IAAT,CAAcC,GAAd,CAAmBC,CAAnB,CAAsBC,CAAtB,CAAyB,CACvB,GAAIC,CAAAA,IAAI,CAAGH,GAAG,CAACC,CAAD,CAAd,CACAD,GAAG,CAACC,CAAD,CAAH,CAASD,GAAG,CAACE,CAAD,CAAZ,CACAF,GAAG,CAACE,CAAD,CAAH,CAASC,IAAT,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,gBAAT,CAA0BC,GAA1B,CAA+BC,IAA/B,CAAqC,CACnC,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWH,GAAG,CAAIE,IAAI,CAACE,MAAL,IAAiBH,IAAI,CAAGD,GAAxB,CAAlB,CAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASK,CAAAA,WAAT,CAAqBV,GAArB,CAA0BW,UAA1B,CAAsCC,CAAtC,CAAyCC,CAAzC,CAA4C,CAC1C;AACA;AACA;AAEA,GAAID,CAAC,CAAGC,CAAR,CAAW,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,GAAIC,CAAAA,UAAU,CAAGV,gBAAgB,CAACQ,CAAD,CAAIC,CAAJ,CAAjC,CACA,GAAIE,CAAAA,CAAC,CAAGH,CAAC,CAAG,CAAZ,CAEAb,IAAI,CAACC,GAAD,CAAMc,UAAN,CAAkBD,CAAlB,CAAJ,CACA,GAAIG,CAAAA,KAAK,CAAGhB,GAAG,CAACa,CAAD,CAAf,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAK,GAAII,CAAAA,CAAC,CAAGL,CAAb,CAAgBK,CAAC,CAAGJ,CAApB,CAAuBI,CAAC,EAAxB,CAA4B,CAC1B,GAAIN,UAAU,CAACX,GAAG,CAACiB,CAAD,CAAJ,CAASD,KAAT,CAAV,EAA6B,CAAjC,CAAoC,CAClCD,CAAC,EAAI,CAAL,CACAhB,IAAI,CAACC,GAAD,CAAMe,CAAN,CAASE,CAAT,CAAJ,CACD,CACF,CAEDlB,IAAI,CAACC,GAAD,CAAMe,CAAC,CAAG,CAAV,CAAaE,CAAb,CAAJ,CACA,GAAIC,CAAAA,CAAC,CAAGH,CAAC,CAAG,CAAZ,CAEA;AAEAL,WAAW,CAACV,GAAD,CAAMW,UAAN,CAAkBC,CAAlB,CAAqBM,CAAC,CAAG,CAAzB,CAAX,CACAR,WAAW,CAACV,GAAD,CAAMW,UAAN,CAAkBO,CAAC,CAAG,CAAtB,CAAyBL,CAAzB,CAAX,CACD,CACF,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAM,OAAO,CAACC,SAAR,CAAoB,SAAUpB,GAAV,CAAeW,UAAf,CAA2B,CAC7CD,WAAW,CAACV,GAAD,CAAMW,UAAN,CAAkB,CAAlB,CAAqBX,GAAG,CAACqB,MAAJ,CAAa,CAAlC,CAAX,CACD,CAFD"},"metadata":{},"sourceType":"script"}