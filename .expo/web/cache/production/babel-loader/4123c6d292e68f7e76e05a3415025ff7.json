{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getAccountUsername=getAccountUsername;exports.getFullName=getFullName;function _getUserState(){var data=require(\"./getUserState\");_getUserState=function _getUserState(){return data;};return data;}var ANONYMOUS_USERNAME='anonymous';/**\n * Used in expo-constants to generate the `id` property statically for an app in custom managed workflow.\n * This `id` is used for legacy Expo services AuthSession proxy and Expo notifications device ID.\n *\n * @param manifest\n * @returns\n */function getFullName(manifest){var username=getAccountUsername(manifest);return\"@\".concat(username,\"/\").concat(manifest.slug);}function getAccountUsername(){var manifest=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _getUserState$read$au;// TODO: Must match what's generated in Expo Go.\nvar username=manifest.owner||process.env.EXPO_CLI_USERNAME||process.env.EAS_BUILD_USERNAME;if(username){return username;}// Statically get the username from the global user state.\nreturn((_getUserState$read$au=(0,_getUserState().getUserState)().read().auth)===null||_getUserState$read$au===void 0?void 0:_getUserState$read$au.username)||ANONYMOUS_USERNAME;}","map":{"version":3,"sources":["../src/getFullName.ts"],"names":["ANONYMOUS_USERNAME","username","getAccountUsername","manifest","process"],"mappings":"oJAEA,QAAA,CAAA,aAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA,GAAMA,CAAAA,kBAAkB,CAAxB,WAAA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACO,QAAA,CAAA,WAAA,CAAA,QAAA,CAA2E,CAChF,GAAMC,CAAAA,QAAQ,CAAGC,kBAAkB,CAAnC,QAAmC,CAAnC,CACA,iBAAWD,QAAX,aAAuBE,QAAQ,CAA/B,IAAA,EACD,CAEM,QAAA,CAAA,kBAAA,EAA8E,IAAlDA,CAAAA,QAAkD,2DAA9E,EAA8E,CAAA,GAAA,CAAA,qBAAA,CACnF;AACA,GAAMF,CAAAA,QAAQ,CACZE,QAAQ,CAARA,KAAAA,EAAkBC,OAAO,CAAPA,GAAAA,CAAlBD,iBAAAA,EAAmDC,OAAO,CAAPA,GAAAA,CADrD,kBAAA,CAEA,GAAA,QAAA,CAAc,CACZ,MAAA,CAAA,QAAA,CALiF,CAOnF;AACA,MAAO,CAAA,CAAA,qBAAA,CAAA,CAAA,EAAA,aAAA,GAAA,YAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,QAAA,GAAP,kBAAA,CACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { getUserState } from './getUserState';\n\nconst ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Used in expo-constants to generate the `id` property statically for an app in custom managed workflow.\n * This `id` is used for legacy Expo services AuthSession proxy and Expo notifications device ID.\n *\n * @param manifest\n * @returns\n */\nexport function getFullName(manifest: Pick<ExpoConfig, 'owner' | 'slug'>): string {\n  const username = getAccountUsername(manifest);\n  return `@${username}/${manifest.slug}`;\n}\n\nexport function getAccountUsername(manifest: Pick<ExpoConfig, 'owner'> = {}): string {\n  // TODO: Must match what's generated in Expo Go.\n  const username =\n    manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  // Statically get the username from the global user state.\n  return getUserState().read().auth?.username || ANONYMOUS_USERNAME;\n}\n"]},"metadata":{},"sourceType":"script"}