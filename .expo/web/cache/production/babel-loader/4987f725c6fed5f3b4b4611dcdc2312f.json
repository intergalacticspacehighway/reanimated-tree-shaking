{"ast":null,"code":"import _slicedToArray from\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/inherits\";import _possibleConstructorReturn from\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import invariant from'invariant';import NativeModules from\"react-native-web/dist/cjs/exports/NativeModules\";import{val}from'../val';import{adapt,createAnimatedBlock as block}from'./AnimatedBlock';import{createAnimatedCall as call}from'./AnimatedCall';import AnimatedNode from'./AnimatedNode';var AnimatedDebug=/*#__PURE__*/function(_AnimatedNode){_inherits(AnimatedDebug,_AnimatedNode);var _super=_createSuper(AnimatedDebug);function AnimatedDebug(message,value){var _this;_classCallCheck(this,AnimatedDebug);invariant(typeof message==='string',\"Reanimated: Animated.debug node first argument should be of type string but got \".concat(message));invariant(value instanceof AnimatedNode,\"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \".concat(value));_this=_super.call(this,{type:'debug',message:message,value:value},[value]);_defineProperty(_assertThisInitialized(_this),\"_message\",void 0);_defineProperty(_assertThisInitialized(_this),\"_value\",void 0);_this._message=message;_this._value=value;return _this;}_createClass(AnimatedDebug,[{key:\"toString\",value:function toString(){return\"AnimatedDebug, id: \".concat(this.__nodeID);}},{key:\"__onEvaluate\",value:function __onEvaluate(){var value=val(this._value);console.log(this._message,value);return value;}}]);return AnimatedDebug;}(AnimatedNode);export function createAnimatedDebug(message,value){if(__DEV__){var _NativeModules$Native,_NativeModules$Native2,_NativeModules$Native3;// hack to detect if app is running in remote debugger\n// https://stackoverflow.com/questions/39022216\nvar runningInRemoteDebugger=typeof atob!=='undefined';// read the executionEnvironment off of expo-constants without explicitly\n// depending on the package\nvar runningInExpoShell=((_NativeModules$Native=NativeModules.NativeUnimoduleProxy)===null||_NativeModules$Native===void 0?void 0:(_NativeModules$Native2=_NativeModules$Native.modulesConstants)===null||_NativeModules$Native2===void 0?void 0:(_NativeModules$Native3=_NativeModules$Native2.ExponentConstants)===null||_NativeModules$Native3===void 0?void 0:_NativeModules$Native3.executionEnvironment)==='storeClient';if(runningInRemoteDebugger||runningInExpoShell){// When running in expo or remote debugger we use JS console.log to output variables\n// otherwise we output to the native console using native debug node\nreturn block([call([value],function(_ref){var _ref2=_slicedToArray(_ref,1),a=_ref2[0];return console.log(\"\".concat(message,\" \").concat(a));}),value]);}else{return new AnimatedDebug(message,adapt(value));}}// Debugging is disabled in PROD\nreturn value;}","map":{"version":3,"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","invariant","NativeModules","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","message","type","_message","_value","__nodeID","console","log","createAnimatedDebug","__DEV__","_NativeModules$Native","_NativeModules$Native2","_NativeModules$Native3","runningInRemoteDebugger","atob","runningInExpoShell","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","a"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport invariant from 'invariant';\nimport NativeModules from \"react-native-web/dist/cjs/exports/NativeModules\";\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  constructor(message, value) {\n    invariant(typeof message === 'string', `Reanimated: Animated.debug node first argument should be of type string but got ${message}`);\n    invariant(value instanceof AnimatedNode, `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`);\n    super({\n      type: 'debug',\n      message,\n      value\n    }, [value]);\n\n    _defineProperty(this, \"_message\", void 0);\n\n    _defineProperty(this, \"_value\", void 0);\n\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var _NativeModules$Native, _NativeModules$Native2, _NativeModules$Native3;\n\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined'; // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n\n    const runningInExpoShell = ((_NativeModules$Native = NativeModules.NativeUnimoduleProxy) === null || _NativeModules$Native === void 0 ? void 0 : (_NativeModules$Native2 = _NativeModules$Native.modulesConstants) === null || _NativeModules$Native2 === void 0 ? void 0 : (_NativeModules$Native3 = _NativeModules$Native2.ExponentConstants) === null || _NativeModules$Native3 === void 0 ? void 0 : _NativeModules$Native3.executionEnvironment) === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([call([value], ([a]) => console.log(`${message} ${a}`)), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  } // Debugging is disabled in PROD\n\n\n  return value;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}