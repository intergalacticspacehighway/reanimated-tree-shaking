{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.downloadImage=exports.downloadOrUseCachedImage=void 0;var fs_extra_1=__importDefault(require(\"fs-extra\"));// @ts-ignore\nvar jimp_compact_1=__importDefault(require(\"jimp-compact\"));var node_fetch_1=__importDefault(require(\"node-fetch\"));var path_1=__importDefault(require(\"path\"));var stream_1=__importDefault(require(\"stream\"));var tempy_1=__importDefault(require(\"tempy\"));var util_1=__importDefault(require(\"util\"));// cache downloaded images into memory\nvar cacheDownloadedKeys={};function stripQueryParams(url){return url.split('?')[0].split('#')[0];}function downloadOrUseCachedImage(_x){return _downloadOrUseCachedImage.apply(this,arguments);}function _downloadOrUseCachedImage(){_downloadOrUseCachedImage=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(url in cacheDownloadedKeys)){_context.next=2;break;}return _context.abrupt(\"return\",cacheDownloadedKeys[url]);case 2:if(!url.startsWith('http')){_context.next=8;break;}_context.next=5;return downloadImage(url);case 5:cacheDownloadedKeys[url]=_context.sent;_context.next=9;break;case 8:cacheDownloadedKeys[url]=url;case 9:return _context.abrupt(\"return\",cacheDownloadedKeys[url]);case 10:case\"end\":return _context.stop();}}},_callee);}));return _downloadOrUseCachedImage.apply(this,arguments);}exports.downloadOrUseCachedImage=downloadOrUseCachedImage;function downloadImage(_x2){return _downloadImage.apply(this,arguments);}function _downloadImage(){_downloadImage=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url){var outputPath,response,streamPipeline,localPath,img,mime,newPath;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:outputPath=tempy_1[\"default\"].directory();_context2.next=3;return(0,node_fetch_1[\"default\"])(url);case 3:response=_context2.sent;if(response.ok){_context2.next=6;break;}throw new Error(\"It was not possible to download image from '\".concat(url,\"'\"));case 6:// Download to local file\nstreamPipeline=util_1[\"default\"].promisify(stream_1[\"default\"].pipeline);localPath=path_1[\"default\"].join(outputPath,path_1[\"default\"].basename(stripQueryParams(url)));_context2.next=10;return streamPipeline(response.body,fs_extra_1[\"default\"].createWriteStream(localPath));case 10:_context2.next=12;return jimp_compact_1[\"default\"].read(localPath);case 12:img=_context2.sent;mime=img.getMIME().split('/').pop();if(localPath.endsWith(mime)){_context2.next=19;break;}newPath=path_1[\"default\"].join(outputPath,\"image.\".concat(mime));_context2.next=18;return fs_extra_1[\"default\"].move(localPath,newPath);case 18:return _context2.abrupt(\"return\",newPath);case 19:return _context2.abrupt(\"return\",localPath);case 20:case\"end\":return _context2.stop();}}},_callee2);}));return _downloadImage.apply(this,arguments);}exports.downloadImage=downloadImage;","map":{"version":3,"sources":["../src/Download.ts"],"names":[],"mappings":"whBAAA,GAAA,CAAA,UAAA,CAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,CACA;AACA,GAAA,CAAA,cAAA,CAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA,CACA,GAAA,CAAA,YAAA,CAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CACA,GAAA,CAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAEA;AACA,GAAM,CAAA,mBAAmB,CAA2B,EAApD,CAEA,QAAS,CAAA,gBAAT,CAA0B,GAA1B,CAAqC,CACnC,MAAO,CAAA,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAP,CACD,C,QAEqB,CAAA,wB,oLAAf,iBAAwC,GAAxC,uHACD,GAAG,GAAI,CAAA,mBADN,0DAEI,mBAAmB,CAAC,GAAD,CAFvB,aAID,GAAG,CAAC,UAAJ,CAAe,MAAf,CAJC,+CAK8B,CAAA,aAAa,CAAC,GAAD,CAL3C,QAKH,mBAAmB,CAAC,GAAD,CALhB,4CAOH,mBAAmB,CAAC,GAAD,CAAnB,CAA2B,GAA3B,CAPG,uCASE,mBAAmB,CAAC,GAAD,CATrB,yD,2DAAP,OAAA,CAAA,wBAAA,CAAA,wBAAA,C,QAYsB,CAAA,a,oJAAf,kBAA6B,GAA7B,wLACC,UADD,CACc,OAAA,WAAA,CAAU,SAAV,EADd,wBAGkB,CAAA,EAAA,YAAA,WAAA,EAAM,GAAN,CAHlB,QAGC,QAHD,mBAIA,QAAQ,CAAC,EAJT,+BAKG,IAAI,CAAA,KAAJ,uDAAyD,GAAzD,MALH,QAQL;AACM,cATD,CASkB,MAAA,WAAA,CAAK,SAAL,CAAe,QAAA,WAAA,CAAO,QAAtB,CATlB,CAUC,SAVD,CAUa,MAAA,WAAA,CAAK,IAAL,CAAU,UAAV,CAAsB,MAAA,WAAA,CAAK,QAAL,CAAc,gBAAgB,CAAC,GAAD,CAA9B,CAAtB,CAVb,yBAWC,CAAA,cAAc,CAAC,QAAQ,CAAC,IAAV,CAAgB,UAAA,WAAA,CAAG,iBAAH,CAAqB,SAArB,CAAhB,CAXf,iCAca,CAAA,cAAA,WAAA,CAAK,IAAL,CAAU,SAAV,CAdb,SAcC,GAdD,gBAeC,IAfD,CAeQ,GAAG,CAAC,OAAJ,GAAc,KAAd,CAAoB,GAApB,EAAyB,GAAzB,EAfR,IAgBA,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAhBA,2BAiBG,OAjBH,CAiBa,MAAA,WAAA,CAAK,IAAL,CAAU,UAAV,iBAA+B,IAA/B,EAjBb,yBAkBG,CAAA,UAAA,WAAA,CAAG,IAAH,CAAQ,SAAR,CAAmB,OAAnB,CAlBH,0CAmBI,OAnBJ,2CAsBE,SAtBF,2D,gDAAP,OAAA,CAAA,aAAA,CAAA,aAAA","sourcesContent":["import fs from 'fs-extra';\n// @ts-ignore\nimport Jimp from 'jimp-compact';\nimport fetch from 'node-fetch';\nimport path from 'path';\nimport stream from 'stream';\nimport temporary from 'tempy';\nimport util from 'util';\n\n// cache downloaded images into memory\nconst cacheDownloadedKeys: Record<string, string> = {};\n\nfunction stripQueryParams(url: string): string {\n  return url.split('?')[0].split('#')[0];\n}\n\nexport async function downloadOrUseCachedImage(url: string): Promise<string> {\n  if (url in cacheDownloadedKeys) {\n    return cacheDownloadedKeys[url];\n  }\n  if (url.startsWith('http')) {\n    cacheDownloadedKeys[url] = await downloadImage(url);\n  } else {\n    cacheDownloadedKeys[url] = url;\n  }\n  return cacheDownloadedKeys[url];\n}\n\nexport async function downloadImage(url: string): Promise<string> {\n  const outputPath = temporary.directory();\n\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`It was not possible to download image from '${url}'`);\n  }\n\n  // Download to local file\n  const streamPipeline = util.promisify(stream.pipeline);\n  const localPath = path.join(outputPath, path.basename(stripQueryParams(url)));\n  await streamPipeline(response.body, fs.createWriteStream(localPath));\n\n  // If an image URL doesn't have a name, get the mime type and move the file.\n  const img = await Jimp.read(localPath);\n  const mime = img.getMIME().split('/').pop()!;\n  if (!localPath.endsWith(mime)) {\n    const newPath = path.join(outputPath, `image.${mime}`);\n    await fs.move(localPath, newPath);\n    return newPath;\n  }\n\n  return localPath;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}