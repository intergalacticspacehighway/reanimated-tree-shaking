{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getNativeModuleFileExtensions=exports.getModuleFileExtensions=void 0;var paths_1=require(\"@expo/config/paths\");/**\n * Get the platform specific platform extensions in the format that Webpack expects (with a dot prefix).\n *\n * @param platforms supported platforms in order of priority. ex: ios, android, web, native, electron, etc...\n * @category env\n */function getModuleFileExtensions(){for(var _len=arguments.length,platforms=new Array(_len),_key=0;_key<_len;_key++){platforms[_key]=arguments[_key];}// Webpack requires a `.` before each value\nreturn(0,paths_1.getBareExtensions)(platforms).map(function(value){return\".\".concat(value);});}exports.getModuleFileExtensions=getModuleFileExtensions;function getNativeModuleFileExtensions(){for(var _len2=arguments.length,platforms=new Array(_len2),_key2=0;_key2<_len2;_key2++){platforms[_key2]=arguments[_key2];}// Webpack requires a `.` before each value\n// Disable modern when using `react-native`\nreturn(0,paths_1.getBareExtensions)(platforms,{isReact:true,isTS:true,isModern:false}).map(function(value){return\".\".concat(value);});}exports.getNativeModuleFileExtensions=getNativeModuleFileExtensions;","map":{"version":3,"sources":["../../src/env/extensions.ts"],"names":[],"mappings":"mJAAA,GAAA,CAAA,OAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAEA;;;;;AAKG,GACH,QAAgB,CAAA,uBAAhB,EAA8D,+BAAnB,SAAmB,0CAAnB,SAAmB,wBAC5D;AACA,MAAO,CAAA,EAAA,OAAA,CAAA,iBAAA,EAAkB,SAAlB,EAA6B,GAA7B,CAAiC,SAAA,KAAK,mBAAQ,KAAR,GAAtC,CAAP,CACD,CAHD,OAAA,CAAA,uBAAA,CAAA,uBAAA,CAKA,QAAgB,CAAA,6BAAhB,EAAoE,gCAAnB,SAAmB,+CAAnB,SAAmB,0BAClE;AACA;AACA,MAAO,CAAA,EAAA,OAAA,CAAA,iBAAA,EAAkB,SAAlB,CAA6B,CAAE,OAAO,CAAE,IAAX,CAAiB,IAAI,CAAE,IAAvB,CAA6B,QAAQ,CAAE,KAAvC,CAA7B,EAA6E,GAA7E,CACL,SAAA,KAAK,mBAAQ,KAAR,GADA,CAAP,CAGD,CAND,OAAA,CAAA,6BAAA,CAAA,6BAAA","sourcesContent":["import { getBareExtensions } from '@expo/config/paths';\n\n/**\n * Get the platform specific platform extensions in the format that Webpack expects (with a dot prefix).\n *\n * @param platforms supported platforms in order of priority. ex: ios, android, web, native, electron, etc...\n * @category env\n */\nexport function getModuleFileExtensions(...platforms: string[]): string[] {\n  // Webpack requires a `.` before each value\n  return getBareExtensions(platforms).map(value => `.${value}`);\n}\n\nexport function getNativeModuleFileExtensions(...platforms: string[]): string[] {\n  // Webpack requires a `.` before each value\n  // Disable modern when using `react-native`\n  return getBareExtensions(platforms, { isReact: true, isTS: true, isModern: false }).map(\n    value => `.${value}`\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}