{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getRequiresFullScreen=getRequiresFullScreen;exports.setRequiresFullScreen=setRequiresFullScreen;exports.withRequiresFullScreen=void 0;function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _versions(){var data=require(\"../utils/versions\");_versions=function _versions(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}var withRequiresFullScreen=(0,_iosPlugins().createInfoPlistPlugin)(setRequiresFullScreen,'withRequiresFullScreen');// NOTES: This is defaulted to `true` for now to match the behavior prior to SDK\n// 34, but will change to `false` in SDK +43.\nexports.withRequiresFullScreen=withRequiresFullScreen;function getRequiresFullScreen(config){var _config$ios;// Yes, the property is called ios.requireFullScreen, without the s - not \"requires\"\n// This is confusing indeed because the actual property name does have the s\nif((_config$ios=config.ios)!==null&&_config$ios!==void 0&&_config$ios.hasOwnProperty('requireFullScreen')){return!!config.ios.requireFullScreen;}else{// In SDK 43, the `requireFullScreen` default has been changed to false.\nif((0,_versions().gteSdkVersion)(config,'43.0.0')// TODO: Uncomment after SDK 43 is released.\n// || !config.sdkVersion\n){return false;}return true;}}var iPadInterfaceKey='UISupportedInterfaceOrientations~ipad';var requiredIPadInterface=['UIInterfaceOrientationPortrait','UIInterfaceOrientationPortraitUpsideDown','UIInterfaceOrientationLandscapeLeft','UIInterfaceOrientationLandscapeRight'];function isStringArray(value){return Array.isArray(value)&&value.every(function(value){return typeof value==='string';});}function hasMinimumOrientations(masks){return requiredIPadInterface.every(function(mask){return masks.includes(mask);});}/**\n * Require full screen being disabled requires all ipad interfaces to to be added,\n * otherwise submissions to the iOS App Store will fail.\n *\n * ERROR ITMS-90474: \"Invalid Bundle. iPad Multitasking support requires these orientations: 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight'. Found 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown' in bundle 'com.bacon.app'.\"\n *\n * @param interfaceOrientations\n * @returns\n */function resolveExistingIpadInterfaceOrientations(interfaceOrientations){if(// Ensure type.\nisStringArray(interfaceOrientations)&&// Don't warn if it's an empty array, this is invalid regardless.\ninterfaceOrientations.length&&// Check if the minimum requirements are met.\n!hasMinimumOrientations(interfaceOrientations)){var existingList=interfaceOrientations.join(', ');(0,_warnings().addWarningIOS)('ios.requireFullScreen',\"iPad multitasking requires all `\".concat(iPadInterfaceKey,\"` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: \").concat(existingList));return interfaceOrientations;}return[];}// Whether requires full screen on iPad\nfunction setRequiresFullScreen(config,infoPlist){var requiresFullScreen=getRequiresFullScreen(config);if(!requiresFullScreen){var existing=resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);// There currently exists no mechanism to safely undo this feature besides `expo prebuild --clear`,\n// this seems ok though because anyone using `UISupportedInterfaceOrientations~ipad` probably\n// wants them to be defined to this value anyways. This is also the default value used in the Xcode iOS template.\n// Merge any previous interfaces with the required interfaces.\ninfoPlist[iPadInterfaceKey]=_toConsumableArray(new Set(existing.concat(requiredIPadInterface)));}return _objectSpread(_objectSpread({},infoPlist),{},{UIRequiresFullScreen:requiresFullScreen});}","map":{"version":3,"sources":["../../src/ios/RequiresFullScreen.ts"],"names":["withRequiresFullScreen","config","iPadInterfaceKey","requiredIPadInterface","Array","value","mask","masks","isStringArray","interfaceOrientations","hasMinimumOrientations","existingList","requiresFullScreen","getRequiresFullScreen","existing","resolveExistingIpadInterfaceOrientations","infoPlist","UIRequiresFullScreen"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { gteSdkVersion } from '../utils/versions';\nimport { addWarningIOS } from '../utils/warnings';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withRequiresFullScreen = createInfoPlistPlugin(\n  setRequiresFullScreen,\n  'withRequiresFullScreen'\n);\n\n// NOTES: This is defaulted to `true` for now to match the behavior prior to SDK\n// 34, but will change to `false` in SDK +43.\nexport function getRequiresFullScreen(config: Pick<ExpoConfig, 'ios' | 'sdkVersion'>) {\n  // Yes, the property is called ios.requireFullScreen, without the s - not \"requires\"\n  // This is confusing indeed because the actual property name does have the s\n  if (config.ios?.hasOwnProperty('requireFullScreen')) {\n    return !!config.ios.requireFullScreen;\n  } else {\n    // In SDK 43, the `requireFullScreen` default has been changed to false.\n    if (\n      gteSdkVersion(config, '43.0.0')\n      // TODO: Uncomment after SDK 43 is released.\n      // || !config.sdkVersion\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n\nconst iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\n\nconst requiredIPadInterface = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction isStringArray(value: any): value is string[] {\n  return Array.isArray(value) && value.every(value => typeof value === 'string');\n}\n\nfunction hasMinimumOrientations(masks: string[]): boolean {\n  return requiredIPadInterface.every(mask => masks.includes(mask));\n}\n\n/**\n * Require full screen being disabled requires all ipad interfaces to to be added,\n * otherwise submissions to the iOS App Store will fail.\n *\n * ERROR ITMS-90474: \"Invalid Bundle. iPad Multitasking support requires these orientations: 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight'. Found 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown' in bundle 'com.bacon.app'.\"\n *\n * @param interfaceOrientations\n * @returns\n */\nfunction resolveExistingIpadInterfaceOrientations(interfaceOrientations: any): string[] {\n  if (\n    // Ensure type.\n    isStringArray(interfaceOrientations) &&\n    // Don't warn if it's an empty array, this is invalid regardless.\n    interfaceOrientations.length &&\n    // Check if the minimum requirements are met.\n    !hasMinimumOrientations(interfaceOrientations)\n  ) {\n    const existingList = interfaceOrientations!.join(', ');\n    addWarningIOS(\n      'ios.requireFullScreen',\n      `iPad multitasking requires all \\`${iPadInterfaceKey}\\` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: ${existingList}`\n    );\n    return interfaceOrientations;\n  }\n  return [];\n}\n\n// Whether requires full screen on iPad\nexport function setRequiresFullScreen(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const requiresFullScreen = getRequiresFullScreen(config);\n  if (!requiresFullScreen) {\n    const existing = resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);\n\n    // There currently exists no mechanism to safely undo this feature besides `expo prebuild --clear`,\n    // this seems ok though because anyone using `UISupportedInterfaceOrientations~ipad` probably\n    // wants them to be defined to this value anyways. This is also the default value used in the Xcode iOS template.\n\n    // Merge any previous interfaces with the required interfaces.\n    infoPlist[iPadInterfaceKey] = [...new Set(existing.concat(requiredIPadInterface))];\n  }\n\n  return {\n    ...infoPlist,\n    UIRequiresFullScreen: requiresFullScreen,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}