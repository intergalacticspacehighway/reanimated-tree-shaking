{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.createEntitlementsPlugin=createEntitlementsPlugin;exports.createInfoPlistPlugin=createInfoPlistPlugin;exports.withXcodeProject=exports.withPodfileProperties=exports.withInfoPlist=exports.withExpoPlist=exports.withEntitlementsPlist=exports.withAppDelegate=void 0;function _withMod(){var data=require(\"./withMod\");_withMod=function _withMod(){return data;};return data;}/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */function createInfoPlistPlugin(action,name){var withUnknown=function withUnknown(config){return withInfoPlist(config,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return action(config,config.modResults);case 2:config.modResults=_context.sent;return _context.abrupt(\"return\",config);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};if(name){Object.defineProperty(withUnknown,'name',{value:name});}return withUnknown;}/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */function createEntitlementsPlugin(action,name){var withUnknown=function withUnknown(config){return withEntitlementsPlist(config,/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return action(config,config.modResults);case 2:config.modResults=_context2.sent;return _context2.abrupt(\"return\",config);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());};if(name){Object.defineProperty(withUnknown,'name',{value:name});}return withUnknown;}/**\n * Provides the AppDelegate file for modification.\n *\n * @param config\n * @param action\n */var withAppDelegate=function withAppDelegate(config,action){return(0,_withMod().withMod)(config,{platform:'ios',mod:'appDelegate',action:action});};/**\n * Provides the Info.plist file for modification.\n * Keeps the config's expo.ios.infoPlist object in sync with the data.\n *\n * @param config\n * @param action\n */exports.withAppDelegate=withAppDelegate;var withInfoPlist=function withInfoPlist(config,_action){return(0,_withMod().withMod)(config,{platform:'ios',mod:'infoPlist',action:function action(config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _action(config);case 2:config=_context3.sent;if(!config.ios){config.ios={};}config.ios.infoPlist=config.modResults;return _context3.abrupt(\"return\",config);case 6:case\"end\":return _context3.stop();}}},_callee3);}))();}});};/**\n * Provides the main .entitlements file for modification.\n * Keeps the config's expo.ios.entitlements object in sync with the data.\n *\n * @param config\n * @param action\n */exports.withInfoPlist=withInfoPlist;var withEntitlementsPlist=function withEntitlementsPlist(config,_action2){return(0,_withMod().withMod)(config,{platform:'ios',mod:'entitlements',action:function action(config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return _action2(config);case 2:config=_context4.sent;if(!config.ios){config.ios={};}config.ios.entitlements=config.modResults;return _context4.abrupt(\"return\",config);case 6:case\"end\":return _context4.stop();}}},_callee4);}))();}});};/**\n * Provides the Expo.plist for modification.\n *\n * @param config\n * @param action\n */exports.withEntitlementsPlist=withEntitlementsPlist;var withExpoPlist=function withExpoPlist(config,action){return(0,_withMod().withMod)(config,{platform:'ios',mod:'expoPlist',action:action});};/**\n * Provides the main .xcodeproj for modification.\n *\n * @param config\n * @param action\n */exports.withExpoPlist=withExpoPlist;var withXcodeProject=function withXcodeProject(config,action){return(0,_withMod().withMod)(config,{platform:'ios',mod:'xcodeproj',action:action});};/**\n * Provides the Podfile.properties.json for modification.\n *\n * @param config\n * @param action\n */exports.withXcodeProject=withXcodeProject;var withPodfileProperties=function withPodfileProperties(config,action){return(0,_withMod().withMod)(config,{platform:'ios',mod:'podfileProperties',action:action});};exports.withPodfileProperties=withPodfileProperties;","map":{"version":3,"sources":["../../src/plugins/ios-plugins.ts"],"names":["withUnknown","config","withInfoPlist","action","Object","value","name","withEntitlementsPlist","withAppDelegate","platform","mod","withExpoPlist","withXcodeProject","withPodfileProperties"],"mappings":"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","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport type { JSONObject } from '@expo/json-file';\nimport type { XcodeProject } from 'xcode';\n\nimport type { ConfigPlugin, Mod } from '../Plugin.types';\nimport type { ExpoPlist, InfoPlist } from '../ios/IosConfig.types';\nimport type { AppDelegateProjectFile } from '../ios/Paths';\nimport { withMod } from './withMod';\n\ntype MutateInfoPlistAction = (\n  expo: ExpoConfig,\n  infoPlist: InfoPlist\n) => Promise<InfoPlist> | InfoPlist;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createInfoPlistPlugin(action: MutateInfoPlistAction, name?: string): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withInfoPlist(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\ntype MutateEntitlementsPlistAction = (expo: ExpoConfig, entitlements: JSONObject) => JSONObject;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createEntitlementsPlugin(\n  action: MutateEntitlementsPlistAction,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withEntitlementsPlist(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AppDelegate file for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppDelegate: ConfigPlugin<Mod<AppDelegateProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action,\n  });\n};\n\n/**\n * Provides the Info.plist file for modification.\n * Keeps the config's expo.ios.infoPlist object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withInfoPlist: ConfigPlugin<Mod<InfoPlist>> = (config, action) => {\n  return withMod<InfoPlist>(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the main .entitlements file for modification.\n * Keeps the config's expo.ios.entitlements object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withEntitlementsPlist: ConfigPlugin<Mod<JSONObject>> = (config, action) => {\n  return withMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the Expo.plist for modification.\n *\n * @param config\n * @param action\n */\nexport const withExpoPlist: ConfigPlugin<Mod<ExpoPlist>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action,\n  });\n};\n\n/**\n * Provides the main .xcodeproj for modification.\n *\n * @param config\n * @param action\n */\nexport const withXcodeProject: ConfigPlugin<Mod<XcodeProject>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action,\n  });\n};\n\n/**\n * Provides the Podfile.properties.json for modification.\n *\n * @param config\n * @param action\n */\nexport const withPodfileProperties: ConfigPlugin<Mod<Record<string, string>>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'podfileProperties',\n    action,\n  });\n};\n"]},"metadata":{},"sourceType":"script"}