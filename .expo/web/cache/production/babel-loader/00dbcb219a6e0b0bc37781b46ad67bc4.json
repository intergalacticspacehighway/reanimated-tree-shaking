{"ast":null,"code":"import{useEffect,useRef}from'react';import{makeMutable}from'../core';import NativeReanimated from'../NativeReanimated';export var SensorType;(function(SensorType){SensorType[SensorType[\"ACCELEROMETER\"]=1]=\"ACCELEROMETER\";SensorType[SensorType[\"GYROSCOPE\"]=2]=\"GYROSCOPE\";SensorType[SensorType[\"GRAVITY\"]=3]=\"GRAVITY\";SensorType[SensorType[\"MAGNETIC_FIELD\"]=4]=\"MAGNETIC_FIELD\";SensorType[SensorType[\"ROTATION\"]=5]=\"ROTATION\";})(SensorType||(SensorType={}));export function useAnimatedSensor(sensorType,userConfig){var ref=useRef({sensor:null,unregister:function unregister(){// NOOP\n},isAvailable:false,config:{interval:0}});if(ref.current.sensor===null){ref.current.config=Object.assign({interval:10},userConfig);var sensorData;if(sensorType===SensorType.ROTATION){sensorData={qw:0,qx:0,qy:0,qz:0,yaw:0,pitch:0,roll:0};}else{sensorData={x:0,y:0,z:0};}ref.current.sensor=makeMutable(sensorData);}useEffect(function(){ref.current.config=Object.assign({interval:10},userConfig);var id=NativeReanimated.registerSensor(sensorType,ref.current.config.interval,ref.current.sensor);if(id!==-1){// if sensor is available\nref.current.unregister=function(){return NativeReanimated.unregisterSensor(id);};ref.current.isAvailable=true;}else{// if sensor is unavailable\nref.current.unregister=function(){// NOOP\n};ref.current.isAvailable=false;}return function(){ref.current.unregister();};},[sensorType,userConfig]);return ref.current;}","map":{"version":3,"names":["useEffect","useRef","makeMutable","NativeReanimated","SensorType","useAnimatedSensor","sensorType","userConfig","ref","sensor","unregister","isAvailable","config","interval","current","Object","assign","sensorData","ROTATION","qw","qx","qy","qz","yaw","pitch","roll","x","y","z","id","registerSensor","unregisterSensor"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedSensor.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { makeMutable } from '../core';\nimport NativeReanimated from '../NativeReanimated';\nexport var SensorType;\n\n(function (SensorType) {\n  SensorType[SensorType[\"ACCELEROMETER\"] = 1] = \"ACCELEROMETER\";\n  SensorType[SensorType[\"GYROSCOPE\"] = 2] = \"GYROSCOPE\";\n  SensorType[SensorType[\"GRAVITY\"] = 3] = \"GRAVITY\";\n  SensorType[SensorType[\"MAGNETIC_FIELD\"] = 4] = \"MAGNETIC_FIELD\";\n  SensorType[SensorType[\"ROTATION\"] = 5] = \"ROTATION\";\n})(SensorType || (SensorType = {}));\n\nexport function useAnimatedSensor(sensorType, userConfig) {\n  const ref = useRef({\n    sensor: null,\n    unregister: () => {// NOOP\n    },\n    isAvailable: false,\n    config: {\n      interval: 0\n    }\n  });\n\n  if (ref.current.sensor === null) {\n    ref.current.config = Object.assign({\n      interval: 10\n    }, userConfig);\n    let sensorData;\n\n    if (sensorType === SensorType.ROTATION) {\n      sensorData = {\n        qw: 0,\n        qx: 0,\n        qy: 0,\n        qz: 0,\n        yaw: 0,\n        pitch: 0,\n        roll: 0\n      };\n    } else {\n      sensorData = {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    }\n\n    ref.current.sensor = makeMutable(sensorData);\n  }\n\n  useEffect(() => {\n    ref.current.config = Object.assign({\n      interval: 10\n    }, userConfig);\n    const id = NativeReanimated.registerSensor(sensorType, ref.current.config.interval, ref.current.sensor);\n\n    if (id !== -1) {\n      // if sensor is available\n      ref.current.unregister = () => NativeReanimated.unregisterSensor(id);\n\n      ref.current.isAvailable = true;\n    } else {\n      // if sensor is unavailable\n      ref.current.unregister = () => {// NOOP\n      };\n\n      ref.current.isAvailable = false;\n    }\n\n    return () => {\n      ref.current.unregister();\n    };\n  }, [sensorType, userConfig]);\n  return ref.current;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}