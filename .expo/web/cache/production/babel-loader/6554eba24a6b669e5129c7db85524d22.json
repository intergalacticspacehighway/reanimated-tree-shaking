{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _objectWithoutProperties=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");var _excluded=[\"ITSAppUsesNonExemptEncryption\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getUsesNonExemptEncryption=getUsesNonExemptEncryption;exports.setUsesNonExemptEncryption=setUsesNonExemptEncryption;exports.withUsesNonExemptEncryption=void 0;function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}var withUsesNonExemptEncryption=(0,_iosPlugins().createInfoPlistPlugin)(setUsesNonExemptEncryption,'withUsesNonExemptEncryption');exports.withUsesNonExemptEncryption=withUsesNonExemptEncryption;function getUsesNonExemptEncryption(config){var _config$ios$config$us,_config$ios,_config$ios$config;return(_config$ios$config$us=config===null||config===void 0?void 0:(_config$ios=config.ios)===null||_config$ios===void 0?void 0:(_config$ios$config=_config$ios.config)===null||_config$ios$config===void 0?void 0:_config$ios$config.usesNonExemptEncryption)!==null&&_config$ios$config$us!==void 0?_config$ios$config$us:null;}function setUsesNonExemptEncryption(config,_ref){var ITSAppUsesNonExemptEncryption=_ref.ITSAppUsesNonExemptEncryption,infoPlist=_objectWithoutProperties(_ref,_excluded);var usesNonExemptEncryption=getUsesNonExemptEncryption(config);// Make no changes if the key is left blank\nif(usesNonExemptEncryption===null){return infoPlist;}return _objectSpread(_objectSpread({},infoPlist),{},{ITSAppUsesNonExemptEncryption:usesNonExemptEncryption});}","map":{"version":3,"sources":["../../src/ios/UsesNonExemptEncryption.ts"],"names":["withUsesNonExemptEncryption","config","infoPlist","usesNonExemptEncryption","getUsesNonExemptEncryption","ITSAppUsesNonExemptEncryption"],"mappings":"41CAEA,QAAA,CAAA,WAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAGO,GAAMA,CAAAA,2BAA2B,CAAG,CAAA,EAAA,WAAA,GAAA,qBAAA,EAAA,0BAAA,CAApC,6BAAoC,CAApC,C,gEAKA,QAAA,CAAA,0BAAA,CAAA,MAAA,CAAqE,CAAA,GAAA,CAAA,qBAAA,CAAA,WAAA,CAAA,kBAAA,CAC1E,MAAA,CAAA,qBAAA,CAAOC,MAAP,GAAA,IAAOA,EAAAA,MAAP,GAAA,IAAA,EAAOA,CAAP,IAAA,EAAOA,CAAP,CAAA,WAAA,CAAOA,MAAM,CAAb,GAAA,IAAA,IAAA,EAAA,WAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA,kBAAA,CAAOA,WAAAA,CAAP,MAAA,IAAA,IAAA,EAAA,kBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAOA,kBAAAA,CAAP,uBAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,IAAA,CACD,CAEM,QAAA,CAAA,0BAAA,CAAA,MAAA,MAGM,IADX,CAAA,6BACW,MADX,6BACW,CADyBC,SACzB,0CACX,GAAMC,CAAAA,uBAAuB,CAAGC,0BAA0B,CAD/C,MAC+C,CAA1D,CAEA;AACA,GAAID,uBAAuB,GAA3B,IAAA,CAAsC,CACpC,MAAA,CAAA,SAAA,CACD,CAED,sCAAO,SAAP,MAEEE,6BAA6B,CAAEF,uBAFjC,GAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withUsesNonExemptEncryption = createInfoPlistPlugin(\n  setUsesNonExemptEncryption,\n  'withUsesNonExemptEncryption'\n);\n\nexport function getUsesNonExemptEncryption(config: Pick<ExpoConfig, 'ios'>) {\n  return config?.ios?.config?.usesNonExemptEncryption ?? null;\n}\n\nexport function setUsesNonExemptEncryption(\n  config: Pick<ExpoConfig, 'ios'>,\n  { ITSAppUsesNonExemptEncryption, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const usesNonExemptEncryption = getUsesNonExemptEncryption(config);\n\n  // Make no changes if the key is left blank\n  if (usesNonExemptEncryption === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    ITSAppUsesNonExemptEncryption: usesNonExemptEncryption,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}