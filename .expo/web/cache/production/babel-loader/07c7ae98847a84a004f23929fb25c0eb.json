{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _objectWithoutProperties=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");var _excluded=[\"GMSApiKey\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.MATCH_INIT=void 0;exports.addGoogleMapsAppDelegateImport=addGoogleMapsAppDelegateImport;exports.addGoogleMapsAppDelegateInit=addGoogleMapsAppDelegateInit;exports.addMapsCocoaPods=addMapsCocoaPods;exports.getGoogleMapsApiKey=getGoogleMapsApiKey;exports.removeGoogleMapsAppDelegateImport=removeGoogleMapsAppDelegateImport;exports.removeGoogleMapsAppDelegateInit=removeGoogleMapsAppDelegateInit;exports.removeMapsCocoaPods=removeMapsCocoaPods;exports.setGoogleMapsApiKey=setGoogleMapsApiKey;exports.withMaps=void 0;function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _resolveFrom(){var data=_interopRequireDefault(require(\"resolve-from\"));_resolveFrom=function _resolveFrom(){return data;};return data;}function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _withDangerousMod(){var data=require(\"../plugins/withDangerousMod\");_withDangerousMod=function _withDangerousMod(){return data;};return data;}function _generateCode(){var data=require(\"../utils/generateCode\");_generateCode=function _generateCode(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var debug=require('debug')('expo:config-plugins:ios:maps');// Match against `UMModuleRegistryAdapter` (unimodules), and React Native without unimodules (Expo Modules), and SDK +44 React AppDelegate subscriber.\nvar MATCH_INIT=/(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])|(\\[self\\.reactDelegate createBridgeWithDelegate:self launchOptions:launchOptions\\])/g;exports.MATCH_INIT=MATCH_INIT;var withGoogleMapsKey=(0,_iosPlugins().createInfoPlistPlugin)(setGoogleMapsApiKey,'withGoogleMapsKey');var withMaps=function withMaps(config){config=withGoogleMapsKey(config);var apiKey=getGoogleMapsApiKey(config);// Technically adds react-native-maps (Apple maps) and google maps.\ndebug('Google Maps API Key:',apiKey);config=withMapsCocoaPods(config,{useGoogleMaps:!!apiKey});// Adds/Removes AppDelegate setup for Google Maps API on iOS\nconfig=withGoogleMapsAppDelegate(config,{apiKey:apiKey});return config;};exports.withMaps=withMaps;function getGoogleMapsApiKey(config){var _config$ios$config$go,_config$ios,_config$ios$config;return(_config$ios$config$go=(_config$ios=config.ios)===null||_config$ios===void 0?void 0:(_config$ios$config=_config$ios.config)===null||_config$ios$config===void 0?void 0:_config$ios$config.googleMapsApiKey)!==null&&_config$ios$config$go!==void 0?_config$ios$config$go:null;}function setGoogleMapsApiKey(config,_ref){var GMSApiKey=_ref.GMSApiKey,infoPlist=_objectWithoutProperties(_ref,_excluded);var apiKey=getGoogleMapsApiKey(config);if(apiKey===null){return infoPlist;}return _objectSpread(_objectSpread({},infoPlist),{},{GMSApiKey:apiKey});}function addGoogleMapsAppDelegateImport(src){var newSrc=[];newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)','#import <GoogleMaps/GoogleMaps.h>','#endif');return(0,_generateCode().mergeContents)({tag:'react-native-maps-import',src:src,newSrc:newSrc.join('\\n'),anchor:/#import \"AppDelegate\\.h\"/,offset:1,comment:'//'});}function removeGoogleMapsAppDelegateImport(src){return(0,_generateCode().removeContents)({tag:'react-native-maps-import',src:src});}function addGoogleMapsAppDelegateInit(src,apiKey){var newSrc=[];newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)',\"  [GMSServices provideAPIKey:@\\\"\".concat(apiKey,\"\\\"];\"),'#endif');return(0,_generateCode().mergeContents)({tag:'react-native-maps-init',src:src,newSrc:newSrc.join('\\n'),anchor:MATCH_INIT,offset:0,comment:'//'});}function removeGoogleMapsAppDelegateInit(src){return(0,_generateCode().removeContents)({tag:'react-native-maps-init',src:src});}/**\n * @param src The contents of the Podfile.\n * @returns Podfile with Google Maps added.\n */function addMapsCocoaPods(src){return(0,_generateCode().mergeContents)({tag:'react-native-maps',src:src,newSrc:\"  pod 'react-native-google-maps', path: File.dirname(`node --print \\\"require.resolve('react-native-maps/package.json')\\\"`)\",anchor:/use_native_modules/,offset:0,comment:'#'});}function removeMapsCocoaPods(src){return(0,_generateCode().removeContents)({tag:'react-native-maps',src:src});}function isReactNativeMapsInstalled(projectRoot){var resolved=_resolveFrom()[\"default\"].silent(projectRoot,'react-native-maps/package.json');return resolved?_path()[\"default\"].dirname(resolved):null;}function isReactNativeMapsAutolinked(config){// Only add the native code changes if we know that the package is going to be linked natively.\n// This is specifically for monorepo support where one app might have react-native-maps (adding it to the node_modules)\n// but another app will not have it installed in the package.json, causing it to not be linked natively.\n// This workaround only exists because react-native-maps doesn't have a config plugin vendored in the package.\n// TODO: `react-native-maps` doesn't use Expo autolinking so we cannot safely disable the module.\nreturn true;// return (\n//   !config._internal?.autolinkedModules ||\n//   config._internal.autolinkedModules.includes('react-native-maps')\n// );\n}var withMapsCocoaPods=function withMapsCocoaPods(config,_ref2){var useGoogleMaps=_ref2.useGoogleMaps;return(0,_withDangerousMod().withDangerousMod)(config,['ios',/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){var filePath,contents,results,googleMapsPath,isLinked;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:filePath=_path()[\"default\"].join(config.modRequest.platformProjectRoot,'Podfile');_context.next=3;return _fs()[\"default\"].promises.readFile(filePath,'utf-8');case 3:contents=_context.sent;// Only add the block if react-native-maps is installed in the project (best effort).\n// Generally prebuild runs after a yarn install so this should always work as expected.\ngoogleMapsPath=isReactNativeMapsInstalled(config.modRequest.projectRoot);isLinked=isReactNativeMapsAutolinked(config);debug('Is Expo Autolinked:',isLinked);debug('react-native-maps path:',googleMapsPath);if(!(isLinked&&googleMapsPath&&useGoogleMaps)){_context.next=20;break;}_context.prev=9;results=addMapsCocoaPods(contents);_context.next=18;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](9);if(!(_context.t0.code==='ERR_NO_MATCH')){_context.next=17;break;}throw new Error(\"Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.\");case 17:throw _context.t0;case 18:_context.next=21;break;case 20:// If the package is no longer installed, then remove the block.\nresults=removeMapsCocoaPods(contents);case 21:if(!(results.didMerge||results.didClear)){_context.next=24;break;}_context.next=24;return _fs()[\"default\"].promises.writeFile(filePath,results.contents);case 24:return _context.abrupt(\"return\",config);case 25:case\"end\":return _context.stop();}}},_callee,null,[[9,13]]);}));return function(_x){return _ref3.apply(this,arguments);};}()]);};var withGoogleMapsAppDelegate=function withGoogleMapsAppDelegate(config,_ref4){var apiKey=_ref4.apiKey;return(0,_iosPlugins().withAppDelegate)(config,function(config){if(['objc','objcpp'].includes(config.modResults.language)){if(apiKey&&isReactNativeMapsAutolinked(config)&&isReactNativeMapsInstalled(config.modRequest.projectRoot)){try{config.modResults.contents=addGoogleMapsAppDelegateImport(config.modResults.contents).contents;config.modResults.contents=addGoogleMapsAppDelegateInit(config.modResults.contents,apiKey).contents;}catch(error){if(error.code==='ERR_NO_MATCH'){throw new Error(\"Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.\");}throw error;}}else{config.modResults.contents=removeGoogleMapsAppDelegateImport(config.modResults.contents).contents;config.modResults.contents=removeGoogleMapsAppDelegateInit(config.modResults.contents).contents;}}else{throw new Error(\"Cannot setup Google Maps because the project AppDelegate is not a supported language: \".concat(config.modResults.language));}return config;});};","map":{"version":3,"sources":["../../src/ios/Maps.ts"],"names":["debug","require","MATCH_INIT","withGoogleMapsKey","withMaps","config","apiKey","getGoogleMapsApiKey","withMapsCocoaPods","useGoogleMaps","withGoogleMapsAppDelegate","infoPlist","GMSApiKey","newSrc","tag","src","anchor","offset","comment","resolved","resolveFrom","path","filePath","contents","fs","googleMapsPath","isReactNativeMapsInstalled","isLinked","isReactNativeMapsAutolinked","results","addMapsCocoaPods","error","removeMapsCocoaPods","addGoogleMapsAppDelegateImport","addGoogleMapsAppDelegateInit","removeGoogleMapsAppDelegateImport","removeGoogleMapsAppDelegateInit"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin, InfoPlist } from '../Plugin.types';\nimport { createInfoPlistPlugin, withAppDelegate } from '../plugins/ios-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { mergeContents, MergeResults, removeContents } from '../utils/generateCode';\n\nconst debug = require('debug')('expo:config-plugins:ios:maps') as typeof console.log;\n\n// Match against `UMModuleRegistryAdapter` (unimodules), and React Native without unimodules (Expo Modules), and SDK +44 React AppDelegate subscriber.\nexport const MATCH_INIT = /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])|(\\[self\\.reactDelegate createBridgeWithDelegate:self launchOptions:launchOptions\\])/g;\n\nconst withGoogleMapsKey = createInfoPlistPlugin(setGoogleMapsApiKey, 'withGoogleMapsKey');\n\nexport const withMaps: ConfigPlugin = config => {\n  config = withGoogleMapsKey(config);\n\n  const apiKey = getGoogleMapsApiKey(config);\n  // Technically adds react-native-maps (Apple maps) and google maps.\n\n  debug('Google Maps API Key:', apiKey);\n  config = withMapsCocoaPods(config, { useGoogleMaps: !!apiKey });\n\n  // Adds/Removes AppDelegate setup for Google Maps API on iOS\n  config = withGoogleMapsAppDelegate(config, { apiKey });\n\n  return config;\n};\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMapsApiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function addGoogleMapsAppDelegateImport(src: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    '#import <GoogleMaps/GoogleMaps.h>',\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateImport(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-import',\n    src,\n  });\n}\n\nexport function addGoogleMapsAppDelegateInit(src: string, apiKey: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    `  [GMSServices provideAPIKey:@\"${apiKey}\"];`,\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-init',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateInit(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-init',\n    src,\n  });\n}\n\n/**\n * @param src The contents of the Podfile.\n * @returns Podfile with Google Maps added.\n */\nexport function addMapsCocoaPods(src: string): MergeResults {\n  return mergeContents({\n    tag: 'react-native-maps',\n    src,\n    newSrc: `  pod 'react-native-google-maps', path: File.dirname(\\`node --print \"require.resolve('react-native-maps/package.json')\"\\`)`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#',\n  });\n}\n\nexport function removeMapsCocoaPods(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps',\n    src,\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot: string): string | null {\n  const resolved = resolveFrom.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? path.dirname(resolved) : null;\n}\n\nfunction isReactNativeMapsAutolinked(config: Pick<ExpoConfig, '_internal'>): boolean {\n  // Only add the native code changes if we know that the package is going to be linked natively.\n  // This is specifically for monorepo support where one app might have react-native-maps (adding it to the node_modules)\n  // but another app will not have it installed in the package.json, causing it to not be linked natively.\n  // This workaround only exists because react-native-maps doesn't have a config plugin vendored in the package.\n\n  // TODO: `react-native-maps` doesn't use Expo autolinking so we cannot safely disable the module.\n  return true;\n\n  // return (\n  //   !config._internal?.autolinkedModules ||\n  //   config._internal.autolinkedModules.includes('react-native-maps')\n  // );\n}\n\nconst withMapsCocoaPods: ConfigPlugin<{ useGoogleMaps: boolean }> = (config, { useGoogleMaps }) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const filePath = path.join(config.modRequest.platformProjectRoot, 'Podfile');\n      const contents = await fs.promises.readFile(filePath, 'utf-8');\n      let results: MergeResults;\n      // Only add the block if react-native-maps is installed in the project (best effort).\n      // Generally prebuild runs after a yarn install so this should always work as expected.\n      const googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      const isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(contents);\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        // If the package is no longer installed, then remove the block.\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        await fs.promises.writeFile(filePath, results.contents);\n      }\n      return config;\n    },\n  ]);\n};\n\nconst withGoogleMapsAppDelegate: ConfigPlugin<{ apiKey: string | null }> = (config, { apiKey }) => {\n  return withAppDelegate(config, config => {\n    if (['objc', 'objcpp'].includes(config.modResults.language)) {\n      if (\n        apiKey &&\n        isReactNativeMapsAutolinked(config) &&\n        isReactNativeMapsInstalled(config.modRequest.projectRoot)\n      ) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(\n            config.modResults.contents\n          ).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(\n            config.modResults.contents,\n            apiKey\n          ).contents;\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(\n          config.modResults.contents\n        ).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(\n          config.modResults.contents\n        ).contents;\n      }\n    } else {\n      throw new Error(\n        `Cannot setup Google Maps because the project AppDelegate is not a supported language: ${config.modResults.language}`\n      );\n    }\n    return config;\n  });\n};\n"]},"metadata":{},"sourceType":"script"}