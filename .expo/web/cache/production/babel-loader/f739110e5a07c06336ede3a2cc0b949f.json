{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.withPlugins=void 0;function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _withStaticPlugin(){var data=require(\"./withStaticPlugin\");_withStaticPlugin=function _withStaticPlugin(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}/**\n * Resolves a list of plugins.\n *\n * @param config exported config\n * @param plugins list of config config plugins to apply to the exported config\n */var withPlugins=function withPlugins(config,plugins){(0,_assert()[\"default\"])(Array.isArray(plugins),'withPlugins expected a valid array of plugins or plugin module paths');return plugins.reduce(function(prev,plugin){return(0,_withStaticPlugin().withStaticPlugin)(prev,{plugin:plugin});},config);};exports.withPlugins=withPlugins;","map":{"version":3,"sources":["../../src/plugins/withPlugins.ts"],"names":["withPlugins","Array","plugin"],"mappings":"iGAAA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAGA,QAAA,CAAA,iBAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA,iBAAA,CAAA,4BAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,qFAEA;AACA;AACA;AACA;AACA;AACA,GACO,GAAMA,CAAAA,WAAmE,CAAG,QAAtEA,CAAAA,WAAsE,CAAA,MAAA,CAAA,OAAA,CAG9E,CACH,CAAA,EAAA,OAAA,aAAA,EACEC,KAAK,CAALA,OAAAA,CADF,OACEA,CADF,CAAA,sEAAA,EAIA,MAAO,CAAA,OAAO,CAAP,MAAA,CAAe,SAAA,IAAA,CAAA,MAAA,QAAkB,CAAA,EAAA,iBAAA,GAAA,gBAAA,EAAA,IAAA,CAAuB,CAAEC,MAAAA,CAAAA,MAAF,CAAvB,CAAlB,EAAf,CAAP,MAAO,CAAP,CARK,CAAA,C","sourcesContent":["import assert from 'assert';\n\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport { withStaticPlugin } from './withStaticPlugin';\n\n/**\n * Resolves a list of plugins.\n *\n * @param config exported config\n * @param plugins list of config config plugins to apply to the exported config\n */\nexport const withPlugins: ConfigPlugin<(StaticPlugin | ConfigPlugin | string)[]> = (\n  config,\n  plugins\n) => {\n  assert(\n    Array.isArray(plugins),\n    'withPlugins expected a valid array of plugins or plugin module paths'\n  );\n  return plugins.reduce((prev, plugin) => withStaticPlugin(prev, { plugin }), config);\n};\n"]},"metadata":{},"sourceType":"script"}