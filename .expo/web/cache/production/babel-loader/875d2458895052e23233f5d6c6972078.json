{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports._resetWarnings=exports.warnEnvironmentDeprecation=exports.validateEnvironment=void 0;var chalk_1=__importDefault(require(\"chalk\"));var getConfig_1=__importDefault(require(\"./getConfig\"));var paths_1=require(\"./paths\");/**\n * Validate the environment options and apply default values.\n *\n * @param env\n * @category env\n */function validateEnvironment(env){if(typeof env.projectRoot!=='string'){throw new Error(\"@expo/webpack-config requires a valid projectRoot string value which points to the root of your project\");}warnEnvironmentDeprecation(env,true);var validModes=['development','production','none'];if(!env.mode||!validModes.includes(env.mode)){throw new Error(\"@expo/webpack-config requires a valid `mode` string which should be one of: \".concat(validModes.join(', ')));}// Default to web. Allow any arbitrary platform.\nif(typeof env.platform==='undefined'){env.platform='web';}// No https by default since it doesn't work well across different browsers and devices.\nif(typeof env.https==='undefined'){env.https=false;}// Ensure the locations are defined.\nif(!env.locations){env.locations=(0,paths_1.getPaths)(env.projectRoot,env);}// Ensure the config is evaluated.\nif(!env.config){env.config=(0,getConfig_1[\"default\"])(env);}return env;}exports.validateEnvironment=validateEnvironment;var warned={};function shouldWarnDeprecated(config,key,warnOnce){return(!warnOnce||!(key in warned))&&typeof config[key]!=='undefined';}/**\n *\n * @param env\n * @param warnOnce\n * @category env\n * @internal\n */function warnEnvironmentDeprecation(env){var warnOnce=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var warnings={production:'Please use `mode: \"production\"` instead.',development:'Please use `mode: \"development\"` instead.',polyfill:'Please include polyfills manually in your project.'};for(var _i=0,_Object$keys=Object.keys(warnings);_i<_Object$keys.length;_i++){var warning=_Object$keys[_i];if(shouldWarnDeprecated(env,warning,warnOnce)){warned[warning]=true;console.warn(chalk_1[\"default\"].bgYellow.black(\"The environment property `\".concat(warning,\"` is deprecated. \").concat(warnings[warning]).trim()));}}}exports.warnEnvironmentDeprecation=warnEnvironmentDeprecation;/**\n * Used for testing\n * @category env\n * @internal\n */function _resetWarnings(){warned={};}exports._resetWarnings=_resetWarnings;","map":{"version":3,"sources":["../../src/env/validate.ts"],"names":[],"mappings":"kRAAA,GAAA,CAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAGA,GAAA,CAAA,WAAA,CAAA,eAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CACA,GAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAEA;;;;;AAKG,GACH,QAAgB,CAAA,mBAAhB,CAAoC,GAApC,CAAyD,CACvD,GAAI,MAAO,CAAA,GAAG,CAAC,WAAX,GAA2B,QAA/B,CAAyC,CACvC,KAAM,IAAI,CAAA,KAAJ,2GAAN,CAGD,CACD,0BAA0B,CAAC,GAAD,CAAM,IAAN,CAA1B,CAEA,GAAM,CAAA,UAAU,CAAG,CAAC,aAAD,CAAgB,YAAhB,CAA8B,MAA9B,CAAnB,CACA,GAAI,CAAC,GAAG,CAAC,IAAL,EAAa,CAAC,UAAU,CAAC,QAAX,CAAoB,GAAG,CAAC,IAAxB,CAAlB,CAAiD,CAC/C,KAAM,IAAI,CAAA,KAAJ,uFAC6E,UAAU,CAAC,IAAX,CAC/E,IAD+E,CAD7E,EAAN,CAKD,CAED;AACA,GAAI,MAAO,CAAA,GAAG,CAAC,QAAX,GAAwB,WAA5B,CAAyC,CACvC,GAAG,CAAC,QAAJ,CAAe,KAAf,CACD,CACD;AACA,GAAI,MAAO,CAAA,GAAG,CAAC,KAAX,GAAqB,WAAzB,CAAsC,CACpC,GAAG,CAAC,KAAJ,CAAY,KAAZ,CACD,CAED;AACA,GAAI,CAAC,GAAG,CAAC,SAAT,CAAoB,CAClB,GAAG,CAAC,SAAJ,CAAgB,CAAA,EAAA,OAAA,CAAA,QAAA,EAAS,GAAG,CAAC,WAAb,CAA0B,GAA1B,CAAhB,CACD,CAED;AACA,GAAI,CAAC,GAAG,CAAC,MAAT,CAAiB,CACf,GAAG,CAAC,MAAJ,CAAa,CAAA,EAAA,WAAA,WAAA,EAAU,GAAV,CAAb,CACD,CAED,MAAO,CAAA,GAAP,CACD,CArCD,OAAA,CAAA,mBAAA,CAAA,mBAAA,CAuCA,GAAI,CAAA,MAAM,CAA+B,EAAzC,CAEA,QAAS,CAAA,oBAAT,CACE,MADF,CAEE,GAFF,CAGE,QAHF,CAGmB,CAEjB,MAAO,CAAC,CAAC,QAAD,EAAa,EAAE,GAAG,GAAI,CAAA,MAAT,CAAd,GAAmC,MAAO,CAAA,MAAM,CAAC,GAAD,CAAb,GAAuB,WAAjE,CACD,CAED;;;;;;AAMG,GACH,QAAgB,CAAA,0BAAhB,CAA2C,GAA3C,CAA2F,IAAzB,CAAA,QAAyB,2DAAL,KAAK,CACzF,GAAM,CAAA,QAAQ,CAA8B,CAC1C,UAAU,CAAE,0CAD8B,CAE1C,WAAW,CAAE,2CAF6B,CAG1C,QAAQ,CAAE,oDAHgC,CAA5C,CAMA,0BAAsB,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAtB,6BAA6C,CAAxC,GAAM,CAAA,OAAO,iBAAb,CACH,GAAI,oBAAoB,CAAC,GAAD,CAAM,OAAN,CAAe,QAAf,CAAxB,CAAkD,CAChD,MAAM,CAAC,OAAD,CAAN,CAAkB,IAAlB,CACA,OAAO,CAAC,IAAR,CACE,OAAA,WAAA,CAAM,QAAN,CAAe,KAAf,CACE,oCAA8B,OAA9B,6BAA0D,QAAQ,CAAC,OAAD,CAAlE,EAA8E,IAA9E,EADF,CADF,EAKD,CACF,CACF,CAjBD,OAAA,CAAA,0BAAA,CAAA,0BAAA,CAmBA;;;;AAIG,GACH,QAAgB,CAAA,cAAhB,EAA8B,CAC5B,MAAM,CAAG,EAAT,CACD,CAFD,OAAA,CAAA,cAAA,CAAA,cAAA","sourcesContent":["import chalk from 'chalk';\n\nimport { Environment, InputEnvironment } from '../types';\nimport getConfig from './getConfig';\nimport { getPaths } from './paths';\n\n/**\n * Validate the environment options and apply default values.\n *\n * @param env\n * @category env\n */\nexport function validateEnvironment(env: InputEnvironment): Environment {\n  if (typeof env.projectRoot !== 'string') {\n    throw new Error(\n      `@expo/webpack-config requires a valid projectRoot string value which points to the root of your project`\n    );\n  }\n  warnEnvironmentDeprecation(env, true);\n\n  const validModes = ['development', 'production', 'none'];\n  if (!env.mode || !validModes.includes(env.mode)) {\n    throw new Error(\n      `@expo/webpack-config requires a valid \\`mode\\` string which should be one of: ${validModes.join(\n        ', '\n      )}`\n    );\n  }\n\n  // Default to web. Allow any arbitrary platform.\n  if (typeof env.platform === 'undefined') {\n    env.platform = 'web';\n  }\n  // No https by default since it doesn't work well across different browsers and devices.\n  if (typeof env.https === 'undefined') {\n    env.https = false;\n  }\n\n  // Ensure the locations are defined.\n  if (!env.locations) {\n    env.locations = getPaths(env.projectRoot, env);\n  }\n\n  // Ensure the config is evaluated.\n  if (!env.config) {\n    env.config = getConfig(env as Environment);\n  }\n\n  return env as Environment;\n}\n\nlet warned: { [key: string]: boolean } = {};\n\nfunction shouldWarnDeprecated(\n  config: { [key: string]: any },\n  key: string,\n  warnOnce: boolean\n): boolean {\n  return (!warnOnce || !(key in warned)) && typeof config[key] !== 'undefined';\n}\n\n/**\n *\n * @param env\n * @param warnOnce\n * @category env\n * @internal\n */\nexport function warnEnvironmentDeprecation(env: InputEnvironment, warnOnce: boolean = false) {\n  const warnings: { [key: string]: string } = {\n    production: 'Please use `mode: \"production\"` instead.',\n    development: 'Please use `mode: \"development\"` instead.',\n    polyfill: 'Please include polyfills manually in your project.',\n  };\n\n  for (const warning of Object.keys(warnings)) {\n    if (shouldWarnDeprecated(env, warning, warnOnce)) {\n      warned[warning] = true;\n      console.warn(\n        chalk.bgYellow.black(\n          `The environment property \\`${warning}\\` is deprecated. ${warnings[warning]}`.trim()\n        )\n      );\n    }\n  }\n}\n\n/**\n * Used for testing\n * @category env\n * @internal\n */\nexport function _resetWarnings() {\n  warned = {};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}