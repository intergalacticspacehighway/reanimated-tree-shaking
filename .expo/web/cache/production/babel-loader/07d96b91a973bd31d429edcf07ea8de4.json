{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.appendScheme=appendScheme;exports.getScheme=getScheme;exports.getSchemesFromPlist=getSchemesFromPlist;exports.hasScheme=hasScheme;exports.removeScheme=removeScheme;exports.setScheme=setScheme;exports.withScheme=void 0;function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}var withScheme=(0,_iosPlugins().createInfoPlistPlugin)(setScheme,'withScheme');exports.withScheme=withScheme;function getScheme(config){if(Array.isArray(config.scheme)){var validate=function validate(value){return typeof value==='string';};return config.scheme.filter(validate);}else if(typeof config.scheme==='string'){return[config.scheme];}return[];}function setScheme(config,infoPlist){var _config$ios,_config$ios2;var scheme=[].concat(_toConsumableArray(getScheme(config)),_toConsumableArray(getScheme((_config$ios=config.ios)!==null&&_config$ios!==void 0?_config$ios:{})));// Add the bundle identifier to the list of schemes for easier Google auth and parity with Turtle v1.\nif((_config$ios2=config.ios)!==null&&_config$ios2!==void 0&&_config$ios2.bundleIdentifier){scheme.push(config.ios.bundleIdentifier);}if(scheme.length===0){return infoPlist;}return _objectSpread(_objectSpread({},infoPlist),{},{CFBundleURLTypes:[{CFBundleURLSchemes:scheme}]});}function appendScheme(scheme,infoPlist){var _infoPlist$CFBundleUR;if(!scheme){return infoPlist;}var existingSchemes=(_infoPlist$CFBundleUR=infoPlist.CFBundleURLTypes)!==null&&_infoPlist$CFBundleUR!==void 0?_infoPlist$CFBundleUR:[];if(existingSchemes.some(function(_ref){var CFBundleURLSchemes=_ref.CFBundleURLSchemes;return CFBundleURLSchemes.includes(scheme);})){return infoPlist;}return _objectSpread(_objectSpread({},infoPlist),{},{CFBundleURLTypes:[].concat(_toConsumableArray(existingSchemes),[{CFBundleURLSchemes:[scheme]}])});}function removeScheme(scheme,infoPlist){if(!scheme){return infoPlist;}// No need to remove if we don't have any\nif(!infoPlist.CFBundleURLTypes){return infoPlist;}infoPlist.CFBundleURLTypes=infoPlist.CFBundleURLTypes.map(function(bundleUrlType){var index=bundleUrlType.CFBundleURLSchemes.indexOf(scheme);if(index>-1){bundleUrlType.CFBundleURLSchemes.splice(index,1);if(bundleUrlType.CFBundleURLSchemes.length===0){return undefined;}}return bundleUrlType;}).filter(Boolean);return infoPlist;}function hasScheme(scheme,infoPlist){var existingSchemes=infoPlist.CFBundleURLTypes;if(!Array.isArray(existingSchemes))return false;return existingSchemes.some(function(_ref2){var schemes=_ref2.CFBundleURLSchemes;return Array.isArray(schemes)?schemes.includes(scheme):false;});}function getSchemesFromPlist(infoPlist){if(Array.isArray(infoPlist.CFBundleURLTypes)){return infoPlist.CFBundleURLTypes.reduce(function(schemes,_ref3){var CFBundleURLSchemes=_ref3.CFBundleURLSchemes;if(Array.isArray(CFBundleURLSchemes)){return[].concat(_toConsumableArray(schemes),_toConsumableArray(CFBundleURLSchemes));}return schemes;},[]);}return[];}","map":{"version":3,"sources":["../../src/ios/Scheme.ts"],"names":["withScheme","Array","config","validate","value","scheme","getScheme","CFBundleURLTypes","CFBundleURLSchemes","existingSchemes","infoPlist","bundleUrlType","index","schemes"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist, URLScheme } from './IosConfig.types';\n\nexport const withScheme = createInfoPlistPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\nexport function setScheme(\n  config: Partial<Pick<ExpoConfig, 'scheme' | 'ios'>>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const scheme = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: ios.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.ios ?? {}),\n  ];\n  // Add the bundle identifier to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.ios?.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [{ CFBundleURLSchemes: scheme }],\n  };\n}\n\nexport function appendScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  const existingSchemes = infoPlist.CFBundleURLTypes ?? [];\n  if (existingSchemes.some(({ CFBundleURLSchemes }) => CFBundleURLSchemes.includes(scheme))) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [\n      ...existingSchemes,\n      {\n        CFBundleURLSchemes: [scheme],\n      },\n    ],\n  };\n}\n\nexport function removeScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  // No need to remove if we don't have any\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map(bundleUrlType => {\n    const index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n    return bundleUrlType;\n  }).filter(Boolean) as URLScheme[];\n\n  return infoPlist;\n}\n\nexport function hasScheme(scheme: string, infoPlist: InfoPlist): boolean {\n  const existingSchemes = infoPlist.CFBundleURLTypes;\n\n  if (!Array.isArray(existingSchemes)) return false;\n\n  return existingSchemes.some(({ CFBundleURLSchemes: schemes }: any) =>\n    Array.isArray(schemes) ? schemes.includes(scheme) : false\n  );\n}\n\nexport function getSchemesFromPlist(infoPlist: InfoPlist): string[] {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce<string[]>((schemes, { CFBundleURLSchemes }) => {\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [...schemes, ...CFBundleURLSchemes];\n      }\n      return schemes;\n    }, []);\n  }\n  return [];\n}\n"]},"metadata":{},"sourceType":"script"}