{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getAndroidManifestAsync=getAndroidManifestAsync;exports.getAppBuildGradleAsync=getAppBuildGradleAsync;exports.getAppBuildGradleFilePath=getAppBuildGradleFilePath;exports.getFileInfo=getFileInfo;exports.getGradleFilePath=getGradleFilePath;exports.getMainActivityAsync=getMainActivityAsync;exports.getMainApplicationAsync=getMainApplicationAsync;exports.getProjectBuildGradleAsync=getProjectBuildGradleAsync;exports.getProjectBuildGradleFilePath=getProjectBuildGradleFilePath;exports.getProjectFilePath=getProjectFilePath;exports.getProjectPathOrThrowAsync=getProjectPathOrThrowAsync;exports.getResourceFolderAsync=getResourceFolderAsync;exports.getResourceXMLPathAsync=getResourceXMLPathAsync;exports.getSettingsGradleAsync=getSettingsGradleAsync;exports.getSettingsGradleFilePath=getSettingsGradleFilePath;function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _glob(){var data=require(\"glob\");_glob=function _glob(){return data;};return data;}function path(){var data=_interopRequireWildcard(require(\"path\"));path=function path(){return data;};return data;}function _errors(){var data=require(\"../utils/errors\");_errors=function _errors(){return data;};return data;}function _modules(){var data=require(\"../utils/modules\");_modules=function _modules(){return data;};return data;}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{\"default\":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj[\"default\"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function getProjectFilePath(projectRoot,name){var filePath=(0,_glob().sync)(path().join(projectRoot,\"android/app/src/main/java/**/\".concat(name,\".@(java|kt)\")))[0];(0,_assert()[\"default\"])(filePath,\"Project file \\\"\".concat(name,\"\\\" does not exist in android project for root \\\"\").concat(projectRoot,\"\\\"\"));return filePath;}function getLanguage(filePath){var extension=path().extname(filePath);switch(extension){case'.java':return'java';case'.kts':case'.kt':return'kt';case'.groovy':case'.gradle':return'groovy';default:throw new(_errors().UnexpectedError)(\"Unexpected Android file extension: \".concat(extension));}}function getFileInfo(filePath){return{path:path().normalize(filePath),contents:_fs()[\"default\"].readFileSync(filePath,'utf8'),language:getLanguage(filePath)};}function getMainApplicationAsync(_x){return _getMainApplicationAsync.apply(this,arguments);}function _getMainApplicationAsync(){_getMainApplicationAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(projectRoot){var filePath;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:filePath=getProjectFilePath(projectRoot,'MainApplication');return _context.abrupt(\"return\",getFileInfo(filePath));case 2:case\"end\":return _context.stop();}}},_callee);}));return _getMainApplicationAsync.apply(this,arguments);}function getMainActivityAsync(_x2){return _getMainActivityAsync.apply(this,arguments);}function _getMainActivityAsync(){_getMainActivityAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(projectRoot){var filePath;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:filePath=getProjectFilePath(projectRoot,'MainActivity');return _context2.abrupt(\"return\",getFileInfo(filePath));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return _getMainActivityAsync.apply(this,arguments);}function getGradleFilePath(projectRoot,gradleName){var groovyPath=path().resolve(projectRoot,\"\".concat(gradleName,\".gradle\"));var ktPath=path().resolve(projectRoot,\"\".concat(gradleName,\".gradle.kts\"));var isGroovy=_fs()[\"default\"].existsSync(groovyPath);var isKotlin=!isGroovy&&_fs()[\"default\"].existsSync(ktPath);if(!isGroovy&&!isKotlin){throw new Error(\"Failed to find '\".concat(gradleName,\".gradle' file for project: \").concat(projectRoot,\".\"));}var filePath=isGroovy?groovyPath:ktPath;return filePath;}function getProjectBuildGradleFilePath(projectRoot){return getGradleFilePath(path().join(projectRoot,'android'),'build');}function getProjectBuildGradleAsync(_x3){return _getProjectBuildGradleAsync.apply(this,arguments);}function _getProjectBuildGradleAsync(){_getProjectBuildGradleAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(projectRoot){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",getFileInfo(getProjectBuildGradleFilePath(projectRoot)));case 1:case\"end\":return _context3.stop();}}},_callee3);}));return _getProjectBuildGradleAsync.apply(this,arguments);}function getSettingsGradleFilePath(projectRoot){return getGradleFilePath(path().join(projectRoot,'android'),'settings');}function getSettingsGradleAsync(_x4){return _getSettingsGradleAsync.apply(this,arguments);}function _getSettingsGradleAsync(){_getSettingsGradleAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(projectRoot){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt(\"return\",getFileInfo(getSettingsGradleFilePath(projectRoot)));case 1:case\"end\":return _context4.stop();}}},_callee4);}));return _getSettingsGradleAsync.apply(this,arguments);}function getAppBuildGradleFilePath(projectRoot){return getGradleFilePath(path().join(projectRoot,'android','app'),'build');}function getAppBuildGradleAsync(_x5){return _getAppBuildGradleAsync.apply(this,arguments);}function _getAppBuildGradleAsync(){_getAppBuildGradleAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(projectRoot){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",getFileInfo(getAppBuildGradleFilePath(projectRoot)));case 1:case\"end\":return _context5.stop();}}},_callee5);}));return _getAppBuildGradleAsync.apply(this,arguments);}function getProjectPathOrThrowAsync(_x6){return _getProjectPathOrThrowAsync.apply(this,arguments);}function _getProjectPathOrThrowAsync(){_getProjectPathOrThrowAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(projectRoot){var projectPath;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:projectPath=path().join(projectRoot,'android');_context6.next=3;return(0,_modules().directoryExistsAsync)(projectPath);case 3:if(!_context6.sent){_context6.next=5;break;}return _context6.abrupt(\"return\",projectPath);case 5:throw new Error(\"Android project folder is missing in project: \".concat(projectRoot));case 6:case\"end\":return _context6.stop();}}},_callee6);}));return _getProjectPathOrThrowAsync.apply(this,arguments);}function getAndroidManifestAsync(_x7){return _getAndroidManifestAsync.apply(this,arguments);}function _getAndroidManifestAsync(){_getAndroidManifestAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(projectRoot){var projectPath,filePath;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return getProjectPathOrThrowAsync(projectRoot);case 2:projectPath=_context7.sent;filePath=path().join(projectPath,'app/src/main/AndroidManifest.xml');return _context7.abrupt(\"return\",filePath);case 5:case\"end\":return _context7.stop();}}},_callee7);}));return _getAndroidManifestAsync.apply(this,arguments);}function getResourceFolderAsync(_x8){return _getResourceFolderAsync.apply(this,arguments);}function _getResourceFolderAsync(){_getResourceFolderAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(projectRoot){var projectPath;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return getProjectPathOrThrowAsync(projectRoot);case 2:projectPath=_context8.sent;return _context8.abrupt(\"return\",path().join(projectPath,\"app/src/main/res\"));case 4:case\"end\":return _context8.stop();}}},_callee8);}));return _getResourceFolderAsync.apply(this,arguments);}function getResourceXMLPathAsync(_x9,_x10){return _getResourceXMLPathAsync.apply(this,arguments);}function _getResourceXMLPathAsync(){_getResourceXMLPathAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(projectRoot,_ref){var _ref$kind,kind,name,resourcePath,filePath;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_ref$kind=_ref.kind,kind=_ref$kind===void 0?'values':_ref$kind,name=_ref.name;_context9.next=3;return getResourceFolderAsync(projectRoot);case 3:resourcePath=_context9.sent;filePath=path().join(resourcePath,\"\".concat(kind,\"/\").concat(name,\".xml\"));return _context9.abrupt(\"return\",filePath);case 6:case\"end\":return _context9.stop();}}},_callee9);}));return _getResourceXMLPathAsync.apply(this,arguments);}","map":{"version":3,"sources":["../../src/android/Paths.ts"],"names":["filePath","path","name","extension","UnexpectedError","contents","fs","language","getLanguage","getProjectFilePath","getFileInfo","groovyPath","ktPath","isGroovy","isKotlin","gradleName","getGradleFilePath","getProjectBuildGradleFilePath","getSettingsGradleFilePath","getAppBuildGradleFilePath","projectPath","getProjectPathOrThrowAsync","kind","resourcePath","getResourceFolderAsync"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { UnexpectedError } from '../utils/errors';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { ResourceKind } from './Resources';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\nexport type GradleProjectFile = ProjectFile<'groovy' | 'kt'>;\n\nexport function getProjectFilePath(projectRoot: string, name: string): string {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`)\n  )[0];\n  assert(\n    filePath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  return filePath;\n}\n\nfunction getLanguage(filePath: string): 'java' | 'groovy' | 'kt' {\n  const extension = path.extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new UnexpectedError(`Unexpected Android file extension: ${extension}`);\n  }\n}\n\nexport function getFileInfo(filePath: string) {\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath) as any,\n  };\n}\n\nexport async function getMainApplicationAsync(\n  projectRoot: string\n): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainApplication');\n  return getFileInfo(filePath);\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainActivity');\n  return getFileInfo(filePath);\n}\n\nexport function getGradleFilePath(projectRoot: string, gradleName: string): string {\n  const groovyPath = path.resolve(projectRoot, `${gradleName}.gradle`);\n  const ktPath = path.resolve(projectRoot, `${gradleName}.gradle.kts`);\n\n  const isGroovy = fs.existsSync(groovyPath);\n  const isKotlin = !isGroovy && fs.existsSync(ktPath);\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  const filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\n\nexport function getProjectBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'build');\n}\n\nexport async function getProjectBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n}\n\nexport function getSettingsGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'settings');\n}\n\nexport async function getSettingsGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getSettingsGradleFilePath(projectRoot));\n}\n\nexport function getAppBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android', 'app'), 'build');\n}\n\nexport async function getAppBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  return filePath;\n}\n\nexport async function getResourceFolderAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  return path.join(projectPath, `app/src/main/res`);\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const resourcePath = await getResourceFolderAsync(projectRoot);\n\n  const filePath = path.join(resourcePath, `${kind}/${name}.xml`);\n  return filePath;\n}\n"]},"metadata":{},"sourceType":"script"}