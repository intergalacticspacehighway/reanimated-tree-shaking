{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.gteSdkVersion=gteSdkVersion;exports.lteSdkVersion=lteSdkVersion;function _semver(){var data=_interopRequireDefault(require(\"semver\"));_semver=function _semver(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function gteSdkVersion(exp,sdkVersion){if(!exp.sdkVersion){return false;}if(exp.sdkVersion==='UNVERSIONED'){return true;}try{return _semver()[\"default\"].gte(exp.sdkVersion,sdkVersion);}catch(_unused){throw new Error(\"\".concat(exp.sdkVersion,\" is not a valid version. Must be in the form of x.y.z\"));}}function lteSdkVersion(exp,sdkVersion){if(!exp.sdkVersion){return false;}if(exp.sdkVersion==='UNVERSIONED'){return false;}try{return _semver()[\"default\"].lte(exp.sdkVersion,sdkVersion);}catch(_unused2){throw new Error(\"\".concat(exp.sdkVersion,\" is not a valid version. Must be in the form of x.y.z\"));}}","map":{"version":3,"sources":["../../src/utils/versions.ts"],"names":["exp","semver"],"mappings":"8IACA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,qFAEO,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,UAAA,CAAyF,CAC9F,GAAI,CAACA,GAAG,CAAR,UAAA,CAAqB,CACnB,MAAA,MAAA,CACD,CAED,GAAIA,GAAG,CAAHA,UAAAA,GAAJ,aAAA,CAAsC,CACpC,MAAA,KAAA,CACD,CAED,GAAI,CACF,MAAOC,CAAAA,OAAAA,aAAAA,CAAAA,GAAAA,CAAWD,GAAG,CAAdC,UAAAA,CAAP,UAAOA,CAAP,CADF,CAEE,cAAM,CACN,KAAM,IAAA,CAAA,KAAA,WAAaD,GAAG,CAAtB,UAAM,0DAAN,CACD,CACF,CAEM,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,UAAA,CAAyF,CAC9F,GAAI,CAACA,GAAG,CAAR,UAAA,CAAqB,CACnB,MAAA,MAAA,CACD,CAED,GAAIA,GAAG,CAAHA,UAAAA,GAAJ,aAAA,CAAsC,CACpC,MAAA,MAAA,CACD,CAED,GAAI,CACF,MAAOC,CAAAA,OAAAA,aAAAA,CAAAA,GAAAA,CAAWD,GAAG,CAAdC,UAAAA,CAAP,UAAOA,CAAP,CADF,CAEE,eAAM,CACN,KAAM,IAAA,CAAA,KAAA,WAAaD,GAAG,CAAtB,UAAM,0DAAN,CACD,CACF","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport semver from 'semver';\n\nexport function gteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(exp.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n\nexport function lteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(exp.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}