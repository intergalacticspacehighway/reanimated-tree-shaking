{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _objectWithoutProperties=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var _excluded=[\"nextMod\"],_excluded2=[\"modRequest\"],_excluded3=[\"modName\"],_excluded4=[\"platform\",\"providers\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.assertModResults=assertModResults;exports.createBaseMod=createBaseMod;exports.createPlatformBaseMod=createPlatformBaseMod;exports.provider=provider;exports.withGeneratedBaseMods=withGeneratedBaseMods;function _debug(){var data=_interopRequireDefault(require(\"debug\"));_debug=function _debug(){return data;};return data;}function _withMod(){var data=require(\"./withMod\");_withMod=function _withMod(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var debug=(0,_debug()[\"default\"])('expo:config-plugins:base-mods');function createBaseMod(_ref){var methodName=_ref.methodName,platform=_ref.platform,modName=_ref.modName,getFilePath=_ref.getFilePath,read=_ref.read,write=_ref.write,isIntrospective=_ref.isIntrospective;var withUnknown=function withUnknown(config,_props){var _props$skipEmptyMod,_props$saveToInternal;var props=_props||{};return(0,_withMod().withBaseMod)(config,{platform:platform,mod:modName,skipEmptyMod:(_props$skipEmptyMod=props.skipEmptyMod)!==null&&_props$skipEmptyMod!==void 0?_props$skipEmptyMod:true,saveToInternal:(_props$saveToInternal=props.saveToInternal)!==null&&_props$saveToInternal!==void 0?_props$saveToInternal:false,isProvider:true,isIntrospective:isIntrospective,action:function action(_ref2){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _ref2$modRequest,nextMod,modRequest,config,results,filePath,modResults;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref2$modRequest=_ref2.modRequest,nextMod=_ref2$modRequest.nextMod,modRequest=_objectWithoutProperties(_ref2$modRequest,_excluded),config=_objectWithoutProperties(_ref2,_excluded2);_context.prev=1;results=_objectSpread(_objectSpread({},config),{},{modRequest:modRequest});_context.next=5;return getFilePath(results,props);case 5:filePath=_context.sent;debug(\"mods.\".concat(platform,\".\").concat(modName,\": file path: \").concat(filePath||'[skipped]'));_context.next=9;return read(filePath,results,props);case 9:modResults=_context.sent;_context.next=12;return nextMod(_objectSpread(_objectSpread({},results),{},{modResults:modResults,modRequest:modRequest}));case 12:results=_context.sent;assertModResults(results,modRequest.platform,modRequest.modName);_context.next=16;return write(filePath,results,props);case 16:return _context.abrupt(\"return\",results);case 19:_context.prev=19;_context.t0=_context[\"catch\"](1);_context.t0.message=\"[\".concat(platform,\".\").concat(modName,\"]: \").concat(methodName,\": \").concat(_context.t0.message);throw _context.t0;case 23:case\"end\":return _context.stop();}}},_callee,null,[[1,19]]);}))();}});};if(methodName){Object.defineProperty(withUnknown,'name',{value:methodName});}return withUnknown;}function assertModResults(results,platformName,modName){// If the results came from a mod, they'd be in the form of [config, data].\n// Ensure the results are an array and omit the data since it should've been written by a data provider plugin.\nvar ensuredResults=results;// Sanity check to help locate non compliant mods.\nif(!ensuredResults||typeof ensuredResults!=='object'||!(ensuredResults!==null&&ensuredResults!==void 0&&ensuredResults.mods)){throw new Error(\"Mod `mods.\".concat(platformName,\".\").concat(modName,\"` evaluated to an object that is not a valid project config. Instead got: \").concat(JSON.stringify(ensuredResults)));}return ensuredResults;}function upperFirst(name){return name.charAt(0).toUpperCase()+name.slice(1);}function createPlatformBaseMod(_ref3){var modName=_ref3.modName,props=_objectWithoutProperties(_ref3,_excluded3);// Generate the function name to ensure it's uniform and also to improve stack traces.\nvar methodName=\"with\".concat(upperFirst(props.platform)).concat(upperFirst(modName),\"BaseMod\");return createBaseMod(_objectSpread({methodName:methodName,modName:modName},props));}/** A TS wrapper for creating provides */function provider(props){return props;}/** Plugin to create and append base mods from file providers */function withGeneratedBaseMods(config,_ref4){var platform=_ref4.platform,providers=_ref4.providers,props=_objectWithoutProperties(_ref4,_excluded4);return Object.entries(providers).reduce(function(config,_ref5){var _ref6=_slicedToArray(_ref5,2),modName=_ref6[0],value=_ref6[1];var baseMod=createPlatformBaseMod(_objectSpread({platform:platform,modName:modName},value));return baseMod(config,props);},config);}","map":{"version":3,"sources":["../../src/plugins/createBaseMod.ts"],"names":["debug","isIntrospective","withUnknown","props","_props","platform","mod","skipEmptyMod","saveToInternal","isProvider","modRequest","config","results","filePath","getFilePath","modName","modResults","read","nextMod","assertModResults","write","error","methodName","Object","value","ensuredResults","platformName","JSON","name","upperFirst","createBaseMod","baseMod","createPlatformBaseMod"],"mappings":"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","sourcesContent":["import Debug from 'debug';\n\nimport {\n  ConfigPlugin,\n  ExportedConfig,\n  ExportedConfigWithProps,\n  ModPlatform,\n} from '../Plugin.types';\nimport { BaseModOptions, withBaseMod } from './withMod';\n\nconst debug = Debug('expo:config-plugins:base-mods');\n\nexport type ForwardedBaseModOptions = Partial<\n  Pick<BaseModOptions, 'saveToInternal' | 'skipEmptyMod'>\n>;\n\nexport type BaseModProviderMethods<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n> = {\n  getFilePath: (config: ExportedConfigWithProps<ModType>, props: Props) => Promise<string> | string;\n  read: (\n    filePath: string,\n    config: ExportedConfigWithProps<ModType>,\n    props: Props\n  ) => Promise<ModType> | ModType;\n  write: (\n    filePath: string,\n    config: ExportedConfigWithProps<ModType>,\n    props: Props\n  ) => Promise<void> | void;\n  /**\n   * If the mod supports introspection, and avoids making any filesystem modifications during compilation.\n   * By enabling, this mod, and all of its descendants will be run in introspection mode.\n   * This should only be used for static files like JSON or XML, and not for application files that require regexes,\n   * or complex static files that require other files to be generated like Xcode `.pbxproj`.\n   */\n  isIntrospective?: boolean;\n};\n\nexport type CreateBaseModProps<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n> = {\n  methodName: string;\n  platform: ModPlatform;\n  modName: string;\n} & BaseModProviderMethods<ModType, Props>;\n\nexport function createBaseMod<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n>({\n  methodName,\n  platform,\n  modName,\n  getFilePath,\n  read,\n  write,\n  isIntrospective,\n}: CreateBaseModProps<ModType, Props>): ConfigPlugin<Props | void> {\n  const withUnknown: ConfigPlugin<Props | void> = (config, _props) => {\n    const props = _props || ({} as Props);\n    return withBaseMod<ModType>(config, {\n      platform,\n      mod: modName,\n      skipEmptyMod: props.skipEmptyMod ?? true,\n      saveToInternal: props.saveToInternal ?? false,\n      isProvider: true,\n      isIntrospective,\n      async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n        try {\n          let results: ExportedConfigWithProps<ModType> = {\n            ...config,\n            modRequest,\n          };\n\n          const filePath = await getFilePath(results, props);\n          debug(`mods.${platform}.${modName}: file path: ${filePath || '[skipped]'}`);\n          const modResults = await read(filePath, results, props);\n\n          results = await nextMod!({\n            ...results,\n            modResults,\n            modRequest,\n          });\n\n          assertModResults(results, modRequest.platform, modRequest.modName);\n\n          await write(filePath, results, props);\n          return results;\n        } catch (error: any) {\n          error.message = `[${platform}.${modName}]: ${methodName}: ${error.message}`;\n          throw error;\n        }\n      },\n    });\n  };\n\n  if (methodName) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: methodName,\n    });\n  }\n\n  return withUnknown;\n}\n\nexport function assertModResults(results: any, platformName: string, modName: string) {\n  // If the results came from a mod, they'd be in the form of [config, data].\n  // Ensure the results are an array and omit the data since it should've been written by a data provider plugin.\n  const ensuredResults = results;\n\n  // Sanity check to help locate non compliant mods.\n  if (!ensuredResults || typeof ensuredResults !== 'object' || !ensuredResults?.mods) {\n    throw new Error(\n      `Mod \\`mods.${platformName}.${modName}\\` evaluated to an object that is not a valid project config. Instead got: ${JSON.stringify(\n        ensuredResults\n      )}`\n    );\n  }\n  return ensuredResults;\n}\n\nfunction upperFirst(name: string): string {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\n\nexport function createPlatformBaseMod<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n>({ modName, ...props }: Omit<CreateBaseModProps<ModType, Props>, 'methodName'>) {\n  // Generate the function name to ensure it's uniform and also to improve stack traces.\n  const methodName = `with${upperFirst(props.platform)}${upperFirst(modName)}BaseMod`;\n  return createBaseMod<ModType, Props>({\n    methodName,\n    modName,\n    ...props,\n  });\n}\n\n/** A TS wrapper for creating provides */\nexport function provider<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions>(\n  props: BaseModProviderMethods<ModType, Props>\n) {\n  return props;\n}\n\n/** Plugin to create and append base mods from file providers */\nexport function withGeneratedBaseMods<ModName extends string>(\n  config: ExportedConfig,\n  {\n    platform,\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & {\n    platform: ModPlatform;\n    providers: Partial<Record<ModName, BaseModProviderMethods<any, any>>>;\n  }\n): ExportedConfig {\n  return Object.entries(providers).reduce((config, [modName, value]) => {\n    const baseMod = createPlatformBaseMod({ platform, modName, ...(value as any) });\n    return baseMod(config, props);\n  }, config);\n}\n"]},"metadata":{},"sourceType":"script"}