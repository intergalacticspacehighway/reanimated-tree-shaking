{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getStatusBarColor=getStatusBarColor;exports.getStatusBarStyle=getStatusBarStyle;exports.getStatusBarTranslucent=getStatusBarTranslucent;exports.setStatusBarColors=setStatusBarColors;exports.setStatusBarStyles=setStatusBarStyles;exports.withStatusBar=void 0;function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _Colors(){var data=require(\"./Colors\");_Colors=function _Colors(){return data;};return data;}function _Styles(){var data=require(\"./Styles\");_Styles=function _Styles(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}// https://developer.android.com/reference/android/R.attr#colorPrimaryDark\nvar COLOR_PRIMARY_DARK_KEY='colorPrimaryDark';// https://developer.android.com/reference/android/R.attr#windowTranslucentStatus\nvar WINDOW_TRANSLUCENT_STATUS='android:windowTranslucentStatus';// https://developer.android.com/reference/android/R.attr#windowLightStatusBar\nvar WINDOW_LIGHT_STATUS_BAR='android:windowLightStatusBar';var withStatusBar=function withStatusBar(config){config=withStatusBarColors(config);config=withStatusBarStyles(config);return config;};exports.withStatusBar=withStatusBar;var withStatusBarColors=function withStatusBarColors(config){return(0,_androidPlugins().withAndroidColors)(config,function(config){config.modResults=setStatusBarColors(config,config.modResults);return config;});};var withStatusBarStyles=function withStatusBarStyles(config){return(0,_androidPlugins().withAndroidStyles)(config,function(config){config.modResults=setStatusBarStyles(config,config.modResults);return config;});};function setStatusBarColors(config,colors){return(0,_Colors().assignColorValue)(colors,{name:COLOR_PRIMARY_DARK_KEY,value:getStatusBarColor(config)});}function setStatusBarStyles(config,styles){var hexString=getStatusBarColor(config);var floatElement=getStatusBarTranslucent(config);styles=(0,_Styles().assignStylesValue)(styles,{parent:(0,_Styles().getAppThemeLightNoActionBarGroup)(),name:WINDOW_LIGHT_STATUS_BAR,targetApi:'23',value:'true',// Default is light-content, don't need to do anything to set it\nadd:getStatusBarStyle(config)==='dark-content'});styles=(0,_Styles().assignStylesValue)(styles,{parent:(0,_Styles().getAppThemeLightNoActionBarGroup)(),name:WINDOW_TRANSLUCENT_STATUS,value:'true',// translucent status bar set in theme\nadd:floatElement});styles=(0,_Styles().assignStylesValue)(styles,{parent:(0,_Styles().getAppThemeLightNoActionBarGroup)(),name:COLOR_PRIMARY_DARK_KEY,value:\"@color/\".concat(COLOR_PRIMARY_DARK_KEY),// Remove the color if translucent is used\nadd:!!hexString});return styles;}function getStatusBarColor(config){var _config$androidStatus;var backgroundColor=(_config$androidStatus=config.androidStatusBar)===null||_config$androidStatus===void 0?void 0:_config$androidStatus.backgroundColor;if(backgroundColor){// Drop support for translucent\n(0,_assert()[\"default\"])(backgroundColor!=='translucent',\"androidStatusBar.backgroundColor must be a valid hex string, instead got: \\\"\".concat(backgroundColor,\"\\\"\"));}return backgroundColor;}/**\n * Specifies whether the status bar should be \"translucent\". When true, the status bar is drawn with `position: absolute` and a gray underlay, when false `position: relative` (pushes content down).\n *\n * @default false\n * @param config\n * @returns\n */function getStatusBarTranslucent(config){var _config$androidStatus2,_config$androidStatus3;return(_config$androidStatus2=(_config$androidStatus3=config.androidStatusBar)===null||_config$androidStatus3===void 0?void 0:_config$androidStatus3.translucent)!==null&&_config$androidStatus2!==void 0?_config$androidStatus2:false;}function getStatusBarStyle(config){var _config$androidStatus4;return((_config$androidStatus4=config.androidStatusBar)===null||_config$androidStatus4===void 0?void 0:_config$androidStatus4.barStyle)||'light-content';}","map":{"version":3,"sources":["../../src/android/StatusBar.ts"],"names":["COLOR_PRIMARY_DARK_KEY","WINDOW_TRANSLUCENT_STATUS","WINDOW_LIGHT_STATUS_BAR","withStatusBar","config","withStatusBarColors","withStatusBarStyles","setStatusBarColors","setStatusBarStyles","name","value","getStatusBarColor","hexString","floatElement","getStatusBarTranslucent","styles","parent","targetApi","add","getStatusBarStyle","backgroundColor"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport { assignColorValue } from './Colors';\nimport { ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\n// https://developer.android.com/reference/android/R.attr#colorPrimaryDark\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\n// https://developer.android.com/reference/android/R.attr#windowTranslucentStatus\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\n// https://developer.android.com/reference/android/R.attr#windowLightStatusBar\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport const withStatusBar: ConfigPlugin = config => {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\n\nconst withStatusBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withStatusBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setStatusBarColors(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  return assignColorValue(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config),\n  });\n}\n\nexport function setStatusBarStyles(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  const hexString = getStatusBarColor(config);\n  const floatElement = getStatusBarTranslucent(config);\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    // Default is light-content, don't need to do anything to set it\n    add: getStatusBarStyle(config) === 'dark-content',\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    // translucent status bar set in theme\n    add: floatElement,\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    // Remove the color if translucent is used\n    add: !!hexString,\n  });\n\n  return styles;\n}\n\nexport function getStatusBarColor(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  const backgroundColor = config.androidStatusBar?.backgroundColor;\n  if (backgroundColor) {\n    // Drop support for translucent\n    assert(\n      backgroundColor !== 'translucent',\n      `androidStatusBar.backgroundColor must be a valid hex string, instead got: \"${backgroundColor}\"`\n    );\n  }\n  return backgroundColor;\n}\n\n/**\n * Specifies whether the status bar should be \"translucent\". When true, the status bar is drawn with `position: absolute` and a gray underlay, when false `position: relative` (pushes content down).\n *\n * @default false\n * @param config\n * @returns\n */\nexport function getStatusBarTranslucent(config: Pick<ExpoConfig, 'androidStatusBar'>): boolean {\n  return config.androidStatusBar?.translucent ?? false;\n}\n\nexport function getStatusBarStyle(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n"]},"metadata":{},"sourceType":"script"}