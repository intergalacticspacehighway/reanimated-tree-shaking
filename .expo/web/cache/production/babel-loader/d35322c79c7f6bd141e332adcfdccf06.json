{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});var paths_1=require(\"@expo/config/paths\");var resolve_from_1=__importDefault(require(\"resolve-from\"));var utils_1=require(\"../utils\");/**\n * Inject a new entry path into an existing Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env Environment props used to get the Expo config.\n * @param options new entry path to inject.\n * @category addons\n */function withEntry(webpackConfig){var env=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var options=arguments.length>2?arguments[2]:undefined;env.projectRoot=env.projectRoot||(0,paths_1.getPossibleProjectRoot)();var extraAppEntry=resolve_from_1[\"default\"].silent(env.projectRoot,options.entryPath);if(!extraAppEntry){if(options.strict){throw new Error(\"[WEBPACK]: The required app entry module: \\\"\".concat(options.entryPath,\"\\\" couldn't be found.\"));}// Couldn't resolve the app entry so return the config without modifying it.\nreturn webpackConfig;}var expoEntry=webpackConfig.entry;webpackConfig.entry=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var entries;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return(0,utils_1.resolveEntryAsync)(expoEntry);case 2:entries=_context.sent;if(!entries.app){_context.next=7;break;}if(!entries.app.includes(extraAppEntry)){if(!Array.isArray(entries.app)){entries.app=[entries.app];}entries.app.unshift(extraAppEntry);}_context.next=9;break;case 7:if(!options.strict){_context.next=9;break;}throw new Error(\"[WEBPACK]: Failed to include required app entry module: \\\"\".concat(options.entryPath,\"\\\" because the webpack entry object doesn't contain an `app` field.\"));case 9:return _context.abrupt(\"return\",entries);case 10:case\"end\":return _context.stop();}}},_callee);}));return webpackConfig;}exports[\"default\"]=withEntry;","map":{"version":3,"sources":["../../src/addons/withEntry.ts"],"names":[],"mappings":"0dAAA,GAAA,CAAA,OAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA,CAGA,GAAA,CAAA,OAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAEA;;;;;;;AAOG,GACH,QAAwB,CAAA,SAAxB,CACE,aADF,CAGkD,IADhD,CAAA,GACgD,2DADsB,EACtB,IAAhD,CAAA,OAAgD,2CAEhD,GAAG,CAAC,WAAJ,CAAkB,GAAG,CAAC,WAAJ,EAAmB,CAAA,EAAA,OAAA,CAAA,sBAAA,GAArC,CAEA,GAAM,CAAA,aAAa,CAAG,cAAA,WAAA,CAAY,MAAZ,CAAmB,GAAG,CAAC,WAAvB,CAAoC,OAAO,CAAC,SAA5C,CAAtB,CAEA,GAAI,CAAC,aAAL,CAAoB,CAClB,GAAI,OAAO,CAAC,MAAZ,CAAoB,CAClB,KAAM,IAAI,CAAA,KAAJ,uDAC0C,OAAO,CAAC,SADlD,0BAAN,CAGD,CACD;AACA,MAAO,CAAA,aAAP,CACD,CAED,GAAM,CAAA,SAAS,CAAG,aAAa,CAAC,KAAhC,CACA,aAAa,CAAC,KAAd,sEAAsB,qKACE,CAAA,EAAA,OAAA,CAAA,iBAAA,EAAkB,SAAlB,CADF,QACd,OADc,mBAEhB,OAAO,CAAC,GAFQ,yBAGlB,GAAI,CAAC,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,aAArB,CAAL,CAA0C,CACxC,GAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,GAAtB,CAAL,CAAiC,CAC/B,OAAO,CAAC,GAAR,CAAc,CAAC,OAAO,CAAC,GAAT,CAAd,CACD,CACD,OAAO,CAAC,GAAR,CAAY,OAAZ,CAAoB,aAApB,EACD,CARiB,iCAST,OAAO,CAAC,MATC,8BAWZ,IAAI,CAAA,KAAJ,qEACwD,OAAO,CAAC,SADhE,wEAXY,wCAeb,OAfa,yDAAtB,GAkBA,MAAO,CAAA,aAAP,CACD,CAvCD,OAAA,WAAA,CAAA,SAAA","sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport resolveFrom from 'resolve-from';\n\nimport { AnyConfiguration, InputEnvironment } from '../types';\nimport { resolveEntryAsync } from '../utils';\n\n/**\n * Inject a new entry path into an existing Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env Environment props used to get the Expo config.\n * @param options new entry path to inject.\n * @category addons\n */\nexport default function withEntry(\n  webpackConfig: AnyConfiguration,\n  env: Pick<InputEnvironment, 'projectRoot' | 'config' | 'locations'> = {},\n  options: { entryPath: string; strict?: boolean }\n): AnyConfiguration {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n\n  const extraAppEntry = resolveFrom.silent(env.projectRoot, options.entryPath);\n\n  if (!extraAppEntry) {\n    if (options.strict) {\n      throw new Error(\n        `[WEBPACK]: The required app entry module: \"${options.entryPath}\" couldn't be found.`\n      );\n    }\n    // Couldn't resolve the app entry so return the config without modifying it.\n    return webpackConfig;\n  }\n\n  const expoEntry = webpackConfig.entry;\n  webpackConfig.entry = async () => {\n    const entries = await resolveEntryAsync(expoEntry);\n    if (entries.app) {\n      if (!entries.app.includes(extraAppEntry)) {\n        if (!Array.isArray(entries.app)) {\n          entries.app = [entries.app];\n        }\n        entries.app.unshift(extraAppEntry);\n      }\n    } else if (options.strict) {\n      // Better to be safe...\n      throw new Error(\n        `[WEBPACK]: Failed to include required app entry module: \"${options.entryPath}\" because the webpack entry object doesn't contain an \\`app\\` field.`\n      );\n    }\n    return entries;\n  };\n\n  return webpackConfig;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}