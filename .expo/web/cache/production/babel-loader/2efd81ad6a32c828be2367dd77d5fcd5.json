{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.createBuildSourceFile=createBuildSourceFile;exports.withBuildSourceFile=void 0;function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}/**\n * Create a build source file and link it to Xcode.\n *\n * @param config\n * @param props.filePath relative to the build source folder. ex: `ViewController.swift` would be created in `ios/myapp/ViewController.swift`.\n * @param props.contents file contents to write.\n * @param props.overwrite should the contents overwrite any existing file in the same location on disk.\n * @returns\n */var withBuildSourceFile=function withBuildSourceFile(config,_ref){var filePath=_ref.filePath,contents=_ref.contents,overwrite=_ref.overwrite;return(0,_iosPlugins().withXcodeProject)(config,function(config){var projectName=(0,_Xcodeproj().getProjectName)(config.modRequest.projectRoot);config.modResults=createBuildSourceFile({project:config.modResults,nativeProjectRoot:config.modRequest.platformProjectRoot,fileContents:contents,filePath:_path()[\"default\"].join(projectName,filePath),overwrite:overwrite});return config;});};/**\n * Add a source file to the Xcode project and write it to the file system.\n *\n * @param nativeProjectRoot absolute path to the native app root `user/app/ios`\n * @param filePath path relative to the `nativeProjectRoot` for the file to create `user/app/ios/myapp/foobar.swift`\n * @param fileContents string file contents to write to the `filePath`\n * @param overwrite should write file even if one already exists\n */exports.withBuildSourceFile=withBuildSourceFile;function createBuildSourceFile(_ref2){var project=_ref2.project,nativeProjectRoot=_ref2.nativeProjectRoot,filePath=_ref2.filePath,fileContents=_ref2.fileContents,overwrite=_ref2.overwrite;var absoluteFilePath=_path()[\"default\"].join(nativeProjectRoot,filePath);if(overwrite||!_fs()[\"default\"].existsSync(absoluteFilePath)){// Create the file\n_fs()[\"default\"].writeFileSync(absoluteFilePath,fileContents,'utf8');}// `myapp`\nvar groupName=_path()[\"default\"].dirname(filePath);// Ensure the file is linked with Xcode resource files\nif(!project.hasFile(filePath)){project=(0,_Xcodeproj().addBuildSourceFileToGroup)({filepath:filePath,groupName:groupName,project:project});}return project;}","map":{"version":3,"sources":["../../src/ios/XcodeProjectFile.ts"],"names":["withBuildSourceFile","overwrite","config","projectName","createBuildSourceFile","project","nativeProjectRoot","fileContents","filePath","path","absoluteFilePath","fs","groupName","filepath"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addBuildSourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\n/**\n * Create a build source file and link it to Xcode.\n *\n * @param config\n * @param props.filePath relative to the build source folder. ex: `ViewController.swift` would be created in `ios/myapp/ViewController.swift`.\n * @param props.contents file contents to write.\n * @param props.overwrite should the contents overwrite any existing file in the same location on disk.\n * @returns\n */\nexport const withBuildSourceFile: ConfigPlugin<{\n  filePath: string;\n  contents: string;\n  overwrite?: boolean;\n}> = (config, { filePath, contents, overwrite }) => {\n  return withXcodeProject(config, config => {\n    const projectName = getProjectName(config.modRequest.projectRoot);\n\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: path.join(projectName, filePath),\n      overwrite,\n    });\n    return config;\n  });\n};\n\n/**\n * Add a source file to the Xcode project and write it to the file system.\n *\n * @param nativeProjectRoot absolute path to the native app root `user/app/ios`\n * @param filePath path relative to the `nativeProjectRoot` for the file to create `user/app/ios/myapp/foobar.swift`\n * @param fileContents string file contents to write to the `filePath`\n * @param overwrite should write file even if one already exists\n */\nexport function createBuildSourceFile({\n  project,\n  nativeProjectRoot,\n  filePath,\n  fileContents,\n  overwrite,\n}: {\n  project: XcodeProject;\n  nativeProjectRoot: string;\n  filePath: string;\n  fileContents: string;\n  overwrite?: boolean;\n}): XcodeProject {\n  const absoluteFilePath = path.join(nativeProjectRoot, filePath);\n  if (overwrite || !fs.existsSync(absoluteFilePath)) {\n    // Create the file\n    fs.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n\n  // `myapp`\n  const groupName = path.dirname(filePath);\n\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addBuildSourceFileToGroup({\n      filepath: filePath,\n      groupName,\n      project,\n    });\n  }\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}