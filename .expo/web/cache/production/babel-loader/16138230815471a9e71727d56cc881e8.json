{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _objectWithoutProperties=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");var _excluded=[\"com.apple.developer.associated-domains\"];function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.ensureApplicationTargetEntitlementsFileConfigured=ensureApplicationTargetEntitlementsFileConfigured;exports.getEntitlementsPath=getEntitlementsPath;exports.setAssociatedDomains=setAssociatedDomains;exports.withAssociatedDomains=void 0;function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _slash(){var data=_interopRequireDefault(require(\"slash\"));_slash=function _slash(){return data;};return data;}function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _Target(){var data=require(\"./Target\");_Target=function _Target(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _string(){var data=require(\"./utils/string\");_string=function _string(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var withAssociatedDomains=(0,_iosPlugins().createEntitlementsPlugin)(setAssociatedDomains,'withAssociatedDomains');exports.withAssociatedDomains=withAssociatedDomains;function setAssociatedDomains(config,_ref){var _=_ref['com.apple.developer.associated-domains'],entitlementsPlist=_objectWithoutProperties(_ref,_excluded);var _config$ios;if((_config$ios=config.ios)!==null&&_config$ios!==void 0&&_config$ios.associatedDomains){return _objectSpread(_objectSpread({},entitlementsPlist),{},{'com.apple.developer.associated-domains':config.ios.associatedDomains});}return entitlementsPlist;}function getEntitlementsPath(projectRoot){var _ref2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},targetName=_ref2.targetName,_ref2$buildConfigurat=_ref2.buildConfiguration,buildConfiguration=_ref2$buildConfigurat===void 0?'Release':_ref2$buildConfigurat;var project=(0,_Xcodeproj().getPbxproj)(projectRoot);var xcBuildConfiguration=(0,_Target().getXCBuildConfigurationFromPbxproj)(project,{targetName:targetName,buildConfiguration:buildConfiguration});if(!xcBuildConfiguration){return null;}var entitlementsPath=getEntitlementsPathFromBuildConfiguration(projectRoot,xcBuildConfiguration);return entitlementsPath&&_fs()[\"default\"].existsSync(entitlementsPath)?entitlementsPath:null;}function getEntitlementsPathFromBuildConfiguration(projectRoot,xcBuildConfiguration){var _xcBuildConfiguration;var entitlementsPathRaw=xcBuildConfiguration===null||xcBuildConfiguration===void 0?void 0:(_xcBuildConfiguration=xcBuildConfiguration.buildSettings)===null||_xcBuildConfiguration===void 0?void 0:_xcBuildConfiguration.CODE_SIGN_ENTITLEMENTS;if(entitlementsPathRaw){return _path()[\"default\"].normalize(_path()[\"default\"].join(projectRoot,'ios',(0,_string().trimQuotes)(entitlementsPathRaw)));}else{return null;}}function ensureApplicationTargetEntitlementsFileConfigured(projectRoot){var project=(0,_Xcodeproj().getPbxproj)(projectRoot);var projectName=(0,_Xcodeproj().getProjectName)(projectRoot);var productName=(0,_Xcodeproj().getProductName)(project);var _ref3=(0,_Target().findFirstNativeTarget)(project),_ref4=_slicedToArray(_ref3,2),applicationTarget=_ref4[1];var buildConfigurations=(0,_Xcodeproj().getBuildConfigurationsForListId)(project,applicationTarget.buildConfigurationList);var hasChangesToWrite=false;var _iterator=_createForOfIteratorHelper(buildConfigurations),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),xcBuildConfiguration=_step$value[1];var oldEntitlementPath=getEntitlementsPathFromBuildConfiguration(projectRoot,xcBuildConfiguration);if(oldEntitlementPath&&_fs()[\"default\"].existsSync(oldEntitlementPath)){return;}hasChangesToWrite=true;// Use posix formatted path, even on Windows\nvar entitlementsRelativePath=(0,_slash()[\"default\"])(_path()[\"default\"].join(projectName,\"\".concat(productName,\".entitlements\")));var entitlementsPath=_path()[\"default\"].normalize(_path()[\"default\"].join(projectRoot,'ios',entitlementsRelativePath));_fs()[\"default\"].mkdirSync(_path()[\"default\"].dirname(entitlementsPath),{recursive:true});if(!_fs()[\"default\"].existsSync(entitlementsPath)){_fs()[\"default\"].writeFileSync(entitlementsPath,ENTITLEMENTS_TEMPLATE);}xcBuildConfiguration.buildSettings.CODE_SIGN_ENTITLEMENTS=entitlementsRelativePath;}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(hasChangesToWrite){_fs()[\"default\"].writeFileSync(project.filepath,project.writeSync());}}var ENTITLEMENTS_TEMPLATE=\"\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n<dict>\\n</dict>\\n</plist>\\n\";","map":{"version":3,"sources":["../../src/ios/Entitlements.ts"],"names":["withAssociatedDomains","entitlementsPlist","config","associatedDomains","buildConfiguration","project","xcBuildConfiguration","targetName","entitlementsPath","getEntitlementsPathFromBuildConfiguration","fs","entitlementsPathRaw","path","projectName","productName","buildConfigurations","applicationTarget","hasChangesToWrite","oldEntitlementPath","entitlementsRelativePath","recursive","ENTITLEMENTS_TEMPLATE"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport fs from 'fs';\nimport path from 'path';\nimport slash from 'slash';\nimport { XCBuildConfiguration } from 'xcode';\n\nimport { createEntitlementsPlugin } from '../plugins/ios-plugins';\nimport { findFirstNativeTarget, getXCBuildConfigurationFromPbxproj } from './Target';\nimport {\n  getBuildConfigurationsForListId,\n  getPbxproj,\n  getProductName,\n  getProjectName,\n} from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\nexport const withAssociatedDomains = createEntitlementsPlugin(\n  setAssociatedDomains,\n  'withAssociatedDomains'\n);\n\nexport function setAssociatedDomains(\n  config: ExpoConfig,\n  { 'com.apple.developer.associated-domains': _, ...entitlementsPlist }: JSONObject\n): JSONObject {\n  if (config.ios?.associatedDomains) {\n    return {\n      ...entitlementsPlist,\n      'com.apple.developer.associated-domains': config.ios.associatedDomains,\n    };\n  }\n\n  return entitlementsPlist;\n}\n\nexport function getEntitlementsPath(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  const project = getPbxproj(projectRoot);\n  const xcBuildConfiguration = getXCBuildConfigurationFromPbxproj(project, {\n    targetName,\n    buildConfiguration,\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  const entitlementsPath = getEntitlementsPathFromBuildConfiguration(\n    projectRoot,\n    xcBuildConfiguration\n  );\n  return entitlementsPath && fs.existsSync(entitlementsPath) ? entitlementsPath : null;\n}\n\nfunction getEntitlementsPathFromBuildConfiguration(\n  projectRoot: string,\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const entitlementsPathRaw = xcBuildConfiguration?.buildSettings?.CODE_SIGN_ENTITLEMENTS as\n    | string\n    | undefined;\n  if (entitlementsPathRaw) {\n    return path.normalize(path.join(projectRoot, 'ios', trimQuotes(entitlementsPathRaw)));\n  } else {\n    return null;\n  }\n}\n\nexport function ensureApplicationTargetEntitlementsFileConfigured(projectRoot: string): void {\n  const project = getPbxproj(projectRoot);\n  const projectName = getProjectName(projectRoot);\n  const productName = getProductName(project);\n\n  const [, applicationTarget] = findFirstNativeTarget(project);\n  const buildConfigurations = getBuildConfigurationsForListId(\n    project,\n    applicationTarget.buildConfigurationList\n  );\n  let hasChangesToWrite = false;\n  for (const [, xcBuildConfiguration] of buildConfigurations) {\n    const oldEntitlementPath = getEntitlementsPathFromBuildConfiguration(\n      projectRoot,\n      xcBuildConfiguration\n    );\n    if (oldEntitlementPath && fs.existsSync(oldEntitlementPath)) {\n      return;\n    }\n    hasChangesToWrite = true;\n    // Use posix formatted path, even on Windows\n    const entitlementsRelativePath = slash(path.join(projectName, `${productName}.entitlements`));\n    const entitlementsPath = path.normalize(\n      path.join(projectRoot, 'ios', entitlementsRelativePath)\n    );\n    fs.mkdirSync(path.dirname(entitlementsPath), { recursive: true });\n    if (!fs.existsSync(entitlementsPath)) {\n      fs.writeFileSync(entitlementsPath, ENTITLEMENTS_TEMPLATE);\n    }\n    xcBuildConfiguration.buildSettings.CODE_SIGN_ENTITLEMENTS = entitlementsRelativePath;\n  }\n  if (hasChangesToWrite) {\n    fs.writeFileSync(project.filepath, project.writeSync());\n  }\n}\n\nconst ENTITLEMENTS_TEMPLATE = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n</dict>\n</plist>\n`;\n"]},"metadata":{},"sourceType":"script"}