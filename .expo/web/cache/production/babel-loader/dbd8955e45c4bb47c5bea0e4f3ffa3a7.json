{"ast":null,"code":"'use strict';var path=require('path');var emojisList=require('emojis-list');var getHashDigest=require('./getHashDigest');var emojiRegex=/[\\uD800-\\uDFFF]./;var emojiList=emojisList.filter(function(emoji){return emojiRegex.test(emoji);});var emojiCache={};function encodeStringToEmoji(content,length){if(emojiCache[content]){return emojiCache[content];}length=length||1;var emojis=[];do{if(!emojiList.length){throw new Error('Ran out of emoji');}var index=Math.floor(Math.random()*emojiList.length);emojis.push(emojiList[index]);emojiList.splice(index,1);}while(--length>0);var emojiEncoding=emojis.join('');emojiCache[content]=emojiEncoding;return emojiEncoding;}function interpolateName(loaderContext,name,options){var filename;var hasQuery=loaderContext.resourceQuery&&loaderContext.resourceQuery.length>1;if(typeof name==='function'){filename=name(loaderContext.resourcePath,hasQuery?loaderContext.resourceQuery:undefined);}else{filename=name||'[hash].[ext]';}var context=options.context;var content=options.content;var regExp=options.regExp;var ext='bin';var basename='file';var directory='';var folder='';var query='';if(loaderContext.resourcePath){var parsed=path.parse(loaderContext.resourcePath);var resourcePath=loaderContext.resourcePath;if(parsed.ext){ext=parsed.ext.substr(1);}if(parsed.dir){basename=parsed.name;resourcePath=parsed.dir+path.sep;}if(typeof context!=='undefined'){directory=path.relative(context,resourcePath+'_').replace(/\\\\/g,'/').replace(/\\.\\.(\\/)?/g,'_$1');directory=directory.substr(0,directory.length-1);}else{directory=resourcePath.replace(/\\\\/g,'/').replace(/\\.\\.(\\/)?/g,'_$1');}if(directory.length===1){directory='';}else if(directory.length>1){folder=path.basename(directory);}}if(loaderContext.resourceQuery&&loaderContext.resourceQuery.length>1){query=loaderContext.resourceQuery;var hashIdx=query.indexOf('#');if(hashIdx>=0){query=query.substr(0,hashIdx);}}var url=filename;if(content){// Match hash template\nurl=url// `hash` and `contenthash` are same in `loader-utils` context\n// let's keep `hash` for backward compatibility\n.replace(/\\[(?:([^:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi,function(all,hashType,digestType,maxLength){return getHashDigest(content,hashType,digestType,parseInt(maxLength,10));}).replace(/\\[emoji(?::(\\d+))?\\]/gi,function(all,length){return encodeStringToEmoji(content,parseInt(length,10));});}url=url.replace(/\\[ext\\]/gi,function(){return ext;}).replace(/\\[name\\]/gi,function(){return basename;}).replace(/\\[path\\]/gi,function(){return directory;}).replace(/\\[folder\\]/gi,function(){return folder;}).replace(/\\[query\\]/gi,function(){return query;});if(regExp&&loaderContext.resourcePath){var match=loaderContext.resourcePath.match(new RegExp(regExp));match&&match.forEach(function(matched,i){url=url.replace(new RegExp('\\\\['+i+'\\\\]','ig'),matched);});}if(typeof loaderContext.options==='object'&&typeof loaderContext.options.customInterpolateName==='function'){url=loaderContext.options.customInterpolateName.call(loaderContext,url,name,options);}return url;}module.exports=interpolateName;","map":{"version":3,"names":["path","require","emojisList","getHashDigest","emojiRegex","emojiList","filter","emoji","test","emojiCache","encodeStringToEmoji","content","length","emojis","Error","index","Math","floor","random","push","splice","emojiEncoding","join","interpolateName","loaderContext","name","options","filename","hasQuery","resourceQuery","resourcePath","undefined","context","regExp","ext","basename","directory","folder","query","parsed","parse","substr","dir","sep","relative","replace","hashIdx","indexOf","url","all","hashType","digestType","maxLength","parseInt","match","RegExp","forEach","matched","i","customInterpolateName","call","module","exports"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/@expo/webpack-config/node_modules/babel-loader/node_modules/loader-utils/lib/interpolateName.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst emojisList = require('emojis-list');\nconst getHashDigest = require('./getHashDigest');\n\nconst emojiRegex = /[\\uD800-\\uDFFF]./;\nconst emojiList = emojisList.filter((emoji) => emojiRegex.test(emoji));\nconst emojiCache = {};\n\nfunction encodeStringToEmoji(content, length) {\n  if (emojiCache[content]) {\n    return emojiCache[content];\n  }\n\n  length = length || 1;\n\n  const emojis = [];\n\n  do {\n    if (!emojiList.length) {\n      throw new Error('Ran out of emoji');\n    }\n\n    const index = Math.floor(Math.random() * emojiList.length);\n\n    emojis.push(emojiList[index]);\n    emojiList.splice(index, 1);\n  } while (--length > 0);\n\n  const emojiEncoding = emojis.join('');\n\n  emojiCache[content] = emojiEncoding;\n\n  return emojiEncoding;\n}\n\nfunction interpolateName(loaderContext, name, options) {\n  let filename;\n\n  const hasQuery =\n    loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n\n  if (typeof name === 'function') {\n    filename = name(\n      loaderContext.resourcePath,\n      hasQuery ? loaderContext.resourceQuery : undefined\n    );\n  } else {\n    filename = name || '[hash].[ext]';\n  }\n\n  const context = options.context;\n  const content = options.content;\n  const regExp = options.regExp;\n\n  let ext = 'bin';\n  let basename = 'file';\n  let directory = '';\n  let folder = '';\n  let query = '';\n\n  if (loaderContext.resourcePath) {\n    const parsed = path.parse(loaderContext.resourcePath);\n    let resourcePath = loaderContext.resourcePath;\n\n    if (parsed.ext) {\n      ext = parsed.ext.substr(1);\n    }\n\n    if (parsed.dir) {\n      basename = parsed.name;\n      resourcePath = parsed.dir + path.sep;\n    }\n\n    if (typeof context !== 'undefined') {\n      directory = path\n        .relative(context, resourcePath + '_')\n        .replace(/\\\\/g, '/')\n        .replace(/\\.\\.(\\/)?/g, '_$1');\n      directory = directory.substr(0, directory.length - 1);\n    } else {\n      directory = resourcePath.replace(/\\\\/g, '/').replace(/\\.\\.(\\/)?/g, '_$1');\n    }\n\n    if (directory.length === 1) {\n      directory = '';\n    } else if (directory.length > 1) {\n      folder = path.basename(directory);\n    }\n  }\n\n  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n    query = loaderContext.resourceQuery;\n\n    const hashIdx = query.indexOf('#');\n\n    if (hashIdx >= 0) {\n      query = query.substr(0, hashIdx);\n    }\n  }\n\n  let url = filename;\n\n  if (content) {\n    // Match hash template\n    url = url\n      // `hash` and `contenthash` are same in `loader-utils` context\n      // let's keep `hash` for backward compatibility\n      .replace(\n        /\\[(?:([^:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi,\n        (all, hashType, digestType, maxLength) =>\n          getHashDigest(content, hashType, digestType, parseInt(maxLength, 10))\n      )\n      .replace(/\\[emoji(?::(\\d+))?\\]/gi, (all, length) =>\n        encodeStringToEmoji(content, parseInt(length, 10))\n      );\n  }\n\n  url = url\n    .replace(/\\[ext\\]/gi, () => ext)\n    .replace(/\\[name\\]/gi, () => basename)\n    .replace(/\\[path\\]/gi, () => directory)\n    .replace(/\\[folder\\]/gi, () => folder)\n    .replace(/\\[query\\]/gi, () => query);\n\n  if (regExp && loaderContext.resourcePath) {\n    const match = loaderContext.resourcePath.match(new RegExp(regExp));\n\n    match &&\n      match.forEach((matched, i) => {\n        url = url.replace(new RegExp('\\\\[' + i + '\\\\]', 'ig'), matched);\n      });\n  }\n\n  if (\n    typeof loaderContext.options === 'object' &&\n    typeof loaderContext.options.customInterpolateName === 'function'\n  ) {\n    url = loaderContext.options.customInterpolateName.call(\n      loaderContext,\n      url,\n      name,\n      options\n    );\n  }\n\n  return url;\n}\n\nmodule.exports = interpolateName;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}