{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck\");var _inherits=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.createClientEnvironment=void 0;var getenv_1=require(\"getenv\");var semver_1=__importDefault(require(\"semver\"));var webpack_1=require(\"webpack\");var env_1=require(\"../env\");var RESTRICTED_MANIFEST_FIELDS=[// Omit app.json properties that get removed during the native build\n'facebookScheme','facebookAppId','facebookDisplayName',// Remove iOS and Android.\n'ios','android',// Hide internal / build values\n'plugins','hooks','_internal',// Remove metro-specific values\n'assetBundlePatterns'];function createEnvironmentConstants(appManifest){var _a;var publicManifest=_objectSpread(_objectSpread({},appManifest),{},{// @ts-ignore: displayName doesn't exist on ExpoConfig\nname:appManifest.displayName||appManifest.name,// Use the PWA `manifest.json` as the native web manifest.\nweb:{// Pass through config properties that are not stored in the\n// PWA `manifest.json`, but still need to be accessible\n// through `Constants.manifest`.\nconfig:(_a=appManifest.web)===null||_a===void 0?void 0:_a.config}});var _iterator=_createForOfIteratorHelper(RESTRICTED_MANIFEST_FIELDS),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var field=_step.value;delete publicManifest[field];}}catch(err){_iterator.e(err);}finally{_iterator.f();}return publicManifest;}/**\n * Create the global environment variables to surface in the project. Also creates the `__DEV__` boolean to provide better parity with Metro bundler.\n *\n * @param mode defines the Metro bundler `global.__DEV__` value.\n * @param publicPath passed as `process.env.PUBLIC_URL` to the app.\n * @param nativeAppManifest public values to be used in `expo-constants`.\n * @internal\n */function createClientEnvironment(mode,publicPath,nativeAppManifest){var _Object$keys$filter$r;var environment=(0,env_1.getMode)({mode:mode});var __DEV__=environment!=='production';// Adding the env variables to the Expo manifest is unsafe.\n// This feature is deprecated in SDK 41 forward.\nvar isEnvBindingSupported=lteSdkVersion(nativeAppManifest,'40.0.0');var ENV_VAR_REGEX=isEnvBindingSupported?/^(EXPO_|REACT_NATIVE_|CI$)/i:/^(CI$)/i;var SECRET_REGEX=/(PASSWORD|SECRET|TOKEN)/i;var shouldDefineKeys=(0,getenv_1.boolish)('EXPO_WEBPACK_DEFINE_ENVIRONMENT_AS_KEYS',false);var prefix=shouldDefineKeys?'process.env.':'';var processEnv=Object.keys(process.env).filter(function(key){return ENV_VAR_REGEX.test(key)&&!SECRET_REGEX.test(key);}).reduce(function(env,key){env[\"\".concat(prefix).concat(key)]=JSON.stringify(process.env[key]);return env;},(_Object$keys$filter$r={},_defineProperty(_Object$keys$filter$r,\"\".concat(prefix,\"NODE_ENV\"),JSON.stringify(environment)),_defineProperty(_Object$keys$filter$r,\"\".concat(prefix,\"PUBLIC_URL\"),JSON.stringify(publicPath)),_defineProperty(_Object$keys$filter$r,\"\".concat(prefix,\"APP_MANIFEST\"),JSON.stringify(nativeAppManifest)),_Object$keys$filter$r));if(shouldDefineKeys){return _objectSpread(_objectSpread({},processEnv),{},{__DEV__:__DEV__});}return{'process.env':processEnv,__DEV__:__DEV__};}exports.createClientEnvironment=createClientEnvironment;/**\n * Required for `expo-constants` https://docs.expo.dev/versions/latest/sdk/constants/.\n * This surfaces the `app.json` (config) as an environment variable which is then parsed by `expo-constants`.\n * @category plugins\n */var DefinePlugin=/*#__PURE__*/function(_webpack_1$DefinePlug){_inherits(DefinePlugin,_webpack_1$DefinePlug);var _super=_createSuper(DefinePlugin);function DefinePlugin(_ref){var mode=_ref.mode,publicUrl=_ref.publicUrl,config=_ref.config;_classCallCheck(this,DefinePlugin);var publicAppManifest=createEnvironmentConstants(config);var environmentVariables=createClientEnvironment(mode,publicUrl,publicAppManifest);return _super.call(this,environmentVariables);}return DefinePlugin;}(webpack_1.DefinePlugin);exports[\"default\"]=DefinePlugin;DefinePlugin.createClientEnvironment=createClientEnvironment;DefinePlugin.fromEnv=function(env){var mode=(0,env_1.getMode)(env);var _ref2=(0,env_1.getPublicPaths)(env),publicUrl=_ref2.publicUrl;var config=env.config||(0,env_1.getConfig)(env);return new DefinePlugin({mode:mode,publicUrl:publicUrl,config:config});};function lteSdkVersion(exp,sdkVersion){if(!exp.sdkVersion){return false;}if(exp.sdkVersion==='UNVERSIONED'){return false;}try{return semver_1[\"default\"].lte(exp.sdkVersion,sdkVersion);}catch(_unused){return false;}}","map":{"version":3,"sources":["../../src/plugins/ExpoDefinePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { boolish } from 'getenv';\nimport semver from 'semver';\nimport { DefinePlugin as OriginalDefinePlugin } from 'webpack';\n\nimport { getConfig, getMode, getPublicPaths } from '../env';\nimport { Environment, Mode } from '../types';\n\nconst RESTRICTED_MANIFEST_FIELDS = [\n  // Omit app.json properties that get removed during the native build\n  'facebookScheme',\n  'facebookAppId',\n  'facebookDisplayName',\n  // Remove iOS and Android.\n  'ios',\n  'android',\n  // Hide internal / build values\n  'plugins',\n  'hooks',\n  '_internal',\n  // Remove metro-specific values\n  'assetBundlePatterns',\n];\n\nfunction createEnvironmentConstants(appManifest: ExpoConfig) {\n  const publicManifest: Record<string, any> = {\n    ...appManifest,\n    // @ts-ignore: displayName doesn't exist on ExpoConfig\n    name: appManifest.displayName || appManifest.name,\n    // Use the PWA `manifest.json` as the native web manifest.\n    web: {\n      // Pass through config properties that are not stored in the\n      // PWA `manifest.json`, but still need to be accessible\n      // through `Constants.manifest`.\n      config: appManifest.web?.config,\n    },\n  };\n\n  for (const field of RESTRICTED_MANIFEST_FIELDS) {\n    delete publicManifest[field];\n  }\n  return publicManifest;\n}\n\n/**\n * @internal\n */\nexport interface ClientEnv {\n  [key: string]: OriginalDefinePlugin.CodeValueObject;\n}\n\n/**\n * Create the global environment variables to surface in the project. Also creates the `__DEV__` boolean to provide better parity with Metro bundler.\n *\n * @param mode defines the Metro bundler `global.__DEV__` value.\n * @param publicPath passed as `process.env.PUBLIC_URL` to the app.\n * @param nativeAppManifest public values to be used in `expo-constants`.\n * @internal\n */\nexport function createClientEnvironment(\n  mode: Mode,\n  publicPath: string,\n  nativeAppManifest: ExpoConfig\n): ClientEnv {\n  const environment = getMode({ mode });\n  const __DEV__ = environment !== 'production';\n\n  // Adding the env variables to the Expo manifest is unsafe.\n  // This feature is deprecated in SDK 41 forward.\n  const isEnvBindingSupported = lteSdkVersion(nativeAppManifest, '40.0.0');\n  const ENV_VAR_REGEX = isEnvBindingSupported ? /^(EXPO_|REACT_NATIVE_|CI$)/i : /^(CI$)/i;\n  const SECRET_REGEX = /(PASSWORD|SECRET|TOKEN)/i;\n\n  const shouldDefineKeys = boolish('EXPO_WEBPACK_DEFINE_ENVIRONMENT_AS_KEYS', false);\n\n  const prefix = shouldDefineKeys ? 'process.env.' : '';\n\n  const processEnv = Object.keys(process.env)\n    .filter(key => ENV_VAR_REGEX.test(key) && !SECRET_REGEX.test(key))\n    .reduce(\n      (env, key) => {\n        env[`${prefix}${key}`] = JSON.stringify(process.env[key]);\n        return env;\n      },\n      {\n        /**\n         * Useful for determining whether we’re running in production mode.\n         * Most importantly, it switches React into the correct mode.\n         */\n        [`${prefix}NODE_ENV`]: JSON.stringify(environment),\n\n        /**\n         * Useful for resolving the correct path to static assets in `public`.\n         * For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n         * This should only be used as an escape hatch. Normally you would put\n         * images into the root folder and `import` them in code to get their paths.\n         */\n        [`${prefix}PUBLIC_URL`]: JSON.stringify(publicPath),\n\n        /**\n         * Surfaces the `app.json` (config) as an environment variable which is then parsed by\n         * `expo-constants` https://docs.expo.dev/versions/latest/sdk/constants/\n         */\n        [`${prefix}APP_MANIFEST`]: JSON.stringify(nativeAppManifest),\n      } as Record<string, string>\n    );\n\n  if (shouldDefineKeys) {\n    return {\n      ...processEnv,\n      __DEV__,\n    };\n  }\n\n  return {\n    'process.env': processEnv,\n    __DEV__,\n  };\n}\n\n/**\n * Required for `expo-constants` https://docs.expo.dev/versions/latest/sdk/constants/.\n * This surfaces the `app.json` (config) as an environment variable which is then parsed by `expo-constants`.\n * @category plugins\n */\nexport default class DefinePlugin extends OriginalDefinePlugin {\n  static createClientEnvironment = createClientEnvironment;\n  static fromEnv = (\n    env: Pick<Environment, 'projectRoot' | 'mode' | 'config' | 'locations'>\n  ): DefinePlugin => {\n    const mode = getMode(env);\n    const { publicUrl } = getPublicPaths(env);\n    const config = env.config || getConfig(env);\n    return new DefinePlugin({\n      mode,\n      publicUrl,\n      config,\n    });\n  };\n\n  constructor({ mode, publicUrl, config }: { mode: Mode; publicUrl: string; config: ExpoConfig }) {\n    const publicAppManifest = createEnvironmentConstants(config);\n\n    const environmentVariables = createClientEnvironment(mode, publicUrl, publicAppManifest as any);\n\n    super(environmentVariables);\n  }\n}\n\nfunction lteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(exp.sdkVersion, sdkVersion);\n  } catch {\n    return false;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}