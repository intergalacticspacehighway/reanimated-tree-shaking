{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getGoogleServicesFile=getGoogleServicesFile;exports.getGoogleSignInReservedClientId=getGoogleSignInReservedClientId;exports.setGoogleConfig=setGoogleConfig;exports.setGoogleServicesFile=setGoogleServicesFile;exports.setGoogleSignInReservedClientId=setGoogleSignInReservedClientId;exports.withGoogleServicesFile=exports.withGoogle=void 0;function _plist(){var data=_interopRequireDefault(require(\"@expo/plist\"));_plist=function _plist(){return data;};return data;}function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _Paths(){var data=require(\"./Paths\");_Paths=function _Paths(){return data;};return data;}function _Scheme(){var data=require(\"./Scheme\");_Scheme=function _Scheme(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var withGoogle=function withGoogle(config){return(0,_iosPlugins().withInfoPlist)(config,function(config){config.modResults=setGoogleConfig(config,config.modResults,config.modRequest);return config;});};exports.withGoogle=withGoogle;var withGoogleServicesFile=function withGoogleServicesFile(config){return(0,_iosPlugins().withXcodeProject)(config,function(config){config.modResults=setGoogleServicesFile(config,{projectRoot:config.modRequest.projectRoot,project:config.modResults});return config;});};exports.withGoogleServicesFile=withGoogleServicesFile;function readGoogleServicesInfoPlist(relativePath,_ref){var projectRoot=_ref.projectRoot;var googleServiceFilePath=_path()[\"default\"].resolve(projectRoot,relativePath);var contents=_fs()[\"default\"].readFileSync(googleServiceFilePath,'utf8');(0,_assert()[\"default\"])(contents,'GoogleService-Info.plist is empty');return _plist()[\"default\"].parse(contents);}function getGoogleSignInReservedClientId(config,modRequest){var _config$ios$config$go,_config$ios,_config$ios$config,_config$ios$config$go2,_infoPlist$REVERSED_C;var reservedClientId=(_config$ios$config$go=(_config$ios=config.ios)===null||_config$ios===void 0?void 0:(_config$ios$config=_config$ios.config)===null||_config$ios$config===void 0?void 0:(_config$ios$config$go2=_config$ios$config.googleSignIn)===null||_config$ios$config$go2===void 0?void 0:_config$ios$config$go2.reservedClientId)!==null&&_config$ios$config$go!==void 0?_config$ios$config$go:null;if(reservedClientId){return reservedClientId;}var googleServicesFileRelativePath=getGoogleServicesFile(config);if(googleServicesFileRelativePath===null){return null;}var infoPlist=readGoogleServicesInfoPlist(googleServicesFileRelativePath,modRequest);return(_infoPlist$REVERSED_C=infoPlist.REVERSED_CLIENT_ID)!==null&&_infoPlist$REVERSED_C!==void 0?_infoPlist$REVERSED_C:null;}function getGoogleServicesFile(config){var _config$ios$googleSer,_config$ios2;return(_config$ios$googleSer=(_config$ios2=config.ios)===null||_config$ios2===void 0?void 0:_config$ios2.googleServicesFile)!==null&&_config$ios$googleSer!==void 0?_config$ios$googleSer:null;}function setGoogleSignInReservedClientId(config,infoPlist,modRequest){var reservedClientId=getGoogleSignInReservedClientId(config,modRequest);if(reservedClientId===null){return infoPlist;}return(0,_Scheme().appendScheme)(reservedClientId,infoPlist);}function setGoogleConfig(config,infoPlist,modRequest){infoPlist=setGoogleSignInReservedClientId(config,infoPlist,modRequest);return infoPlist;}function setGoogleServicesFile(config,_ref2){var projectRoot=_ref2.projectRoot,project=_ref2.project;var googleServicesFileRelativePath=getGoogleServicesFile(config);if(googleServicesFileRelativePath===null){return project;}var googleServiceFilePath=_path()[\"default\"].resolve(projectRoot,googleServicesFileRelativePath);_fs()[\"default\"].copyFileSync(googleServiceFilePath,_path()[\"default\"].join((0,_Paths().getSourceRoot)(projectRoot),'GoogleService-Info.plist'));var projectName=(0,_Xcodeproj().getProjectName)(projectRoot);var plistFilePath=\"\".concat(projectName,\"/GoogleService-Info.plist\");if(!project.hasFile(plistFilePath)){project=(0,_Xcodeproj().addResourceFileToGroup)({filepath:plistFilePath,groupName:projectName,project:project,isBuildFile:true,verbose:true});}return project;}","map":{"version":3,"sources":["../../src/ios/Google.ts"],"names":["withGoogle","config","setGoogleConfig","withGoogleServicesFile","setGoogleServicesFile","projectRoot","project","modResults","googleServiceFilePath","path","contents","fs","plist","reservedClientId","googleServicesFileRelativePath","getGoogleServicesFile","infoPlist","readGoogleServicesInfoPlist","getGoogleSignInReservedClientId","setGoogleSignInReservedClientId","projectName","plistFilePath","filepath","groupName","isBuildFile","verbose"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, ModProps } from '../Plugin.types';\nimport { withInfoPlist, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle: ConfigPlugin = config => {\n  return withInfoPlist(config, config => {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\n\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nfunction readGoogleServicesInfoPlist(\n  relativePath: string,\n  { projectRoot }: { projectRoot: string }\n) {\n  const googleServiceFilePath = path.resolve(projectRoot, relativePath);\n  const contents = fs.readFileSync(googleServiceFilePath, 'utf8');\n  assert(contents, 'GoogleService-Info.plist is empty');\n  return plist.parse(contents);\n}\n\nexport function getGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): string | null {\n  const reservedClientId = config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n  if (reservedClientId) {\n    return reservedClientId;\n  }\n\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n\n  const infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n\n  return infoPlist.REVERSED_CLIENT_ID ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config, modRequest);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: ModProps<InfoPlist>\n): InfoPlist {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n      verbose: true,\n    });\n  }\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}