{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.Config=void 0;exports.areVersionsSynced=areVersionsSynced;exports.ensureBuildGradleContainsConfigurationScript=ensureBuildGradleContainsConfigurationScript;exports.formatApplyLineForBuildGradle=formatApplyLineForBuildGradle;exports.isBuildGradleConfigured=isBuildGradleConfigured;exports.isMainApplicationMetaDataSet=isMainApplicationMetaDataSet;exports.isMainApplicationMetaDataSynced=isMainApplicationMetaDataSynced;exports.setUpdatesConfig=setUpdatesConfig;exports.setVersionsConfig=setVersionsConfig;exports.withUpdates=void 0;function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _resolveFrom(){var data=_interopRequireDefault(require(\"resolve-from\"));_resolveFrom=function _resolveFrom(){return data;};return data;}function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _Updates(){var data=require(\"../utils/Updates\");_Updates=function _Updates(){return data;};return data;}function _Manifest(){var data=require(\"./Manifest\");_Manifest=function _Manifest(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var CREATE_MANIFEST_ANDROID_PATH='expo-updates/scripts/create-manifest-android.gradle';var Config;exports.Config=Config;(function(Config){Config[\"ENABLED\"]=\"expo.modules.updates.ENABLED\";Config[\"CHECK_ON_LAUNCH\"]=\"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH\";Config[\"LAUNCH_WAIT_MS\"]=\"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS\";Config[\"SDK_VERSION\"]=\"expo.modules.updates.EXPO_SDK_VERSION\";Config[\"RUNTIME_VERSION\"]=\"expo.modules.updates.EXPO_RUNTIME_VERSION\";Config[\"UPDATE_URL\"]=\"expo.modules.updates.EXPO_UPDATE_URL\";Config[\"RELEASE_CHANNEL\"]=\"expo.modules.updates.EXPO_RELEASE_CHANNEL\";Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"]=\"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\";Config[\"CODE_SIGNING_CERTIFICATE\"]=\"expo.modules.updates.CODE_SIGNING_CERTIFICATE\";Config[\"CODE_SIGNING_METADATA\"]=\"expo.modules.updates.CODE_SIGNING_METADATA\";})(Config||(exports.Config=Config={}));var withUpdates=function withUpdates(config,_ref){var expoUsername=_ref.expoUsername;return(0,_androidPlugins().withAndroidManifest)(config,function(config){var projectRoot=config.modRequest.projectRoot;var expoUpdatesPackageVersion=(0,_Updates().getExpoUpdatesPackageVersion)(projectRoot);config.modResults=setUpdatesConfig(projectRoot,config,config.modResults,expoUsername,expoUpdatesPackageVersion);return config;});};exports.withUpdates=withUpdates;function setUpdatesConfig(projectRoot,config,androidManifest,username,expoUpdatesPackageVersion){var mainApplication=(0,_Manifest().getMainApplicationOrThrow)(androidManifest);(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.ENABLED,String((0,_Updates().getUpdatesEnabled)(config)));(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.CHECK_ON_LAUNCH,(0,_Updates().getUpdatesCheckOnLaunch)(config,expoUpdatesPackageVersion));(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.LAUNCH_WAIT_MS,String((0,_Updates().getUpdatesTimeout)(config)));var updateUrl=(0,_Updates().getUpdateUrl)(config,username);if(updateUrl){(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.UPDATE_URL,updateUrl);}else{(0,_Manifest().removeMetaDataItemFromMainApplication)(mainApplication,Config.UPDATE_URL);}var codeSigningCertificate=(0,_Updates().getUpdatesCodeSigningCertificate)(projectRoot,config);if(codeSigningCertificate){(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.CODE_SIGNING_CERTIFICATE,codeSigningCertificate);}else{(0,_Manifest().removeMetaDataItemFromMainApplication)(mainApplication,Config.CODE_SIGNING_CERTIFICATE);}var codeSigningMetadata=(0,_Updates().getUpdatesCodeSigningMetadataStringified)(config);if(codeSigningMetadata){(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.CODE_SIGNING_METADATA,codeSigningMetadata);}else{(0,_Manifest().removeMetaDataItemFromMainApplication)(mainApplication,Config.CODE_SIGNING_METADATA);}return setVersionsConfig(config,androidManifest);}function setVersionsConfig(config,androidManifest){var mainApplication=(0,_Manifest().getMainApplicationOrThrow)(androidManifest);var runtimeVersion=(0,_Updates().getRuntimeVersionNullable)(config,'android');if(!runtimeVersion&&(0,_Manifest().findMetaDataItem)(mainApplication,Config.RUNTIME_VERSION)>-1){throw new Error('A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.');}var sdkVersion=(0,_Updates().getSDKVersion)(config);if(runtimeVersion){(0,_Manifest().removeMetaDataItemFromMainApplication)(mainApplication,Config.SDK_VERSION);(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.RUNTIME_VERSION,runtimeVersion);}else if(sdkVersion){/**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */(0,_Manifest().removeMetaDataItemFromMainApplication)(mainApplication,Config.RUNTIME_VERSION);(0,_Manifest().addMetaDataItemToMainApplication)(mainApplication,Config.SDK_VERSION,sdkVersion);}else{(0,_Manifest().removeMetaDataItemFromMainApplication)(mainApplication,Config.RUNTIME_VERSION);(0,_Manifest().removeMetaDataItemFromMainApplication)(mainApplication,Config.SDK_VERSION);}return androidManifest;}function ensureBuildGradleContainsConfigurationScript(projectRoot,buildGradleContents){if(!isBuildGradleConfigured(projectRoot,buildGradleContents)){var cleanedUpBuildGradleContents;var isBuildGradleMisconfigured=buildGradleContents.split('\\n').some(function(line){return line.includes(CREATE_MANIFEST_ANDROID_PATH);});if(isBuildGradleMisconfigured){cleanedUpBuildGradleContents=buildGradleContents.replace(new RegExp(\"(\\n// Integration with Expo updates)?\\n.*\".concat(CREATE_MANIFEST_ANDROID_PATH,\".*\\n\")),'');}else{cleanedUpBuildGradleContents=buildGradleContents;}var gradleScriptApply=formatApplyLineForBuildGradle(projectRoot);return\"\".concat(cleanedUpBuildGradleContents,\"\\n// Integration with Expo updates\\n\").concat(gradleScriptApply,\"\\n\");}else{return buildGradleContents;}}function formatApplyLineForBuildGradle(projectRoot){var updatesGradleScriptPath=_resolveFrom()[\"default\"].silent(projectRoot,CREATE_MANIFEST_ANDROID_PATH);if(!updatesGradleScriptPath){throw new Error(\"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");}var relativePath=_path()[\"default\"].relative(_path()[\"default\"].join(projectRoot,'android','app'),updatesGradleScriptPath);var posixPath=process.platform==='win32'?relativePath.replace(/\\\\/g,'/'):relativePath;return\"apply from: \\\"\".concat(posixPath,\"\\\"\");}function isBuildGradleConfigured(projectRoot,buildGradleContents){var androidBuildScript=formatApplyLineForBuildGradle(projectRoot);return buildGradleContents.replace(/\\r\\n/g,'\\n').split('\\n')// Check for both single and double quotes\n.some(function(line){return line===androidBuildScript||line===androidBuildScript.replace(/\"/g,\"'\");});}function isMainApplicationMetaDataSet(androidManifest){var updateUrl=(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.UPDATE_URL);var runtimeVersion=(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.RUNTIME_VERSION);var sdkVersion=(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.SDK_VERSION);return Boolean(updateUrl&&(sdkVersion||runtimeVersion));}function isMainApplicationMetaDataSynced(projectRoot,config,androidManifest,username){return(0,_Updates().getUpdateUrl)(config,username)===(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.UPDATE_URL)&&String((0,_Updates().getUpdatesEnabled)(config))===(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.ENABLED)&&String((0,_Updates().getUpdatesTimeout)(config))===(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.LAUNCH_WAIT_MS)&&(0,_Updates().getUpdatesCheckOnLaunch)(config)===(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.CHECK_ON_LAUNCH)&&(0,_Updates().getUpdatesCodeSigningCertificate)(projectRoot,config)===(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.CODE_SIGNING_CERTIFICATE)&&(0,_Updates().getUpdatesCodeSigningMetadataStringified)(config)===(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.CODE_SIGNING_METADATA)&&areVersionsSynced(config,androidManifest);}function areVersionsSynced(config,androidManifest){var expectedRuntimeVersion=(0,_Updates().getRuntimeVersionNullable)(config,'android');var expectedSdkVersion=(0,_Updates().getSDKVersion)(config);var currentRuntimeVersion=(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.RUNTIME_VERSION);var currentSdkVersion=(0,_Manifest().getMainApplicationMetaDataValue)(androidManifest,Config.SDK_VERSION);if(expectedRuntimeVersion!==null){return currentRuntimeVersion===expectedRuntimeVersion&&currentSdkVersion===null;}else if(expectedSdkVersion!==null){return currentSdkVersion===expectedSdkVersion&&currentRuntimeVersion===null;}else{return true;}}","map":{"version":3,"sources":["../../src/android/Updates.ts"],"names":["CREATE_MANIFEST_ANDROID_PATH","Config","withUpdates","expoUsername","config","projectRoot","expoUpdatesPackageVersion","setUpdatesConfig","mainApplication","String","updateUrl","codeSigningCertificate","codeSigningMetadata","setVersionsConfig","runtimeVersion","sdkVersion","isBuildGradleConfigured","isBuildGradleMisconfigured","buildGradleContents","line","cleanedUpBuildGradleContents","gradleScriptApply","formatApplyLineForBuildGradle","updatesGradleScriptPath","resolveFrom","relativePath","path","posixPath","process","androidBuildScript","Boolean","areVersionsSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadataStringified,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  findMetaDataItem,\n  getMainApplicationMetaDataValue,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\n\nconst CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY',\n  CODE_SIGNING_CERTIFICATE = 'expo.modules.updates.CODE_SIGNING_CERTIFICATE',\n  CODE_SIGNING_METADATA = 'expo.modules.updates.CODE_SIGNING_METADATA',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withAndroidManifest(config, config => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_CERTIFICATE,\n      codeSigningCertificate\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_CERTIFICATE);\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadataStringified(config);\n  if (codeSigningMetadata) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_METADATA,\n      codeSigningMetadata\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_METADATA);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexport function setVersionsConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'android');\n  if (!runtimeVersion && findMetaDataItem(mainApplication, Config.RUNTIME_VERSION) > -1) {\n    throw new Error(\n      'A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\nexport function ensureBuildGradleContainsConfigurationScript(\n  projectRoot: string,\n  buildGradleContents: string\n): string {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    let cleanedUpBuildGradleContents;\n\n    const isBuildGradleMisconfigured = buildGradleContents\n      .split('\\n')\n      .some(line => line.includes(CREATE_MANIFEST_ANDROID_PATH));\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(\n        new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`),\n        ''\n      );\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    const gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexport function formatApplyLineForBuildGradle(projectRoot: string): string {\n  const updatesGradleScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(\n    path.join(projectRoot, 'android', 'app'),\n    updatesGradleScriptPath\n  );\n  const posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n\n  return `apply from: \"${posixPath}\"`;\n}\n\nexport function isBuildGradleConfigured(projectRoot: string, buildGradleContents: string): boolean {\n  const androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n\n  return (\n    buildGradleContents\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function isMainApplicationMetaDataSet(androidManifest: AndroidManifest): boolean {\n  const updateUrl = getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  const runtimeVersion = getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  const sdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexport function isMainApplicationMetaDataSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) &&\n    String(getUpdatesEnabled(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) &&\n    String(getUpdatesTimeout(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) &&\n    getUpdatesCheckOnLaunch(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_CERTIFICATE) &&\n    getUpdatesCodeSigningMetadataStringified(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_METADATA) &&\n    areVersionsSynced(config, androidManifest)\n  );\n}\n\nexport function areVersionsSynced(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion' | 'sdkVersion'>,\n  androidManifest: AndroidManifest\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'android');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = getMainApplicationMetaDataValue(\n    androidManifest,\n    Config.RUNTIME_VERSION\n  );\n  const currentSdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}