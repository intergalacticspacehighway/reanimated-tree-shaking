{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.formatDeviceFamilies=formatDeviceFamilies;exports.getDeviceFamilies=getDeviceFamilies;exports.getIsTabletOnly=getIsTabletOnly;exports.getSupportsTablet=getSupportsTablet;exports.setDeviceFamily=setDeviceFamily;exports.withDeviceFamily=void 0;function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}var withDeviceFamily=function withDeviceFamily(config){return(0,_iosPlugins().withXcodeProject)(config,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return setDeviceFamily(config,{project:config.modResults});case 2:config.modResults=_context.sent;return _context.abrupt(\"return\",config);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};exports.withDeviceFamily=withDeviceFamily;function getSupportsTablet(config){var _config$ios;return!!((_config$ios=config.ios)!==null&&_config$ios!==void 0&&_config$ios.supportsTablet);}function getIsTabletOnly(config){var _config$ios2;return!!(config!==null&&config!==void 0&&(_config$ios2=config.ios)!==null&&_config$ios2!==void 0&&_config$ios2.isTabletOnly);}function getDeviceFamilies(config){var _config$ios3;var supportsTablet=getSupportsTablet(config);var isTabletOnly=getIsTabletOnly(config);if(isTabletOnly&&((_config$ios3=config.ios)===null||_config$ios3===void 0?void 0:_config$ios3.supportsTablet)===false){(0,_warnings().addWarningIOS)('ios.supportsTablet',\"Found contradictory values: `{ ios: { isTabletOnly: true, supportsTablet: false } }`. Using `{ isTabletOnly: true }`.\");}// 1 is iPhone, 2 is iPad\nif(isTabletOnly){return[2];}else if(supportsTablet){return[1,2];}else{// is iPhone only\nreturn[1];}}/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n *\n * @param deviceFamilies\n */function formatDeviceFamilies(deviceFamilies){return\"\\\"\".concat(deviceFamilies.join(','),\"\\\"\");}/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */function setDeviceFamily(config,_ref2){var project=_ref2.project;var deviceFamilies=formatDeviceFamilies(getDeviceFamilies(config));var configurations=project.pbxXCBuildConfigurationSection();// @ts-ignore\nfor(var _i=0,_Object$values=Object.values(configurations||{});_i<_Object$values.length;_i++){var buildSettings=_Object$values[_i].buildSettings;// Guessing that this is the best way to emulate Xcode.\n// Using `project.addToBuildSettings` modifies too many targets.\nif(typeof(buildSettings===null||buildSettings===void 0?void 0:buildSettings.PRODUCT_NAME)!=='undefined'){buildSettings.TARGETED_DEVICE_FAMILY=deviceFamilies;}}return project;}","map":{"version":3,"sources":["../../src/ios/DeviceFamily.ts"],"names":["withDeviceFamily","config","setDeviceFamily","project","modResults","supportsTablet","getSupportsTablet","isTabletOnly","getIsTabletOnly","deviceFamilies","formatDeviceFamilies","getDeviceFamilies","configurations","buildSettings","Object"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\n\nexport const withDeviceFamily: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setDeviceFamily(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getSupportsTablet(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config.ios?.supportsTablet;\n}\n\nexport function getIsTabletOnly(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config?.ios?.isTabletOnly;\n}\n\nexport function getDeviceFamilies(config: Pick<ExpoConfig, 'ios'>): number[] {\n  const supportsTablet = getSupportsTablet(config);\n  const isTabletOnly = getIsTabletOnly(config);\n\n  if (isTabletOnly && config.ios?.supportsTablet === false) {\n    addWarningIOS(\n      'ios.supportsTablet',\n      `Found contradictory values: \\`{ ios: { isTabletOnly: true, supportsTablet: false } }\\`. Using \\`{ isTabletOnly: true }\\`.`\n    );\n  }\n\n  // 1 is iPhone, 2 is iPad\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    // is iPhone only\n    return [1];\n  }\n}\n\n/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n *\n * @param deviceFamilies\n */\nexport function formatDeviceFamilies(deviceFamilies: number[]): string {\n  return `\"${deviceFamilies.join(',')}\"`;\n}\n\n/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */\nexport function setDeviceFamily(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}