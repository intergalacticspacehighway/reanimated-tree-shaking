{"ast":null,"code":"\"use strict\";var _objectWithoutProperties=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var _excluded=[\"providers\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getIosModFileProviders=getIosModFileProviders;exports.withIosBaseMods=withIosBaseMods;function _jsonFile(){var data=_interopRequireDefault(require(\"@expo/json-file\"));_jsonFile=function _jsonFile(){return data;};return data;}function _plist(){var data=_interopRequireDefault(require(\"@expo/plist\"));_plist=function _plist(){return data;};return data;}function _assert(){var data=_interopRequireDefault(require(\"assert\"));_assert=function _assert(){return data;};return data;}function _fs(){var data=_interopRequireWildcard(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _xcode(){var data=_interopRequireDefault(require(\"xcode\"));_xcode=function _xcode(){return data;};return data;}function _ios(){var data=require(\"../ios\");_ios=function _ios(){return data;};return data;}function _Entitlements(){var data=require(\"../ios/Entitlements\");_Entitlements=function _Entitlements(){return data;};return data;}function _Xcodeproj(){var data=require(\"../ios/utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _getInfoPlistPath(){var data=require(\"../ios/utils/getInfoPlistPath\");_getInfoPlistPath=function _getInfoPlistPath(){return data;};return data;}function _modules(){var data=require(\"../utils/modules\");_modules=function _modules(){return data;};return data;}function _sortObject(){var data=require(\"../utils/sortObject\");_sortObject=function _sortObject(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}function _createBaseMod(){var data=require(\"./createBaseMod\");_createBaseMod=function _createBaseMod(){return data;};return data;}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{\"default\":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj[\"default\"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var _fs$promises=_fs().promises,readFile=_fs$promises.readFile,writeFile=_fs$promises.writeFile;function getEntitlementsPlistTemplate(){// TODO: Fetch the versioned template file if possible\nreturn{};}function getInfoPlistTemplate(){// TODO: Fetch the versioned template file if possible\nreturn{CFBundleDevelopmentRegion:'$(DEVELOPMENT_LANGUAGE)',CFBundleExecutable:'$(EXECUTABLE_NAME)',CFBundleIdentifier:'$(PRODUCT_BUNDLE_IDENTIFIER)',CFBundleName:'$(PRODUCT_NAME)',CFBundlePackageType:'$(PRODUCT_BUNDLE_PACKAGE_TYPE)',CFBundleInfoDictionaryVersion:'6.0',CFBundleSignature:'????',LSRequiresIPhoneOS:true,NSAppTransportSecurity:{NSAllowsArbitraryLoads:true,NSExceptionDomains:{localhost:{NSExceptionAllowsInsecureHTTPLoads:true}}},UILaunchStoryboardName:'SplashScreen',UIRequiredDeviceCapabilities:['armv7'],UIViewControllerBasedStatusBarAppearance:false,UIStatusBarStyle:'UIStatusBarStyleDefault'};}var defaultProviders={dangerous:(0,_createBaseMod().provider)({getFilePath:function getFilePath(){return'';},read:function read(){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",{});case 1:case\"end\":return _context.stop();}}},_callee);}))();},write:function write(){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:case\"end\":return _context2.stop();}}},_callee2);}))();}}),// Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\nappDelegate:(0,_createBaseMod().provider)({getFilePath:function getFilePath(_ref){var projectRoot=_ref.modRequest.projectRoot;return _ios().Paths.getAppDelegateFilePath(projectRoot);},read:function read(filePath){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",_ios().Paths.getFileInfo(filePath));case 1:case\"end\":return _context3.stop();}}},_callee3);}))();},write:function write(filePath,_ref2){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var contents;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:contents=_ref2.modResults.contents;_context4.next=3;return writeFile(filePath,contents);case 3:case\"end\":return _context4.stop();}}},_callee4);}))();}}),// Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\nexpoPlist:(0,_createBaseMod().provider)({isIntrospective:true,getFilePath:function getFilePath(_ref3){var _ref3$modRequest=_ref3.modRequest,platformProjectRoot=_ref3$modRequest.platformProjectRoot,projectName=_ref3$modRequest.projectName;var supportingDirectory=_path()[\"default\"].join(platformProjectRoot,projectName,'Supporting');return _path()[\"default\"].resolve(supportingDirectory,'Expo.plist');},read:function read(filePath,_ref4){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var introspect;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:introspect=_ref4.modRequest.introspect;_context5.prev=1;_context5.t0=_plist()[\"default\"];_context5.next=5;return readFile(filePath,'utf8');case 5:_context5.t1=_context5.sent;return _context5.abrupt(\"return\",_context5.t0.parse.call(_context5.t0,_context5.t1));case 9:_context5.prev=9;_context5.t2=_context5[\"catch\"](1);if(!introspect){_context5.next=13;break;}return _context5.abrupt(\"return\",{});case 13:throw _context5.t2;case 14:case\"end\":return _context5.stop();}}},_callee5,null,[[1,9]]);}))();},write:function write(filePath,_ref5){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var modResults,introspect;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:modResults=_ref5.modResults,introspect=_ref5.modRequest.introspect;if(!introspect){_context6.next=3;break;}return _context6.abrupt(\"return\");case 3:_context6.next=5;return writeFile(filePath,_plist()[\"default\"].build((0,_sortObject().sortObject)(modResults)));case 5:case\"end\":return _context6.stop();}}},_callee6);}))();}}),// Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\nxcodeproj:(0,_createBaseMod().provider)({getFilePath:function getFilePath(_ref6){var projectRoot=_ref6.modRequest.projectRoot;return _ios().Paths.getPBXProjectPath(projectRoot);},read:function read(filePath){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(){var project;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:project=_xcode()[\"default\"].project(filePath);project.parseSync();return _context7.abrupt(\"return\",project);case 3:case\"end\":return _context7.stop();}}},_callee7);}))();},write:function write(filePath,_ref7){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var modResults;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:modResults=_ref7.modResults;_context8.next=3;return writeFile(filePath,modResults.writeSync());case 3:case\"end\":return _context8.stop();}}},_callee8);}))();}}),// Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\ninfoPlist:(0,_createBaseMod().provider)({isIntrospective:true,getFilePath:function getFilePath(config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(){var project,infoPlistBuildProperty,infoPlistPath;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:project=null;try{project=(0,_Xcodeproj().getPbxproj)(config.modRequest.projectRoot);}catch(_unused){// noop\n}// Only check / warn if a project actually exists, this'll provide\n// more accurate warning messages for users in managed projects.\nif(!project){_context9.next=12;break;}infoPlistBuildProperty=(0,_getInfoPlistPath().getInfoPlistPathFromPbxproj)(project);if(!infoPlistBuildProperty){_context9.next=11;break;}//: [root]/myapp/ios/MyApp/Info.plist\ninfoPlistPath=_path()[\"default\"].join(//: myapp/ios\nconfig.modRequest.platformProjectRoot,//: MyApp/Info.plist\ninfoPlistBuildProperty);if(!(0,_modules().fileExists)(infoPlistPath)){_context9.next=8;break;}return _context9.abrupt(\"return\",infoPlistPath);case 8:(0,_warnings().addWarningIOS)('mods.ios.infoPlist',\"Info.plist file linked to Xcode project does not exist: \".concat(infoPlistPath));_context9.next=12;break;case 11:(0,_warnings().addWarningIOS)('mods.ios.infoPlist','Failed to find Info.plist linked to Xcode project.');case 12:_context9.prev=12;_context9.next=15;return _ios().Paths.getInfoPlistPath(config.modRequest.projectRoot);case 15:return _context9.abrupt(\"return\",_context9.sent);case 18:_context9.prev=18;_context9.t0=_context9[\"catch\"](12);if(!config.modRequest.introspect){_context9.next=22;break;}return _context9.abrupt(\"return\",'');case 22:throw _context9.t0;case 23:case\"end\":return _context9.stop();}}},_callee9,null,[[12,18]]);}))();},read:function read(filePath,config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(){var modResults,contents;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:// Apply all of the Info.plist values to the expo.ios.infoPlist object\n// TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\nif(!config.ios)config.ios={};if(!config.ios.infoPlist)config.ios.infoPlist={};_context10.prev=2;_context10.next=5;return readFile(filePath,'utf8');case 5:contents=_context10.sent;(0,_assert()[\"default\"])(contents,'Info.plist is empty');modResults=_plist()[\"default\"].parse(contents);_context10.next=15;break;case 10:_context10.prev=10;_context10.t0=_context10[\"catch\"](2);if(config.modRequest.introspect){_context10.next=14;break;}throw _context10.t0;case 14:// Fallback to using the infoPlist object from the Expo config.\nmodResults=getInfoPlistTemplate();case 15:config.ios.infoPlist=_objectSpread(_objectSpread({},modResults||{}),config.ios.infoPlist);return _context10.abrupt(\"return\",config.ios.infoPlist);case 17:case\"end\":return _context10.stop();}}},_callee10,null,[[2,10]]);}))();},write:function write(filePath,config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(){return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:// Update the contents of the static infoPlist object\nif(!config.ios){config.ios={};}config.ios.infoPlist=config.modResults;// Return early without writing, in introspection mode.\nif(!config.modRequest.introspect){_context11.next=4;break;}return _context11.abrupt(\"return\");case 4:_context11.next=6;return writeFile(filePath,_plist()[\"default\"].build((0,_sortObject().sortObject)(config.modResults)));case 6:case\"end\":return _context11.stop();}}},_callee11);}))();}}),// Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\nentitlements:(0,_createBaseMod().provider)({isIntrospective:true,getFilePath:function getFilePath(config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(){var _Entitlements$getEnti;return _regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:_context12.prev=0;(0,_Entitlements().ensureApplicationTargetEntitlementsFileConfigured)(config.modRequest.projectRoot);return _context12.abrupt(\"return\",(_Entitlements$getEnti=_ios().Entitlements.getEntitlementsPath(config.modRequest.projectRoot))!==null&&_Entitlements$getEnti!==void 0?_Entitlements$getEnti:'');case 5:_context12.prev=5;_context12.t0=_context12[\"catch\"](0);if(!config.modRequest.introspect){_context12.next=9;break;}return _context12.abrupt(\"return\",'');case 9:throw _context12.t0;case 10:case\"end\":return _context12.stop();}}},_callee12,null,[[0,5]]);}))();},read:function read(filePath,config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(){var modResults,contents;return _regeneratorRuntime.wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:_context13.prev=0;if(!_fs()[\"default\"].existsSync(filePath)){_context13.next=9;break;}_context13.next=4;return readFile(filePath,'utf8');case 4:contents=_context13.sent;(0,_assert()[\"default\"])(contents,'Entitlements plist is empty');modResults=_plist()[\"default\"].parse(contents);_context13.next=10;break;case 9:modResults=getEntitlementsPlistTemplate();case 10:_context13.next=17;break;case 12:_context13.prev=12;_context13.t0=_context13[\"catch\"](0);if(config.modRequest.introspect){_context13.next=16;break;}throw _context13.t0;case 16:// Fallback to using the template file.\nmodResults=getEntitlementsPlistTemplate();case 17:// Apply all of the .entitlements values to the expo.ios.entitlements object\n// TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\nif(!config.ios)config.ios={};if(!config.ios.entitlements)config.ios.entitlements={};config.ios.entitlements=_objectSpread(_objectSpread({},modResults||{}),config.ios.entitlements);return _context13.abrupt(\"return\",config.ios.entitlements);case 21:case\"end\":return _context13.stop();}}},_callee13,null,[[0,12]]);}))();},write:function write(filePath,config){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(){return _regeneratorRuntime.wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:// Update the contents of the static entitlements object\nif(!config.ios){config.ios={};}config.ios.entitlements=config.modResults;// Return early without writing, in introspection mode.\nif(!config.modRequest.introspect){_context14.next=4;break;}return _context14.abrupt(\"return\");case 4:_context14.next=6;return writeFile(filePath,_plist()[\"default\"].build((0,_sortObject().sortObject)(config.modResults)));case 6:case\"end\":return _context14.stop();}}},_callee14);}))();}}),// Append a rule to supply Podfile.properties.json data to mods on `mods.ios.podfileProperties`\npodfileProperties:(0,_createBaseMod().provider)({isIntrospective:true,getFilePath:function getFilePath(_ref8){var platformProjectRoot=_ref8.modRequest.platformProjectRoot;return _path()[\"default\"].resolve(platformProjectRoot,'Podfile.properties.json');},read:function read(filePath){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(){var results;return _regeneratorRuntime.wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:results={};_context15.prev=1;_context15.next=4;return _jsonFile()[\"default\"].readAsync(filePath);case 4:results=_context15.sent;_context15.next=9;break;case 7:_context15.prev=7;_context15.t0=_context15[\"catch\"](1);case 9:return _context15.abrupt(\"return\",results);case 10:case\"end\":return _context15.stop();}}},_callee15,null,[[1,7]]);}))();},write:function write(filePath,_ref9){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(){var modResults,introspect;return _regeneratorRuntime.wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:modResults=_ref9.modResults,introspect=_ref9.modRequest.introspect;if(!introspect){_context16.next=3;break;}return _context16.abrupt(\"return\");case 3:_context16.next=5;return _jsonFile()[\"default\"].writeAsync(filePath,modResults);case 5:case\"end\":return _context16.stop();}}},_callee16);}))();}})};function withIosBaseMods(config){var _ref10=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var providers=_ref10.providers,props=_objectWithoutProperties(_ref10,_excluded);return(0,_createBaseMod().withGeneratedBaseMods)(config,_objectSpread(_objectSpread({},props),{},{platform:'ios',providers:providers!==null&&providers!==void 0?providers:getIosModFileProviders()}));}function getIosModFileProviders(){return defaultProviders;}","map":{"version":3,"sources":["../../src/plugins/withIosBaseMods.ts"],"names":["writeFile","promises","CFBundleDevelopmentRegion","CFBundleExecutable","CFBundleIdentifier","CFBundleName","CFBundlePackageType","CFBundleInfoDictionaryVersion","CFBundleSignature","LSRequiresIPhoneOS","NSAppTransportSecurity","NSAllowsArbitraryLoads","NSExceptionDomains","localhost","NSExceptionAllowsInsecureHTTPLoads","UILaunchStoryboardName","UIRequiredDeviceCapabilities","UIViewControllerBasedStatusBarAppearance","UIStatusBarStyle","defaultProviders","dangerous","getFilePath","appDelegate","modRequest","projectRoot","Paths","modResults","contents","expoPlist","isIntrospective","projectName","supportingDirectory","path","introspect","plist","readFile","xcodeproj","project","xcode","infoPlist","config","infoPlistBuildProperty","infoPlistPath","getInfoPlistTemplate","entitlements","Entitlements","fs","getEntitlementsPlistTemplate","podfileProperties","platformProjectRoot","results","JsonFile","props","platform","providers","getIosModFileProviders"],"mappings":"oiDAAA,QAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,MAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,KAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,MAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAGA,QAAA,CAAA,IAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,aAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA,QAAA,CAAA,UAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,UAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,iBAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,+BAAA,CAAA,CAAA,iBAAA,CAAA,4BAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,QAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,WAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,cAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA,cAAA,CAAA,yBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,olCAEA,iBAAgCC,GAAAA,GAAhC,QAAA,CAAM,QAAN,cAAM,QAAN,CAAkBD,SAAlB,cAAkBA,SAAlB,CAIA,QAAA,CAAA,4BAAA,EAAwC,CACtC;AACA,MAAA,EAAA,CACD,CAED,QAAA,CAAA,oBAAA,EAAgC,CAC9B;AACA,MAAO,CACLE,yBAAyB,CADpB,yBAAA,CAELC,kBAAkB,CAFb,oBAAA,CAGLC,kBAAkB,CAHb,8BAAA,CAILC,YAAY,CAJP,iBAAA,CAKLC,mBAAmB,CALd,gCAAA,CAMLC,6BAA6B,CANxB,KAAA,CAOLC,iBAAiB,CAPZ,MAAA,CAQLC,kBAAkB,CARb,IAAA,CASLC,sBAAsB,CAAE,CACtBC,sBAAsB,CADA,IAAA,CAEtBC,kBAAkB,CAAE,CAClBC,SAAS,CAAE,CACTC,kCAAkC,CAAE,IAD3B,CADO,CAFE,CATnB,CAiBLC,sBAAsB,CAjBjB,cAAA,CAkBLC,4BAA4B,CAAE,CAlBzB,OAkByB,CAlBzB,CAmBLC,wCAAwC,CAnBnC,KAAA,CAoBLC,gBAAgB,CAAE,yBApBb,CAAP,CAsBD,CAED,GAAMC,CAAAA,gBAAgB,CAAG,CACvBC,SAAS,CAAE,CAAA,EAAA,cAAA,GAAA,QAAA,EAAkB,CAC3BC,WAD2B,uBACb,CACZ,MAAA,EAAA,CAFyB,CAAA,CAI3B,IAJ2B,gBAId,mOACX,EADW,6DAJc,CAAA,CAO3B,KAP2B,iBAOb,8PAAE,CAPW,CAAlB,CADY,CAUvB;AACAC,WAAW,CAAE,CAAA,EAAA,cAAA,GAAA,QAAA,EAAuC,CAClDD,WADkD,2BACL,IAAjBG,CAAAA,WAAiB,MAA/BD,UAA+B,CAAjBC,WAAiB,CAC3C,MAAOC,CAAAA,IAAAA,GAAAA,KAAAA,CAAAA,sBAAAA,CAAP,WAAOA,CAAP,CAFgD,CAAA,CAIlD,IAJkD,eAIlD,QAJkD,CAI7B,yOACZA,IAAAA,GAAAA,KAAAA,CAAAA,WAAAA,CAAP,QAAOA,CADY,+DAJ6B,CAAA,CAOlD,KAPkD,gBAOlD,QAPkD,OAOU,qNAAdE,QAAc,OAA5BD,UAA4B,CAAdC,QAAc,wBACpD3B,CAAAA,SAAS,CAAA,QAAA,CAAf,QAAe,CAD2C,8DAE3D,CATiD,CAAvC,CAXU,CAsBvB;AACA4B,SAAS,CAAE,CAAA,EAAA,cAAA,GAAA,QAAA,EAAqB,CAC9BC,eAAe,CADe,IAAA,CAE9BR,WAF8B,4BAEoC,4BAApDE,UAAoD,CAAxC,mBAAwC,kBAAxC,mBAAwC,CAAjBO,WAAiB,kBAAjBA,WAAiB,CAChE,GAAMC,CAAAA,mBAAmB,CAAGC,KAAAA,aAAAA,CAAAA,IAAAA,CAAAA,mBAAAA,CAAAA,WAAAA,CAA5B,YAA4BA,CAA5B,CACA,MAAOA,CAAAA,KAAAA,aAAAA,CAAAA,OAAAA,CAAAA,mBAAAA,CAAP,YAAOA,CAAP,CAJ4B,CAAA,CAM9B,IAN8B,eAM9B,QAN8B,OAMuB,uNAAhBC,UAAgB,OAA9BV,UAA8B,CAAhBU,UAAgB,+BAE1CC,MAAAA,aAF0C,wBAExBC,CAAAA,QAAQ,CAAA,QAAA,CAAjC,MAAiC,CAFgB,kFAE1CD,KAF0C,iGAIjD,UAJiD,4DAK/C,EAL+C,wGANvB,CAAA,CAgB9B,KAhB8B,gBAgB9B,QAhB8B,OAgBoC,kOAA5C,UAA4C,OAA5C,UAA4C,CAAhBD,UAAgB,OAA9BV,UAA8B,CAAhBU,UAAgB,KAChE,UADgE,0FAI1DjC,CAAAA,SAAS,CAAA,QAAA,CAAWkC,MAAAA,aAAAA,CAAAA,KAAAA,CAAY,CAAA,EAAA,WAAA,GAAA,UAAA,EAAtC,UAAsC,CAAZA,CAAX,CAJiD,8DAKjE,CArB6B,CAArB,CAvBY,CA8CvB;AACAE,SAAS,CAAE,CAAA,EAAA,cAAA,GAAA,QAAA,EAAuB,CAChCf,WADgC,4BACa,IAAjBG,CAAAA,WAAiB,OAA/BD,UAA+B,CAAjBC,WAAiB,CAC3C,MAAOC,CAAAA,IAAAA,GAAAA,KAAAA,CAAAA,iBAAAA,CAAP,WAAOA,CAAP,CAF8B,CAAA,CAIhC,IAJgC,eAIhC,QAJgC,CAIX,oNACbY,OADa,CACHC,MAAAA,aAAAA,CAAAA,OAAAA,CAAhB,QAAgBA,CADG,CAEnBD,OAAO,CAAPA,SAAAA,GAFmB,iCAGnB,OAHmB,+DAJW,CAAA,CAShC,KATgC,gBAShC,QATgC,OASM,uNAAdX,UAAc,OAAdA,UAAc,wBAC9B1B,CAAAA,SAAS,CAAA,QAAA,CAAW0B,UAAU,CAApC,SAA0BA,EAAX,CADqB,8DAErC,CAX+B,CAAvB,CA/CY,CA4DvB;AACAa,SAAS,CAAE,CAAA,EAAA,cAAA,GAAA,QAAA,EAA6C,CACtDV,eAAe,CADuC,IAAA,CAEtD,WAFsD,sBAEtD,MAFsD,CAE5B,yPACpBQ,OADoB,CACxB,IADwB,CAExB,GAAI,CACFA,OAAO,CAAG,CAAA,EAAA,UAAA,GAAA,UAAA,EAAWG,MAAM,CAANA,UAAAA,CAArBH,WAAU,CAAVA,CADF,CAEE,cAAM,CACN;AALsB,CAQxB;AACA;AATwB,IAUxB,OAVwB,2BAWhBI,sBAXgB,CAWS,CAAA,EAAA,iBAAA,GAAA,2BAAA,EAA/B,OAA+B,CAXT,KAatB,sBAbsB,2BAcpB;AACMC,aAfc,CAeEV,KAAAA,aAAAA,CAAAA,IAAAA,CACpB;AACAQ,MAAM,CAANA,UAAAA,CAFoBR,mBAAAA,CAGpB;AAHF,sBAAsBA,CAfF,KAqBhB,CAAA,EAAA,QAAA,GAAA,UAAA,EAAJ,aAAI,CArBgB,2DAsBlB,aAtBkB,SAwBpB,CAAA,EAAA,SAAA,GAAA,aAAA,EAAA,oBAAA,mEAAA,aAAA,GAxBoB,gCA6BpB,CAAA,EAAA,SAAA,GAAA,aAAA,EAAA,oBAAA,CAAA,oDAAA,EA7BoB,kDAkCTP,CAAAA,IAAAA,GAAAA,KAAAA,CAAAA,gBAAAA,CAAuBe,MAAM,CAANA,UAAAA,CAApC,WAAaf,CAlCS,4HAoClBe,MAAM,CAANA,UAAAA,CAAJ,UApCsB,4DAsCpB,EAtCoB,0GAF4B,CAAA,CA6CtD,IA7CsD,eA6CtD,QA7CsD,CA6CtD,MA7CsD,CA6CzB,qOAC3B;AACA;AACA,GAAI,CAACA,MAAM,CAAX,GAAA,CAAiBA,MAAM,CAANA,GAAAA,CAAAA,EAAAA,CACjB,GAAI,CAACA,MAAM,CAANA,GAAAA,CAAL,SAAA,CAA2BA,MAAM,CAANA,GAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAJA,0CAQFL,CAAAA,QAAQ,CAAA,QAAA,CAA/B,MAA+B,CARN,QAQnBR,QARmB,iBASzB,CAAA,EAAA,OAAA,aAAA,EAAA,QAAA,CAAA,qBAAA,EACAD,UAAU,CAAGQ,MAAAA,aAAAA,CAAAA,KAAAA,CAAbR,QAAaQ,CAAbR,CAVyB,4FAapBc,MAAM,CAANA,UAAAA,CAAL,UAbyB,wDAgBzB;AACAd,UAAU,CAAGiB,oBAAbjB,EAAAA,CAjByB,QAoB3Bc,MAAM,CAANA,GAAAA,CAAAA,SAAAA,gCACMd,UAAU,EADO,EAAvBc,EAEKA,MAAM,CAANA,GAAAA,CAAWD,SAFhBC,EApB2B,kCAyBpBA,MAAM,CAANA,GAAAA,CAAP,SAzB2B,gFA7CyB,CAAA,CAwEtD,KAxEsD,gBAwEtD,QAxEsD,CAwEtD,MAxEsD,CAwExB,6MAC5B;AACA,GAAI,CAACA,MAAM,CAAX,GAAA,CAAiB,CACfA,MAAM,CAANA,GAAAA,CAAAA,EAAAA,CACD,CACDA,MAAM,CAANA,GAAAA,CAAAA,SAAAA,CAAuBA,MAAM,CALD,UAK5BA,CAEA;AAP4B,IAQxBA,MAAM,CAANA,UAAAA,CAAJ,UAR4B,6FAYtBxC,CAAAA,SAAS,CAAA,QAAA,CAAWkC,MAAAA,aAAAA,CAAAA,KAAAA,CAAY,CAAA,EAAA,WAAA,GAAA,UAAA,EAAWM,MAAM,CAAvD,UAAsC,CAAZN,CAAX,CAZa,gEAa7B,CArFqD,CAA7C,CA7DY,CAoJvB;AACAU,YAAY,CAAE,CAAA,EAAA,cAAA,GAAA,QAAA,EAA8C,CAC1Df,eAAe,CAD2C,IAAA,CAG1D,WAH0D,sBAG1D,MAH0D,CAGhC,yPAEtB,CAAA,EAAA,aAAA,GAAA,iDAAA,EAAkDW,MAAM,CAANA,UAAAA,CAAlD,WAAA,EAFsB,kCAGtB,CAAA,qBAAA,CAAOK,IAAAA,GAAAA,YAAAA,CAAAA,mBAAAA,CAAiCL,MAAM,CAANA,UAAAA,CAAxC,WAAOK,CAAP,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,EAHsB,oEAKlBL,MAAM,CAANA,UAAAA,CAAJ,UALsB,6DAOpB,EAPoB,0GAHgC,CAAA,CAgB1D,IAhB0D,eAgB1D,QAhB0D,CAgB1D,MAhB0D,CAgB7B,2PAGrBM,GAAAA,aAAAA,CAAAA,UAAAA,CAAJ,QAAIA,CAHqB,mDAIAX,CAAAA,QAAQ,CAAA,QAAA,CAA/B,MAA+B,CAJR,QAIjBR,QAJiB,iBAKvB,CAAA,EAAA,OAAA,aAAA,EAAA,QAAA,CAAA,6BAAA,EACAD,UAAU,CAAGQ,MAAAA,aAAAA,CAAAA,KAAAA,CAAbR,QAAaQ,CAAbR,CANuB,gCAQvBA,UAAU,CAAGqB,4BAAbrB,EAAAA,CARuB,oGAYpBc,MAAM,CAANA,UAAAA,CAAL,UAZyB,wDAezB;AACAd,UAAU,CAAGqB,4BAAbrB,EAAAA,CAhByB,QAmB3B;AACA;AACA,GAAI,CAACc,MAAM,CAAX,GAAA,CAAiBA,MAAM,CAANA,GAAAA,CAAAA,EAAAA,CACjB,GAAI,CAACA,MAAM,CAANA,GAAAA,CAAL,YAAA,CAA8BA,MAAM,CAANA,GAAAA,CAAAA,YAAAA,CAAAA,EAAAA,CAE9BA,MAAM,CAANA,GAAAA,CAAAA,YAAAA,gCACMd,UAAU,EADU,EAA1Bc,EAEKA,MAAM,CAANA,GAAAA,CAAWI,YAFhBJ,EAxB2B,kCA6BpBA,MAAM,CAANA,GAAAA,CAAP,YA7B2B,gFAhB6B,CAAA,CAgD1D,KAhD0D,gBAgD1D,QAhD0D,CAgD1D,MAhD0D,CAgD5B,6MAC5B;AACA,GAAI,CAACA,MAAM,CAAX,GAAA,CAAiB,CACfA,MAAM,CAANA,GAAAA,CAAAA,EAAAA,CACD,CACDA,MAAM,CAANA,GAAAA,CAAAA,YAAAA,CAA0BA,MAAM,CALJ,UAK5BA,CAEA;AAP4B,IAQxBA,MAAM,CAANA,UAAAA,CAAJ,UAR4B,6FAYtBxC,CAAAA,SAAS,CAAA,QAAA,CAAWkC,MAAAA,aAAAA,CAAAA,KAAAA,CAAY,CAAA,EAAA,WAAA,GAAA,UAAA,EAAWM,MAAM,CAAvD,UAAsC,CAAZN,CAAX,CAZa,gEAa7B,CA7DyD,CAA9C,CArJS,CAqNvB;AACAc,iBAAiB,CAAE,CAAA,EAAA,cAAA,GAAA,QAAA,EAAoC,CACrDnB,eAAe,CADsC,IAAA,CAGrDR,WAHqD,4BAGA,IAAzB4B,CAAAA,mBAAyB,OAAvC1B,UAAuC,CAAzB0B,mBAAyB,CACnD,MAAOjB,CAAAA,KAAAA,aAAAA,CAAAA,OAAAA,CAAAA,mBAAAA,CAAP,yBAAOA,CAAP,CAJmD,CAAA,CAMrD,IANqD,eAMrD,QANqD,CAMhC,yNACfkB,OADe,CACnB,EADmB,2CAGDC,CAAAA,SAAAA,aAAAA,CAAAA,SAAAA,CAAhBD,QAAgBC,CAHC,QAGjBD,OAHiB,gJAKnB,OALmB,+EANgC,CAAA,CAarD,KAbqD,gBAarD,QAbqD,OAaa,uOAA5C,UAA4C,OAA5C,UAA4C,CAAhBjB,UAAgB,OAA9BV,UAA8B,CAAhBU,UAAgB,KAChE,UADgE,6FAI1DkB,CAAAA,SAAAA,aAAAA,CAAAA,UAAAA,CAAAA,QAAAA,CAAN,UAAMA,CAJ0D,gEAKjE,CAlBoD,CAApC,CAtNI,CAAzB,CA8OO,QAAA,CAAA,eAAA,CAAA,MAAA,CAMW,sEANX,EAMW,IAJhB,CAAA,SAIgB,QAJhB,SAIgB,CAFXC,KAEW,4CAChB,MAAO,CAAA,EAAA,cAAA,GAAA,qBAAA,EAAA,MAAA,gCAA0C,KAA1C,MAELC,QAAQ,CAFuC,KAA1C,CAGLC,SAAS,CAAEA,SAAF,GAAA,IAAEA,EAAAA,SAAF,GAAA,IAAA,EAAEA,CAAF,SAAEA,CAAaC,sBAAsB,EAHzC,GAAP,CAKD,CAEM,QAAA,CAAA,sBAAA,EAAkC,CACvC,MAAA,CAAA,gBAAA,CACD","sourcesContent":["import JsonFile, { JSONObject, JSONValue } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs, { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { ensureApplicationTargetEntitlementsFileConfigured } from '../ios/Entitlements';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getPbxproj } from '../ios/utils/Xcodeproj';\nimport { getInfoPlistPathFromPbxproj } from '../ios/utils/getInfoPlistPath';\nimport { fileExists } from '../utils/modules';\nimport { sortObject } from '../utils/sortObject';\nimport { addWarningIOS } from '../utils/warnings';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nfunction getEntitlementsPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {};\n}\n\nfunction getInfoPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true,\n        },\n      },\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault',\n  };\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return plist.parse(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (introspect) {\n          return {};\n        }\n        throw error;\n      }\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await writeFile(filePath, plist.build(sortObject(modResults)));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    isIntrospective: true,\n    async getFilePath(config) {\n      let project: xcode.XcodeProject | null = null;\n      try {\n        project = getPbxproj(config.modRequest.projectRoot);\n      } catch {\n        // noop\n      }\n\n      // Only check / warn if a project actually exists, this'll provide\n      // more accurate warning messages for users in managed projects.\n      if (project) {\n        const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(project);\n\n        if (infoPlistBuildProperty) {\n          //: [root]/myapp/ios/MyApp/Info.plist\n          const infoPlistPath = path.join(\n            //: myapp/ios\n            config.modRequest.platformProjectRoot,\n            //: MyApp/Info.plist\n            infoPlistBuildProperty\n          );\n          if (fileExists(infoPlistPath)) {\n            return infoPlistPath;\n          }\n          addWarningIOS(\n            'mods.ios.infoPlist',\n            `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`\n          );\n        } else {\n          addWarningIOS('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n        }\n      }\n      try {\n        // Fallback on glob...\n        return await Paths.getInfoPlistPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      let modResults: InfoPlist;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Info.plist is empty');\n        modResults = plist.parse(contents) as InfoPlist;\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the infoPlist object from the Expo config.\n        modResults = getInfoPlistTemplate();\n      }\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return config.ios.infoPlist!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    isIntrospective: true,\n\n    async getFilePath(config) {\n      try {\n        ensureApplicationTargetEntitlementsFileConfigured(config.modRequest.projectRoot);\n        return Entitlements.getEntitlementsPath(config.modRequest.projectRoot) ?? '';\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n\n    async read(filePath, config) {\n      let modResults: JSONObject;\n      try {\n        if (fs.existsSync(filePath)) {\n          const contents = await readFile(filePath, 'utf8');\n          assert(contents, 'Entitlements plist is empty');\n          modResults = plist.parse(contents);\n        } else {\n          modResults = getEntitlementsPlistTemplate();\n        }\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the template file.\n        modResults = getEntitlementsPlistTemplate();\n      }\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return config.ios.entitlements!;\n    },\n\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n\n  // Append a rule to supply Podfile.properties.json data to mods on `mods.ios.podfileProperties`\n  podfileProperties: provider<Record<string, JSONValue>>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    async read(filePath) {\n      let results: Record<string, JSONValue> = {};\n      try {\n        results = await JsonFile.readAsync(filePath);\n      } catch {}\n      return results;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await JsonFile.writeAsync(filePath, modResults);\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n"]},"metadata":{},"sourceType":"script"}