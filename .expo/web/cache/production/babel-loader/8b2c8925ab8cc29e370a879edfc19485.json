{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.isLegacyImportsEnabled=isLegacyImportsEnabled;function _getenv(){var data=require(\"getenv\");_getenv=function _getenv(){return data;};return data;}function _semver(){var data=_interopRequireDefault(require(\"semver\"));_semver=function _semver(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */function isLegacyImportsEnabled(exp){if((0,_getenv().boolish)('EXPO_LEGACY_IMPORTS',false)){console.warn('Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.');return true;}// Only allow target if the SDK version is available and it's less 41.\n// This is optimized for making future projects work.\nreturn lteSdkVersion(exp,'40.0.0');}function lteSdkVersion(expJson,sdkVersion){if(!expJson.sdkVersion){return false;}if(expJson.sdkVersion==='UNVERSIONED'){return false;}try{return _semver()[\"default\"].lte(expJson.sdkVersion,sdkVersion);}catch(_unused){throw new Error(\"\".concat(expJson.sdkVersion,\" is not a valid version. Must be in the form of x.y.z\"));}}","map":{"version":3,"sources":["../src/isLegacyImportsEnabled.ts"],"names":["console","lteSdkVersion","expJson","semver"],"mappings":"4HAAA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,qFAIA;AACA;AACA;AACA;AACA,GACO,QAAA,CAAA,sBAAA,CAAA,GAAA,CAAqE,CAC1E,GAAI,CAAA,EAAA,OAAA,GAAA,OAAA,EAAA,qBAAA,CAAJ,KAAI,CAAJ,CAA2C,CACzCA,OAAO,CAAPA,IAAAA,CAAAA,sHAAAA,EAGA,MAAA,KAAA,CALwE,CAO1E;AACA;AACA,MAAOC,CAAAA,aAAa,CAAA,GAAA,CAApB,QAAoB,CAApB,CACD,CAED,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,UAAA,CAA6F,CAC3F,GAAI,CAACC,OAAO,CAAZ,UAAA,CAAyB,CACvB,MAAA,MAAA,CACD,CAED,GAAIA,OAAO,CAAPA,UAAAA,GAAJ,aAAA,CAA0C,CACxC,MAAA,MAAA,CACD,CAED,GAAI,CACF,MAAOC,CAAAA,OAAAA,aAAAA,CAAAA,GAAAA,CAAWD,OAAO,CAAlBC,UAAAA,CAAP,UAAOA,CAAP,CADF,CAEE,cAAM,CACN,KAAM,IAAA,CAAA,KAAA,WAAaD,OAAO,CAA1B,UAAM,0DAAN,CACD,CACF","sourcesContent":["import { boolish } from 'getenv';\nimport semver from 'semver';\n\nimport { ExpoConfig } from './Config.types';\n\n/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */\nexport function isLegacyImportsEnabled(exp: Pick<ExpoConfig, 'sdkVersion'>) {\n  if (boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn(\n      'Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.'\n    );\n    return true;\n  }\n  // Only allow target if the SDK version is available and it's less 41.\n  // This is optimized for making future projects work.\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}