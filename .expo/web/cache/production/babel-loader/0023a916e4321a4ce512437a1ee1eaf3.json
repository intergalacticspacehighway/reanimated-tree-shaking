{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck\");var _assertThisInitialized=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/assertThisInitialized\");var _inherits=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf\");var _wrapNativeSuper=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/wrapNativeSuper\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}Object.defineProperty(exports,\"__esModule\",{value:true});exports.UnexpectedError=exports.PluginError=void 0;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var UnexpectedError=/*#__PURE__*/function(_Error){_inherits(UnexpectedError,_Error);var _super=_createSuper(UnexpectedError);function UnexpectedError(message){var _this;_classCallCheck(this,UnexpectedError);_this=_super.call(this,\"\".concat(message,\"\\nPlease report this as an issue on https://github.com/expo/expo-cli/issues\"));_defineProperty(_assertThisInitialized(_this),\"name\",'UnexpectedError');return _this;}return UnexpectedError;}(/*#__PURE__*/_wrapNativeSuper(Error));exports.UnexpectedError=UnexpectedError;/**\n * Based on `JsonFileError` from `@expo/json-file`\n */var PluginError=/*#__PURE__*/function(_Error2){_inherits(PluginError,_Error2);var _super2=_createSuper(PluginError);function PluginError(message,code,cause){var _this2;_classCallCheck(this,PluginError);_this2=_super2.call(this,cause?\"\".concat(message,\"\\n\\u2514\\u2500 Cause: \").concat(cause.name,\": \").concat(cause.message):message);_this2.code=code;_this2.cause=cause;_defineProperty(_assertThisInitialized(_this2),\"name\",'PluginError');_defineProperty(_assertThisInitialized(_this2),\"isPluginError\",true);return _this2;}return PluginError;}(/*#__PURE__*/_wrapNativeSuper(Error));exports.PluginError=PluginError;","map":{"version":3,"sources":["../../src/utils/errors.ts"],"names":["constructor","code","cause","message","name"],"mappings":"s3DAAO,CAAA,e,0GAGLA,yBAAW,OAAXA,CAA6B,iDAC3B,iCAAA,OAAA,iFAD2B,eAAA,+BAAA,MAAA,CAFb,iBAEa,CAAA,CAAA,aAE5B,C,uDALI,K,2CAgBP;AACA;AACA,G,GACO,CAAA,W,qGAILA,qBAAW,OAAXA,CAAW,IAAXA,CAAW,KAAXA,CAAiF,8CAC/E,yBAAME,KAAK,WAAMC,OAAN,kCAA4BD,KAAK,CAACE,IAAlC,cAA2CF,KAAK,CAAhD,OAAA,EAAX,OAAA,EAD+E,OAA7CD,IAA6C,CAA7CA,IAA6C,CAAA,OAAfC,KAAe,CAAfA,KAAe,CAAA,eAAA,gCAAA,MAAA,CAHjE,aAGiE,CAAA,CAAA,eAAA,gCAAA,eAAA,CAFxD,IAEwD,CAAA,CAAA,cAEhF,C,mDANI,K","sourcesContent":["export class UnexpectedError extends Error {\n  readonly name = 'UnexpectedError';\n\n  constructor(message: string) {\n    super(`${message}\\nPlease report this as an issue on https://github.com/expo/expo-cli/issues`);\n  }\n}\n\nexport type PluginErrorCode =\n  | 'INVALID_PLUGIN_TYPE'\n  | 'INVALID_PLUGIN_IMPORT'\n  | 'PLUGIN_NOT_FOUND'\n  | 'CONFLICTING_PROVIDER'\n  | 'INVALID_MOD_ORDER'\n  | 'MISSING_PROVIDER';\n\n/**\n * Based on `JsonFileError` from `@expo/json-file`\n */\nexport class PluginError extends Error {\n  readonly name = 'PluginError';\n  readonly isPluginError = true;\n\n  constructor(message: string, public code: PluginErrorCode, public cause?: Error) {\n    super(cause ? `${message}\\n└─ Cause: ${cause.name}: ${cause.message}` : message);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}