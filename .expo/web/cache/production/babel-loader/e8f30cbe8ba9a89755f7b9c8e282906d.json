{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getBitcode=getBitcode;exports.setBitcode=setBitcode;exports.setBitcodeWithConfig=setBitcodeWithConfig;exports.withCustomBitcode=exports.withBitcode=void 0;function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}/**\n * Plugin to set a bitcode preference for the Xcode project\n * based on the project's Expo config `ios.bitcode` value.\n */var withBitcode=function withBitcode(config){return(0,_iosPlugins().withXcodeProject)(config,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return setBitcodeWithConfig(config,{project:config.modResults});case 2:config.modResults=_context.sent;return _context.abrupt(\"return\",config);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};/**\n * Plugin to set a custom bitcode preference for the Xcode project.\n * Does not read from the Expo config `ios.bitcode`.\n *\n * @param bitcode custom bitcode setting.\n */exports.withBitcode=withBitcode;var withCustomBitcode=function withCustomBitcode(config,bitcode){return(0,_iosPlugins().withXcodeProject)(config,/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return setBitcode(bitcode,{project:config.modResults});case 2:config.modResults=_context2.sent;return _context2.abrupt(\"return\",config);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());};/**\n * Get the bitcode preference from the Expo config.\n */exports.withCustomBitcode=withCustomBitcode;function getBitcode(config){var _config$ios;return(_config$ios=config.ios)===null||_config$ios===void 0?void 0:_config$ios.bitcode;}/**\n * Enable or disable the `ENABLE_BITCODE` property of the project configurations.\n */function setBitcodeWithConfig(config,_ref3){var project=_ref3.project;var bitcode=getBitcode(config);return setBitcode(bitcode,{project:project});}/**\n * Enable or disable the `ENABLE_BITCODE` property.\n */function setBitcode(bitcode,_ref4){var project=_ref4.project;var isDefaultBehavior=bitcode==null;// If the value is undefined, then do nothing.\nif(isDefaultBehavior){return project;}var targetName=typeof bitcode==='string'?bitcode:undefined;var isBitcodeEnabled=!!bitcode;if(targetName){// Assert if missing\nvar configs=Object.entries(project.pbxXCBuildConfigurationSection()).filter(_Xcodeproj().isNotComment);var hasConfiguration=configs.find(function(_ref5){var _ref6=_slicedToArray(_ref5,2),configuration=_ref6[1];return configuration.name===targetName;});if(hasConfiguration){// If targetName is defined then disable bitcode everywhere.\nproject.addBuildProperty('ENABLE_BITCODE','NO');}else{var names=_toConsumableArray(new Set(configs.map(function(_ref7){var _ref8=_slicedToArray(_ref7,2),configuration=_ref8[1];return\"\\\"\".concat(configuration.name,\"\\\"\");}))).sort();(0,_warnings().addWarningIOS)('ios.bitcode',\"No configuration named \\\"\".concat(targetName,\"\\\". Expected one of: \").concat(names.join(', '),\".\"));}}project.addBuildProperty('ENABLE_BITCODE',isBitcodeEnabled?'YES':'NO',targetName);return project;}","map":{"version":3,"sources":["../../src/ios/Bitcode.ts"],"names":["withBitcode","config","setBitcodeWithConfig","project","modResults","withCustomBitcode","setBitcode","bitcode","getBitcode","isDefaultBehavior","targetName","isBitcodeEnabled","configs","Object","isNotComment","hasConfiguration","configuration","names"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { isNotComment } from './utils/Xcodeproj';\n\ntype Bitcode = NonNullable<ExpoConfig['ios']>['bitcode'];\n\n/**\n * Plugin to set a bitcode preference for the Xcode project\n * based on the project's Expo config `ios.bitcode` value.\n */\nexport const withBitcode: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setBitcodeWithConfig(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Plugin to set a custom bitcode preference for the Xcode project.\n * Does not read from the Expo config `ios.bitcode`.\n *\n * @param bitcode custom bitcode setting.\n */\nexport const withCustomBitcode: ConfigPlugin<Bitcode> = (config, bitcode) => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setBitcode(bitcode, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Get the bitcode preference from the Expo config.\n */\nexport function getBitcode(config: Pick<ExpoConfig, 'ios'>): Bitcode {\n  return config.ios?.bitcode;\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property of the project configurations.\n */\nexport function setBitcodeWithConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const bitcode = getBitcode(config);\n  return setBitcode(bitcode, { project });\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property.\n */\nexport function setBitcode(bitcode: Bitcode, { project }: { project: XcodeProject }): XcodeProject {\n  const isDefaultBehavior = bitcode == null;\n  // If the value is undefined, then do nothing.\n  if (isDefaultBehavior) {\n    return project;\n  }\n\n  const targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  const isBitcodeEnabled = !!bitcode;\n  if (targetName) {\n    // Assert if missing\n    const configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment);\n    const hasConfiguration = configs.find(([, configuration]) => configuration.name === targetName);\n    if (hasConfiguration) {\n      // If targetName is defined then disable bitcode everywhere.\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      const names = [\n        // Remove duplicates, wrap in double quotes, and sort alphabetically.\n        ...new Set(configs.map(([, configuration]) => `\"${configuration.name}\"`)),\n      ].sort();\n      addWarningIOS(\n        'ios.bitcode',\n        `No configuration named \"${targetName}\". Expected one of: ${names.join(', ')}.`\n      );\n    }\n  }\n\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}