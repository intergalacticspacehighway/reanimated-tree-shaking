{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.copyFilePathToPathAsync=copyFilePathToPathAsync;exports.removeFile=removeFile;function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}/** A basic function that copies a single file to another file location. */function copyFilePathToPathAsync(_x,_x2){return _copyFilePathToPathAsync.apply(this,arguments);}/** Remove a single file (not directory). Returns `true` if a file was actually deleted. */function _copyFilePathToPathAsync(){_copyFilePathToPathAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(src,dest){var srcFile;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _fs()[\"default\"].promises.readFile(src);case 2:srcFile=_context.sent;_context.next=5;return _fs()[\"default\"].promises.mkdir(_path()[\"default\"].dirname(dest),{recursive:true});case 5:_context.next=7;return _fs()[\"default\"].promises.writeFile(dest,srcFile);case 7:case\"end\":return _context.stop();}}},_callee);}));return _copyFilePathToPathAsync.apply(this,arguments);}function removeFile(filePath){try{_fs()[\"default\"].unlinkSync(filePath);return true;}catch(error){// Skip if the remove did nothing.\nif(error.code==='ENOENT'){return false;}throw error;}}","map":{"version":3,"sources":["../../src/utils/fs.ts"],"names":["srcFile","fs","path","recursive","error"],"mappings":"icAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,KAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,qFAEA,2E,QACO,CAAA,uB,gEAMP,2F,qHANO,iBAAA,GAAA,CAAA,IAAA,oJACiBC,CAAAA,GAAAA,aAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAtB,GAAsBA,CADjB,QACCD,OADD,qCAEC,CAAA,GAAA,aAAA,CAAA,QAAA,CAAA,KAAA,CAAkBE,KAAAA,aAAAA,CAAAA,OAAAA,CAAlB,IAAkBA,CAAlB,CAAsC,CAAEC,SAAS,CAAE,IAAb,CAAtC,CAFD,8BAGCF,CAAAA,GAAAA,aAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAN,OAAMA,CAHD,uD,0DAOA,QAAA,CAAA,UAAA,CAAA,QAAA,CAA+C,CACpD,GAAI,CACFA,GAAAA,aAAAA,CAAAA,UAAAA,CAAAA,QAAAA,EACA,MAAA,KAAA,CAFF,CAGE,MAAA,KAAA,CAAmB,CACnB;AACA,GAAIG,KAAK,CAALA,IAAAA,GAAJ,QAAA,CAA6B,CAC3B,MAAA,MAAA,CACD,CACD,KAAA,CAAA,KAAA,CACD,CACF","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\n/** A basic function that copies a single file to another file location. */\nexport async function copyFilePathToPathAsync(src: string, dest: string): Promise<void> {\n  const srcFile = await fs.promises.readFile(src);\n  await fs.promises.mkdir(path.dirname(dest), { recursive: true });\n  await fs.promises.writeFile(dest, srcFile);\n}\n\n/** Remove a single file (not directory). Returns `true` if a file was actually deleted. */\nexport function removeFile(filePath: string): boolean {\n  try {\n    fs.unlinkSync(filePath);\n    return true;\n  } catch (error: any) {\n    // Skip if the remove did nothing.\n    if (error.code === 'ENOENT') {\n      return false;\n    }\n    throw error;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}