{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");var _objectWithoutProperties=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var _excluded=[\"operation\",\"width\"],_excluded2=[\"operation\"];function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.findSharpInstanceAsync=exports.sharpAsync=exports.isAvailableAsync=exports.resizeBufferAsync=void 0;var spawn_async_1=__importDefault(require(\"@expo/spawn-async\"));var getenv_1=require(\"getenv\");var path_1=__importDefault(require(\"path\"));var resolve_from_1=__importDefault(require(\"resolve-from\"));var semver_1=__importDefault(require(\"semver\"));var SHARP_HELP_PATTERN=/\\n\\nSpecify --help for available options/g;var SHARP_REQUIRED_VERSION='^1.10.0';function resizeBufferAsync(_x,_x2){return _resizeBufferAsync.apply(this,arguments);}function _resizeBufferAsync(){_resizeBufferAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(buffer,sizes){var sharp,metadata,resizedBuffers;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return findSharpInstanceAsync();case 2:sharp=_context.sent;_context.next=5;return sharp(buffer).metadata();case 5:metadata=_context.sent;_context.next=8;return Promise.all(sizes.map(function(dimension){var density=dimension/Math.max(metadata.width,metadata.height)*metadata.density;return sharp(buffer,{density:isNaN(density)?undefined:Math.ceil(density)}).resize(dimension,dimension,{fit:'contain',background:'transparent'}).toBuffer();}));case 8:resizedBuffers=_context.sent;return _context.abrupt(\"return\",resizedBuffers);case 10:case\"end\":return _context.stop();}}},_callee);}));return _resizeBufferAsync.apply(this,arguments);}exports.resizeBufferAsync=resizeBufferAsync;var isSharpDisabled=(0,getenv_1.boolish)('EXPO_IMAGE_UTILS_NO_SHARP',false);/**\n * Returns `true` if a global sharp instance can be found.\n * This functionality can be overridden with `process.env.EXPO_IMAGE_UTILS_NO_SHARP=1`.\n */function isAvailableAsync(){return _isAvailableAsync.apply(this,arguments);}function _isAvailableAsync(){_isAvailableAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!isSharpDisabled){_context2.next=2;break;}return _context2.abrupt(\"return\",false);case 2:_context2.prev=2;_context2.next=5;return findSharpBinAsync();case 5:return _context2.abrupt(\"return\",!!_context2.sent);case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](2);return _context2.abrupt(\"return\",false);case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[2,8]]);}));return _isAvailableAsync.apply(this,arguments);}exports.isAvailableAsync=isAvailableAsync;function sharpAsync(_x3){return _sharpAsync.apply(this,arguments);}function _sharpAsync(){_sharpAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options){var commands,bin,_yield,stdout,outputFilePaths,_args3=arguments;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:commands=_args3.length>1&&_args3[1]!==undefined?_args3[1]:[];_context3.next=3;return findSharpBinAsync();case 3:bin=_context3.sent;_context3.prev=4;_context3.next=7;return(0,spawn_async_1[\"default\"])(bin,[].concat(_toConsumableArray(getOptions(options)),_toConsumableArray(getCommandOptions(commands))));case 7:_yield=_context3.sent;stdout=_yield.stdout;outputFilePaths=stdout.trim().split('\\n');return _context3.abrupt(\"return\",outputFilePaths);case 13:_context3.prev=13;_context3.t0=_context3[\"catch\"](4);if(!_context3.t0.stderr){_context3.next=19;break;}throw new Error('\\nProcessing images using sharp-cli failed: '+_context3.t0.message+'\\nOutput: '+_context3.t0.stderr.replace(SHARP_HELP_PATTERN,''));case 19:throw _context3.t0;case 20:case\"end\":return _context3.stop();}}},_callee3,null,[[4,13]]);}));return _sharpAsync.apply(this,arguments);}exports.sharpAsync=sharpAsync;function getOptions(options){var args=[];for(var _i=0,_Object$entries=Object.entries(options);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];if(value!=null&&value!==false){if(typeof value==='boolean'){args.push(\"--\".concat(key));}else if(typeof value==='number'){args.push(\"--\".concat(key),value.toFixed());}else{args.push(\"--\".concat(key),value);}}}return args;}function getCommandOptions(commands){var args=[];var _iterator=_createForOfIteratorHelper(commands),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var command=_step.value;if(command.operation==='resize'){var operation=command.operation,width=command.width,namedOptions=_objectWithoutProperties(command,_excluded);args.push.apply(args,[operation,width.toFixed()].concat(_toConsumableArray(getOptions(namedOptions))));}else{var _operation=command.operation,_namedOptions=_objectWithoutProperties(command,_excluded2);args.push.apply(args,[_operation].concat(_toConsumableArray(getOptions(_namedOptions))));}args.push('--');}}catch(err){_iterator.e(err);}finally{_iterator.f();}return args;}var _sharpBin=null;var _sharpInstance=null;function findSharpBinAsync(){return _findSharpBinAsync.apply(this,arguments);}/**\n * Returns the instance of `sharp` installed by the global `sharp-cli` package.\n * This method will throw errors if the `sharp` instance cannot be found, these errors can be circumvented by ensuring `isAvailableAsync()` resolves to `true`.\n */function _findSharpBinAsync(){_findSharpBinAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var sharpCliPackage,libVipsVersion,installedCliVersion;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!_sharpBin){_context4.next=2;break;}return _context4.abrupt(\"return\",_sharpBin);case 2:_context4.prev=2;sharpCliPackage=require('sharp-cli/package.json');libVipsVersion=require('sharp').versions.vips;if(!(sharpCliPackage&&semver_1[\"default\"].satisfies(sharpCliPackage.version,SHARP_REQUIRED_VERSION)&&typeof sharpCliPackage.bin.sharp==='string'&&typeof libVipsVersion==='string')){_context4.next=8;break;}_sharpBin=require.resolve(\"sharp-cli/\".concat(sharpCliPackage.bin.sharp));return _context4.abrupt(\"return\",_sharpBin);case 8:_context4.next=12;break;case 10:_context4.prev=10;_context4.t0=_context4[\"catch\"](2);case 12:_context4.prev=12;_context4.next=15;return(0,spawn_async_1[\"default\"])('sharp',['--version']);case 15:installedCliVersion=_context4.sent.stdout.toString().trim();_context4.next=21;break;case 18:_context4.prev=18;_context4.t1=_context4[\"catch\"](12);throw notFoundError(SHARP_REQUIRED_VERSION);case 21:if(!semver_1[\"default\"].satisfies(installedCliVersion,SHARP_REQUIRED_VERSION)){showVersionMismatchWarning(SHARP_REQUIRED_VERSION,installedCliVersion);}_sharpBin='sharp';return _context4.abrupt(\"return\",_sharpBin);case 24:case\"end\":return _context4.stop();}}},_callee4,null,[[2,10],[12,18]]);}));return _findSharpBinAsync.apply(this,arguments);}function findSharpInstanceAsync(){return _findSharpInstanceAsync.apply(this,arguments);}function _findSharpInstanceAsync(){_findSharpInstanceAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var sharp,sharpCliPath,yarnGlobalPath,sharpPath;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!isSharpDisabled){_context5.next=2;break;}throw new Error('Global instance of sharp-cli cannot be retrieved because sharp-cli has been disabled with the environment variable `EXPO_IMAGE_UTILS_NO_SHARP`');case 2:if(!_sharpInstance){_context5.next=4;break;}return _context5.abrupt(\"return\",_sharpInstance);case 4:_context5.next=6;return findSharpBinAsync();case 6:_context5.prev=6;sharp=require('sharp');_sharpInstance=sharp;return _context5.abrupt(\"return\",sharp);case 12:_context5.prev=12;_context5.t0=_context5[\"catch\"](6);case 14:if(!(process.platform!=='win32')){_context5.next=25;break;}_context5.prev=15;_context5.next=18;return(0,spawn_async_1[\"default\"])('which',['sharp']);case 18:sharpCliPath=_context5.sent.stdout.toString().trim();_context5.next=23;break;case 21:_context5.prev=21;_context5.t1=_context5[\"catch\"](15);case 23:_context5.next=37;break;case 25:// On Windows systems, nested dependencies aren't linked to the paths within `require.resolve.paths`.\n// Yarn installs these modules in a different folder, let's add yarn to the other attempts.\n// See: https://github.com/expo/expo-cli/issues/2708\nyarnGlobalPath='';_context5.prev=26;_context5.t2=path_1[\"default\"];_context5.next=30;return(0,spawn_async_1[\"default\"])('yarn',['global','dir']);case 30:_context5.t3=_context5.sent.stdout.toString().trim();yarnGlobalPath=_context5.t2.join.call(_context5.t2,_context5.t3,'node_modules');_context5.next=36;break;case 34:_context5.prev=34;_context5.t4=_context5[\"catch\"](26);case 36:try{sharpCliPath=require.resolve('sharp-cli/package.json',{paths:(require.resolve.paths('sharp-cli')||[]).concat(yarnGlobalPath)});}catch(_unused7){}case 37:// resolve sharp from the sharp-cli package\nsharpPath=resolve_from_1[\"default\"].silent(sharpCliPath||'','sharp');if(sharpPath){try{// attempt to require the global sharp package\n_sharpInstance=require(sharpPath);}catch(_unused8){}}if(_sharpInstance){_context5.next=41;break;}throw new Error(\"Failed to find the instance of sharp used by the global sharp-cli package.\");case 41:return _context5.abrupt(\"return\",_sharpInstance);case 42:case\"end\":return _context5.stop();}}},_callee5,null,[[6,12],[15,21],[26,34]]);}));return _findSharpInstanceAsync.apply(this,arguments);}exports.findSharpInstanceAsync=findSharpInstanceAsync;function notFoundError(requiredCliVersion){return new Error(\"This command requires version \".concat(requiredCliVersion,\" of `sharp-cli`. \\n\")+\"You can install it using `npm install -g sharp-cli@\".concat(requiredCliVersion,\"`. \\n\")+'\\n'+'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites');}var versionMismatchWarningShown=false;function showVersionMismatchWarning(requiredCliVersion,installedCliVersion){if(versionMismatchWarningShown){return;}console.warn(\"Warning: This command requires version \".concat(requiredCliVersion,\" of `sharp-cli`. \\n\")+\"Currently installed version: \\\"\".concat(installedCliVersion,\"\\\" \\n\")+\"Required version: \\\"\".concat(requiredCliVersion,\"\\\" \\n\")+\"You can install it using `npm install -g sharp-cli@\".concat(requiredCliVersion,\"`. \\n\")+'\\n'+'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites');versionMismatchWarningShown=true;}","map":{"version":3,"sources":["../src/sharp.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { Options, SharpCommandOptions, SharpGlobalOptions } from './sharp.types';\n\nconst SHARP_HELP_PATTERN = /\\n\\nSpecify --help for available options/g;\nconst SHARP_REQUIRED_VERSION = '^1.10.0';\n\nexport async function resizeBufferAsync(buffer: Buffer, sizes: number[]): Promise<Buffer[]> {\n  const sharp = await findSharpInstanceAsync();\n\n  const metadata = await sharp(buffer).metadata();\n  // Create buffer for each size\n  const resizedBuffers = await Promise.all(\n    sizes.map(dimension => {\n      const density = (dimension / Math.max(metadata.width, metadata.height)) * metadata.density;\n      return sharp(buffer, {\n        density: isNaN(density) ? undefined : Math.ceil(density),\n      })\n        .resize(dimension, dimension, { fit: 'contain', background: 'transparent' })\n        .toBuffer();\n    })\n  );\n\n  return resizedBuffers;\n}\n\nconst isSharpDisabled = boolish('EXPO_IMAGE_UTILS_NO_SHARP', false);\n\n/**\n * Returns `true` if a global sharp instance can be found.\n * This functionality can be overridden with `process.env.EXPO_IMAGE_UTILS_NO_SHARP=1`.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (isSharpDisabled) {\n    return false;\n  }\n  try {\n    return !!(await findSharpBinAsync());\n  } catch {\n    return false;\n  }\n}\n\nexport async function sharpAsync(\n  options: SharpGlobalOptions,\n  commands: SharpCommandOptions[] = []\n): Promise<string[]> {\n  const bin = await findSharpBinAsync();\n  try {\n    const { stdout } = await spawnAsync(bin, [\n      ...getOptions(options),\n      ...getCommandOptions(commands),\n    ]);\n    const outputFilePaths = stdout.trim().split('\\n');\n    return outputFilePaths;\n  } catch (error: any) {\n    if (error.stderr) {\n      throw new Error(\n        '\\nProcessing images using sharp-cli failed: ' +\n          error.message +\n          '\\nOutput: ' +\n          error.stderr.replace(SHARP_HELP_PATTERN, '')\n      );\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getOptions(options: Options): string[] {\n  const args = [];\n  for (const [key, value] of Object.entries(options)) {\n    if (value != null && value !== false) {\n      if (typeof value === 'boolean') {\n        args.push(`--${key}`);\n      } else if (typeof value === 'number') {\n        args.push(`--${key}`, value.toFixed());\n      } else {\n        args.push(`--${key}`, value);\n      }\n    }\n  }\n  return args;\n}\n\nfunction getCommandOptions(commands: SharpCommandOptions[]): string[] {\n  const args: string[] = [];\n  for (const command of commands) {\n    if (command.operation === 'resize') {\n      const { operation, width, ...namedOptions } = command;\n      args.push(operation, width.toFixed(), ...getOptions(namedOptions));\n    } else {\n      const { operation, ...namedOptions } = command;\n      args.push(operation, ...getOptions(namedOptions));\n    }\n    args.push('--');\n  }\n  return args;\n}\n\nlet _sharpBin: string | null = null;\nlet _sharpInstance: any | null = null;\n\nasync function findSharpBinAsync(): Promise<string> {\n  if (_sharpBin) {\n    return _sharpBin;\n  }\n  try {\n    const sharpCliPackage = require('sharp-cli/package.json');\n    const libVipsVersion = require('sharp').versions.vips;\n    if (\n      sharpCliPackage &&\n      semver.satisfies(sharpCliPackage.version, SHARP_REQUIRED_VERSION) &&\n      typeof sharpCliPackage.bin.sharp === 'string' &&\n      typeof libVipsVersion === 'string'\n    ) {\n      _sharpBin = require.resolve(`sharp-cli/${sharpCliPackage.bin.sharp}`);\n      return _sharpBin;\n    }\n  } catch {\n    // fall back to global sharp-cli\n  }\n\n  let installedCliVersion;\n  try {\n    installedCliVersion = (await spawnAsync('sharp', ['--version'])).stdout.toString().trim();\n  } catch {\n    throw notFoundError(SHARP_REQUIRED_VERSION);\n  }\n\n  if (!semver.satisfies(installedCliVersion, SHARP_REQUIRED_VERSION)) {\n    showVersionMismatchWarning(SHARP_REQUIRED_VERSION, installedCliVersion);\n  }\n  _sharpBin = 'sharp';\n  return _sharpBin;\n}\n\n/**\n * Returns the instance of `sharp` installed by the global `sharp-cli` package.\n * This method will throw errors if the `sharp` instance cannot be found, these errors can be circumvented by ensuring `isAvailableAsync()` resolves to `true`.\n */\nexport async function findSharpInstanceAsync(): Promise<any | null> {\n  if (isSharpDisabled) {\n    throw new Error(\n      'Global instance of sharp-cli cannot be retrieved because sharp-cli has been disabled with the environment variable `EXPO_IMAGE_UTILS_NO_SHARP`'\n    );\n  }\n  if (_sharpInstance) {\n    return _sharpInstance;\n  }\n  // Ensure sharp-cli version is correct\n  await findSharpBinAsync();\n\n  // Attempt to use local sharp package\n  try {\n    const sharp = require('sharp');\n    _sharpInstance = sharp;\n    return sharp;\n  } catch {}\n\n  // Attempt to resolve the sharp instance used by the global CLI\n  let sharpCliPath;\n  if (process.platform !== 'win32') {\n    try {\n      sharpCliPath = (await spawnAsync('which', ['sharp'])).stdout.toString().trim();\n    } catch {}\n  } else {\n    // On Windows systems, nested dependencies aren't linked to the paths within `require.resolve.paths`.\n    // Yarn installs these modules in a different folder, let's add yarn to the other attempts.\n    // See: https://github.com/expo/expo-cli/issues/2708\n    let yarnGlobalPath = '';\n    try {\n      yarnGlobalPath = path.join(\n        (await spawnAsync('yarn', ['global', 'dir'])).stdout.toString().trim(),\n        'node_modules'\n      );\n    } catch {}\n    try {\n      sharpCliPath = require.resolve('sharp-cli/package.json', {\n        paths: (require.resolve.paths('sharp-cli') || []).concat(yarnGlobalPath),\n      });\n    } catch {}\n  }\n\n  // resolve sharp from the sharp-cli package\n  const sharpPath = resolveFrom.silent(sharpCliPath || '', 'sharp');\n\n  if (sharpPath) {\n    try {\n      // attempt to require the global sharp package\n      _sharpInstance = require(sharpPath);\n    } catch {}\n  }\n\n  if (!_sharpInstance) {\n    throw new Error(`Failed to find the instance of sharp used by the global sharp-cli package.`);\n  }\n\n  return _sharpInstance;\n}\n\nfunction notFoundError(requiredCliVersion: string): Error {\n  return new Error(\n    `This command requires version ${requiredCliVersion} of \\`sharp-cli\\`. \\n` +\n      `You can install it using \\`npm install -g sharp-cli@${requiredCliVersion}\\`. \\n` +\n      '\\n' +\n      'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites'\n  );\n}\n\nlet versionMismatchWarningShown = false;\n\nfunction showVersionMismatchWarning(requiredCliVersion: string, installedCliVersion: string) {\n  if (versionMismatchWarningShown) {\n    return;\n  }\n  console.warn(\n    `Warning: This command requires version ${requiredCliVersion} of \\`sharp-cli\\`. \\n` +\n      `Currently installed version: \"${installedCliVersion}\" \\n` +\n      `Required version: \"${requiredCliVersion}\" \\n` +\n      `You can install it using \\`npm install -g sharp-cli@${requiredCliVersion}\\`. \\n` +\n      '\\n' +\n      'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites'\n  );\n  versionMismatchWarningShown = true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}