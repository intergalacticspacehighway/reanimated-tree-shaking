{"ast":null,"code":"import React from'react';import{always,block}from'../base';/**\n * @callback NodeFactory\n * Function to create a node or an array of nodes.\n * @returns {(Node[] | Node | null | undefined | Boolean)}\n */ /**\n * React hook to run a node.\n * @param {NodeFactory} nodeFactory Function to build the node to run.\n * @param dependencies Array of dependencies. Refresh the node on changes.\n */export default function useCode(nodeFactory,dependencies){if(!(React.useEffect instanceof Function))return;React.useEffect(function(){// check and correct 1st parameter\nif(!(nodeFactory instanceof Function)){console.warn('useCode() first argument should be a function that returns an animation node.');var _node=nodeFactory;nodeFactory=function nodeFactory(){return _node;};}var node=nodeFactory();if(node){// allow factory to return array\nif(node instanceof Array)node=block(node);var animatedAlways=always(node);animatedAlways.__attach();// return undo function\nreturn function(){return animatedAlways.__detach();};}},dependencies);}","map":{"version":3,"names":["React","always","block","useCode","nodeFactory","dependencies","useEffect","Function","console","warn","_node","node","Array","animatedAlways","__attach","__detach"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js"],"sourcesContent":["import React from 'react';\nimport { always, block } from '../base';\n/**\n * @callback NodeFactory\n * Function to create a node or an array of nodes.\n * @returns {(Node[] | Node | null | undefined | Boolean)}\n */\n\n/**\n * React hook to run a node.\n * @param {NodeFactory} nodeFactory Function to build the node to run.\n * @param dependencies Array of dependencies. Refresh the node on changes.\n */\n\nexport default function useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n  React.useEffect(function () {\n    // check and correct 1st parameter\n    if (!(nodeFactory instanceof Function)) {\n      console.warn('useCode() first argument should be a function that returns an animation node.');\n      var _node = nodeFactory;\n\n      nodeFactory = function nodeFactory() {\n        return _node;\n      };\n    }\n\n    var node = nodeFactory();\n\n    if (node) {\n      // allow factory to return array\n      if (node instanceof Array) node = block(node);\n      var animatedAlways = always(node);\n\n      animatedAlways.__attach(); // return undo function\n\n\n      return function () {\n        return animatedAlways.__detach();\n      };\n    }\n  }, dependencies);\n}"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,KAAjB,KAA8B,SAA9B,CACA;AACA;AACA;AACA;AACA,G,CAEA;AACA;AACA;AACA;AACA,GAEA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,WAAjB,CAA8BC,YAA9B,CAA4C,CACzD,GAAI,EAAEL,KAAK,CAACM,SAAN,WAA2BC,CAAAA,QAA7B,CAAJ,CAA4C,OAC5CP,KAAK,CAACM,SAAN,CAAgB,UAAY,CAC1B;AACA,GAAI,EAAEF,WAAW,WAAYG,CAAAA,QAAzB,CAAJ,CAAwC,CACtCC,OAAO,CAACC,IAAR,CAAa,+EAAb,EACA,GAAIC,CAAAA,KAAK,CAAGN,WAAZ,CAEAA,WAAW,CAAG,QAASA,CAAAA,WAAT,EAAuB,CACnC,MAAOM,CAAAA,KAAP,CACD,CAFD,CAGD,CAED,GAAIC,CAAAA,IAAI,CAAGP,WAAW,EAAtB,CAEA,GAAIO,IAAJ,CAAU,CACR;AACA,GAAIA,IAAI,WAAYC,CAAAA,KAApB,CAA2BD,IAAI,CAAGT,KAAK,CAACS,IAAD,CAAZ,CAC3B,GAAIE,CAAAA,cAAc,CAAGZ,MAAM,CAACU,IAAD,CAA3B,CAEAE,cAAc,CAACC,QAAf,GAA2B;AAG3B,MAAO,WAAY,CACjB,MAAOD,CAAAA,cAAc,CAACE,QAAf,EAAP,CACD,CAFD,CAGD,CACF,CAzBD,CAyBGV,YAzBH,EA0BD"},"metadata":{},"sourceType":"module"}