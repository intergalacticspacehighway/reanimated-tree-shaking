{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getLocales=getLocales;exports.getResolvedLocalesAsync=getResolvedLocalesAsync;exports.setLocalesAsync=setLocalesAsync;exports.withLocales=void 0;function _jsonFile(){var data=_interopRequireDefault(require(\"@expo/json-file\"));_jsonFile=function _jsonFile(){return data;};return data;}function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=require(\"path\");_path=function _path(){return data;};return data;}function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var withLocales=function withLocales(config){return(0,_iosPlugins().withXcodeProject)(config,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return setLocalesAsync(config,{projectRoot:config.modRequest.projectRoot,project:config.modResults});case 2:config.modResults=_context.sent;return _context.abrupt(\"return\",config);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};exports.withLocales=withLocales;function getLocales(config){var _config$locales;return(_config$locales=config.locales)!==null&&_config$locales!==void 0?_config$locales:null;}function setLocalesAsync(_x2,_x3){return _setLocalesAsync.apply(this,arguments);}function _setLocalesAsync(){_setLocalesAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config,_ref2){var projectRoot,project,locales,localesMap,projectName,supportingDirectory,stringName,_i,_Object$entries,_Object$entries$_i,lang,localizationObj,dir,strings,buffer,_i2,_Object$entries2,_Object$entries2$_i,plistKey,localVersion,groupName,group;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:projectRoot=_ref2.projectRoot,project=_ref2.project;locales=getLocales(config);if(locales){_context2.next=4;break;}return _context2.abrupt(\"return\",project);case 4:_context2.next=6;return getResolvedLocalesAsync(projectRoot,locales);case 6:localesMap=_context2.sent;projectName=(0,_Xcodeproj().getProjectName)(projectRoot);supportingDirectory=(0,_path().join)(projectRoot,'ios',projectName,'Supporting');// TODO: Should we delete all before running? Revisit after we land on a lock file.\nstringName='InfoPlist.strings';_i=0,_Object$entries=Object.entries(localesMap);case 11:if(!(_i<_Object$entries.length)){_context2.next=27;break;}_Object$entries$_i=_slicedToArray(_Object$entries[_i],2),lang=_Object$entries$_i[0],localizationObj=_Object$entries$_i[1];dir=(0,_path().join)(supportingDirectory,\"\".concat(lang,\".lproj\"));// await fs.ensureDir(dir);\n_context2.next=16;return _fs()[\"default\"].promises.mkdir(dir,{recursive:true});case 16:strings=(0,_path().join)(dir,stringName);buffer=[];for(_i2=0,_Object$entries2=Object.entries(localizationObj);_i2<_Object$entries2.length;_i2++){_Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),plistKey=_Object$entries2$_i[0],localVersion=_Object$entries2$_i[1];buffer.push(\"\".concat(plistKey,\" = \\\"\").concat(localVersion,\"\\\";\"));}// Write the file to the file system.\n_context2.next=21;return _fs()[\"default\"].promises.writeFile(strings,buffer.join('\\n'));case 21:groupName=\"\".concat(projectName,\"/Supporting/\").concat(lang,\".lproj\");// deep find the correct folder\ngroup=(0,_Xcodeproj().ensureGroupRecursively)(project,groupName);// Ensure the file doesn't already exist\nif(!(group!==null&&group!==void 0&&group.children.some(function(_ref3){var comment=_ref3.comment;return comment===stringName;}))){// Only write the file if it doesn't already exist.\nproject=(0,_Xcodeproj().addResourceFileToGroup)({filepath:(0,_path().relative)(supportingDirectory,strings),groupName:groupName,project:project,isBuildFile:true,verbose:true});}case 24:_i++;_context2.next=11;break;case 27:return _context2.abrupt(\"return\",project);case 28:case\"end\":return _context2.stop();}}},_callee2);}));return _setLocalesAsync.apply(this,arguments);}function getResolvedLocalesAsync(_x4,_x5){return _getResolvedLocalesAsync.apply(this,arguments);}function _getResolvedLocalesAsync(){_getResolvedLocalesAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(projectRoot,input){var locales,_i3,_Object$entries3,_Object$entries3$_i,lang,localeJsonPath;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:locales={};_i3=0,_Object$entries3=Object.entries(input);case 2:if(!(_i3<_Object$entries3.length)){_context3.next=20;break;}_Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),lang=_Object$entries3$_i[0],localeJsonPath=_Object$entries3$_i[1];if(!(typeof localeJsonPath==='string')){_context3.next=16;break;}_context3.prev=5;_context3.next=8;return _jsonFile()[\"default\"].readAsync((0,_path().join)(projectRoot,localeJsonPath));case 8:locales[lang]=_context3.sent;_context3.next=14;break;case 11:_context3.prev=11;_context3.t0=_context3[\"catch\"](5);// Add a warning when a json file cannot be parsed.\n(0,_warnings().addWarningIOS)(\"locales.\".concat(lang),\"Failed to parse JSON of locale file for language: \".concat(lang),'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app');case 14:_context3.next=17;break;case 16:// In the off chance that someone defined the locales json in the config, pass it directly to the object.\n// We do this to make the types more elegant.\nlocales[lang]=localeJsonPath;case 17:_i3++;_context3.next=2;break;case 20:return _context3.abrupt(\"return\",locales);case 21:case\"end\":return _context3.stop();}}},_callee3,null,[[5,11]]);}));return _getResolvedLocalesAsync.apply(this,arguments);}","map":{"version":3,"sources":["../../src/ios/Locales.ts"],"names":["withLocales","config","setLocalesAsync","projectRoot","project","modResults","locales","getLocales","localesMap","getResolvedLocalesAsync","projectName","supportingDirectory","stringName","Object","dir","recursive","strings","buffer","plistKey","fs","groupName","group","comment","filepath","isBuildFile","verbose","JsonFile"],"mappings":"spBACA,QAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,KAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAIA,QAAA,CAAA,WAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,UAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA,UAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,qFAMO,GAAMA,CAAAA,WAAyB,CAAGC,QAA5BD,CAAAA,WAA4BC,CAAAA,MAAM,CAAI,CACjD,MAAO,CAAA,EAAA,WAAA,GAAA,gBAAA,EAAA,MAAA,0FAAyB,iBAAA,MAAA,wIACJC,CAAAA,eAAe,CAAA,MAAA,CAAS,CAChDC,WAAW,CAAEF,MAAM,CAANA,UAAAA,CADmC,WAAA,CAEhDG,OAAO,CAAEH,MAAM,CAACI,UAFgC,CAAT,CADX,QAC9BJ,MAAM,CAANA,UAD8B,+CAK9B,MAL8B,wDAAzB,+DAAP,CADK,CAAA,C,gCAUA,QAAA,CAAA,UAAA,CAAA,MAAA,CAEuC,CAAA,GAAA,CAAA,eAAA,CAC5C,MAAA,CAAA,eAAA,CAAOA,MAAM,CAAb,OAAA,IAAA,IAAA,EAAA,eAAA,GAAA,IAAA,EAAA,CAAA,eAAA,CAAA,IAAA,CACD,C,QAEM,CAAA,e,8JAAA,kBAAA,MAAA,+WAEL,WAFK,OAEL,WAFK,CAEUG,OAFV,OAEUA,OAFV,CAICE,OAJD,CAIWC,UAAU,CAA1B,MAA0B,CAJrB,IAKL,OALK,2DAMH,OANG,gCASoBE,CAAAA,uBAAuB,CAAA,WAAA,CAAhD,OAAgD,CAT3C,QASCD,UATD,gBAWCE,WAXD,CAWe,CAAA,EAAA,UAAA,GAAA,cAAA,EAApB,WAAoB,CAXf,CAYCC,mBAZD,CAYuB,CAAA,EAAA,KAAA,GAAA,IAAA,EAAA,WAAA,CAAA,KAAA,CAAA,WAAA,CATL,YASK,CAZvB,CAcL;AACMC,UAfD,CAeL,mBAfK,sBAiBiCC,MAAM,CAANA,OAAAA,CAAtC,UAAsCA,CAjBjC,4HAiBM,IAjBN,uBAiBL,eAjBK,uBAkBGC,GAlBH,CAkBS,CAAA,EAAA,KAAA,GAAA,IAAA,EAAA,mBAAA,WADoD,IACpD,WAlBT,CAmBH;AAnBG,wBAoBG,CAAA,GAAA,aAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAuB,CAAEC,SAAS,CAAE,IAAb,CAAvB,CApBH,SAsBGC,OAtBH,CAsBa,CAAA,EAAA,KAAA,GAAA,IAAA,EAAA,GAAA,CAAhB,UAAgB,CAtBb,CAuBGC,MAvBH,CAuBH,EAvBG,CAwBH,2BAAuCJ,MAAM,CAANA,OAAAA,CAAvC,eAAuCA,CAAvC,mCAAwE,6DAA7D,QAA6D,wBAAxE,YAAwE,wBACtEI,MAAM,CAANA,IAAAA,WAAeC,QAAfD,iBAAAA,YAAAA,SAR8D,CAUhE;AA3BG,wBA4BGE,CAAAA,GAAAA,aAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,OAAAA,CAA+BF,MAAM,CAANA,IAAAA,CAArC,IAAqCA,CAA/BE,CA5BH,SA8BGC,SA9BH,WA8BkBV,WA9BlB,wBAiB6D,IAjB7D,WA+BH;AACMW,KAhCH,CAgCW,CAAA,EAAA,UAAA,GAAA,sBAAA,EAAA,OAAA,CAfkD,SAelD,CAhCX,CAkCH;AACA,GAAI,EAACA,KAAD,GAAA,IAACA,EAAAA,KAAD,GAAA,IAAA,EAACA,EAAAA,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAqB,mBAAGC,CAAAA,OAAH,OAAGA,OAAH,OAAiBA,CAAAA,OAAO,GAAlD,UAA0B,EAArBD,CAAD,CAAJ,CAAoE,CAClE;AACAjB,OAAO,CAAG,CAAA,EAAA,UAAA,GAAA,sBAAA,EAAuB,CAC/BmB,QAAQ,CAAE,CAAA,EAAA,KAAA,GAAA,QAAA,EAAA,mBAAA,CADqB,OACrB,CADqB,CAE/BH,SAF+B,CAE/BA,SAF+B,CAG/BhB,OAH+B,CAG/BA,OAH+B,CAI/BoB,WAAW,CAJoB,IAAA,CAK/BC,OAAO,CAAE,IALsB,CAAvB,CAAVrB,CAOD,CA5CE,8EA+CL,OA/CK,2D,0DAkDA,CAAA,uB,sLAAA,kBAAA,WAAA,CAAA,KAAA,+LAICE,OAJD,CAIL,EAJK,wBAKgCO,MAAM,CAANA,OAAAA,CAArC,KAAqCA,CALhC,gIAKM,IALN,wBAKL,cALK,6BAMC,MAAA,CAAA,cAAA,GAAJ,QANG,oEAQuBa,CAAAA,SAAAA,aAAAA,CAAAA,SAAAA,CAAmB,CAAA,EAAA,KAAA,GAAA,IAAA,EAAA,WAAA,CAAzCpB,cAAyC,CAAnBoB,CARvB,QAQCpB,OAAO,CAAPA,IAAO,CARR,qGAUC;AACA,CAAA,EAAA,SAAA,GAAA,aAAA,oBAAA,IAAA,8DAAA,IAAA,EAAA,wEAAA,EAXD,wCAkBD;AACA;AACAA,OAAO,CAAPA,IAAO,CAAPA,CAAAA,cAAAA,CApBC,8EAwBL,OAxBK,yE","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs';\nimport { join, relative } from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\n\ntype LocaleJson = Record<string, string>;\ntype ResolvedLocalesJson = Record<string, LocaleJson>;\ntype ExpoConfigLocales = NonNullable<ExpoConfig['locales']>;\n\nexport const withLocales: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setLocalesAsync(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n): Promise<XcodeProject> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return project;\n  }\n  // possibly validate CFBundleAllowMixedLocalizations is enabled\n  const localesMap = await getResolvedLocalesAsync(projectRoot, locales);\n\n  const projectName = getProjectName(projectRoot);\n  const supportingDirectory = join(projectRoot, 'ios', projectName, 'Supporting');\n\n  // TODO: Should we delete all before running? Revisit after we land on a lock file.\n  const stringName = 'InfoPlist.strings';\n\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    const dir = join(supportingDirectory, `${lang}.lproj`);\n    // await fs.ensureDir(dir);\n    await fs.promises.mkdir(dir, { recursive: true });\n\n    const strings = join(dir, stringName);\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    // Write the file to the file system.\n    await fs.promises.writeFile(strings, buffer.join('\\n'));\n\n    const groupName = `${projectName}/Supporting/${lang}.lproj`;\n    // deep find the correct folder\n    const group = ensureGroupRecursively(project, groupName);\n\n    // Ensure the file doesn't already exist\n    if (!group?.children.some(({ comment }) => comment === stringName)) {\n      // Only write the file if it doesn't already exist.\n      project = addResourceFileToGroup({\n        filepath: relative(supportingDirectory, strings),\n        groupName,\n        project,\n        isBuildFile: true,\n        verbose: true,\n      });\n    }\n  }\n\n  return project;\n}\n\nexport async function getResolvedLocalesAsync(\n  projectRoot: string,\n  input: ExpoConfigLocales\n): Promise<ResolvedLocalesJson> {\n  const locales: ResolvedLocalesJson = {};\n  for (const [lang, localeJsonPath] of Object.entries(input)) {\n    if (typeof localeJsonPath === 'string') {\n      try {\n        locales[lang] = await JsonFile.readAsync(join(projectRoot, localeJsonPath));\n      } catch {\n        // Add a warning when a json file cannot be parsed.\n        addWarningIOS(\n          `locales.${lang}`,\n          `Failed to parse JSON of locale file for language: ${lang}`,\n          'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app'\n        );\n      }\n    } else {\n      // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n      // We do this to make the types more elegant.\n      locales[lang] = localeJsonPath;\n    }\n  }\n\n  return locales;\n}\n"]},"metadata":{},"sourceType":"script"}