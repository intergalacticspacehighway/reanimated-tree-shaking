{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.overrideWithPropertyOrConfig=exports.enableWithPropertyOrConfig=void 0;function isObject(val){if(val===null){return false;}return typeof val==='function'||typeof val==='object';}/**\n * Given a config option that could evalutate to true, config, or null; return a config.\n * e.g.\n * `polyfill: true` returns the `config`\n * `polyfill: {}` returns `{}`\n *\n * @category utils\n */function enableWithPropertyOrConfig(prop,config){var merge=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Value is truthy.\nif(prop){if(isObject(prop)){if(merge){if(config==null||typeof config!=='object'){throw new Error('enableWithPropertyOrConfig cannot merge config: '+config);}return _objectSpread(_objectSpread({},config),prop);}// Return property\nreturn prop;}// Value is truthy but not a replacement config, thus return the default config.\nreturn config;}// Return falsey.\nreturn prop;}exports.enableWithPropertyOrConfig=enableWithPropertyOrConfig;/**\n * Used for features that are enabled by default unless specified otherwise.\n *\n * @category utils\n */function overrideWithPropertyOrConfig(prop,config){var merge=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(prop===undefined){return config;}return enableWithPropertyOrConfig(prop,config,merge);}exports.overrideWithPropertyOrConfig=overrideWithPropertyOrConfig;","map":{"version":3,"sources":["../../src/utils/config.ts"],"names":[],"mappings":"8iCAAA,QAAS,CAAA,QAAT,CAAkB,GAAlB,CAA0B,CACxB,GAAI,GAAG,GAAK,IAAZ,CAAkB,CAChB,MAAO,MAAP,CACD,CACD,MAAO,OAAO,CAAA,GAAP,GAAe,UAAf,EAA6B,MAAO,CAAA,GAAP,GAAe,QAAnD,CACD,CAED;;;;;;;AAOG,GACH,QAAgB,CAAA,0BAAhB,CACE,IADF,CAEE,MAFF,CAGwB,IAAtB,CAAA,KAAsB,2DAAL,KAAK,CAEtB;AACA,GAAI,IAAJ,CAAU,CACR,GAAI,QAAQ,CAAC,IAAD,CAAZ,CAAoB,CAClB,GAAI,KAAJ,CAAW,CACT,GAAI,MAAM,EAAI,IAAV,EAAkB,MAAO,CAAA,MAAP,GAAkB,QAAxC,CAAkD,CAChD,KAAM,IAAI,CAAA,KAAJ,CAAU,mDAAqD,MAA/D,CAAN,CACD,CACD,sCACK,MADL,EAEK,IAFL,EAID,CAED;AACA,MAAO,CAAA,IAAP,CACD,CAED;AACA,MAAO,CAAA,MAAP,CACD,CACD;AACA,MAAO,CAAA,IAAP,CACD,CA3BD,OAAA,CAAA,0BAAA,CAAA,0BAAA,CA6BA;;;;AAIG,GACH,QAAgB,CAAA,4BAAhB,CACE,IADF,CAEE,MAFF,CAGwB,IAAtB,CAAA,KAAsB,2DAAL,KAAK,CAEtB,GAAI,IAAI,GAAK,SAAb,CAAwB,CACtB,MAAO,CAAA,MAAP,CACD,CACD,MAAO,CAAA,0BAA0B,CAAC,IAAD,CAAO,MAAP,CAAe,KAAf,CAAjC,CACD,CATD,OAAA,CAAA,4BAAA,CAAA,4BAAA","sourcesContent":["function isObject(val: any): boolean {\n  if (val === null) {\n    return false;\n  }\n  return typeof val === 'function' || typeof val === 'object';\n}\n\n/**\n * Given a config option that could evalutate to true, config, or null; return a config.\n * e.g.\n * `polyfill: true` returns the `config`\n * `polyfill: {}` returns `{}`\n *\n * @category utils\n */\nexport function enableWithPropertyOrConfig(\n  prop: any,\n  config: boolean | { [key: string]: any },\n  merge: boolean = false\n): any {\n  // Value is truthy.\n  if (prop) {\n    if (isObject(prop)) {\n      if (merge) {\n        if (config == null || typeof config !== 'object') {\n          throw new Error('enableWithPropertyOrConfig cannot merge config: ' + config);\n        }\n        return {\n          ...config,\n          ...prop,\n        };\n      }\n\n      // Return property\n      return prop;\n    }\n\n    // Value is truthy but not a replacement config, thus return the default config.\n    return config;\n  }\n  // Return falsey.\n  return prop;\n}\n\n/**\n * Used for features that are enabled by default unless specified otherwise.\n *\n * @category utils\n */\nexport function overrideWithPropertyOrConfig(\n  prop: any,\n  config: boolean | { [key: string]: any },\n  merge: boolean = false\n): any {\n  if (prop === undefined) {\n    return config;\n  }\n  return enableWithPropertyOrConfig(prop, config, merge);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}