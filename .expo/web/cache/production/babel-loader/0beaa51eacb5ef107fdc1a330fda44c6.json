{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.serializeAfterStaticPlugins=serializeAfterStaticPlugins;exports.serializeAndEvaluate=serializeAndEvaluate;exports.serializeSkippingMods=serializeSkippingMods;function _Errors(){var data=require(\"./Errors\");_Errors=function _Errors(){return data;};return data;}function serializeAndEvaluate(val){if(['undefined','string','boolean','number','bigint'].includes(typeof val)){return val;}else if(typeof val==='function'){// TODO: Bacon: Should we support async methods?\nreturn val();}else if(Array.isArray(val)){return val.map(serializeAndEvaluate);}else if(typeof val==='object'){var output={};for(var property in val){if(val.hasOwnProperty(property)){output[property]=serializeAndEvaluate(val[property]);}}return output;}// symbol\nthrow new(_Errors().ConfigError)(\"Expo config doesn't support `Symbols`: \".concat(val),'INVALID_CONFIG');}function serializeSkippingMods(val){if(typeof val==='object'&&!Array.isArray(val)){var output={};for(var property in val){if(val.hasOwnProperty(property)){if(property==='mods'||property==='plugins'){// Don't serialize mods or plugins\noutput[property]=val[property];}else{output[property]=serializeAndEvaluate(val[property]);}}}return output;}return serializeAndEvaluate(val);}function serializeAndEvaluatePlugin(val){if(['undefined','string','boolean','number','bigint'].includes(typeof val)){return val;}else if(typeof val==='function'){var _val$name;return(_val$name=val.name)!==null&&_val$name!==void 0?_val$name:'withAnonymous';}else if(Array.isArray(val)){return val.map(serializeAndEvaluatePlugin);}else if(typeof val==='object'){var output={};for(var property in val){if(val.hasOwnProperty(property)){output[property]=serializeAndEvaluatePlugin(val[property]);}}return output;}// symbol\nthrow new(_Errors().ConfigError)(\"Expo config doesn't support `Symbols`: \".concat(val),'INVALID_CONFIG');}function serializeAfterStaticPlugins(val){if(typeof val==='object'&&!Array.isArray(val)){var output={};for(var property in val){if(val.hasOwnProperty(property)){if(property==='mods'){// Don't serialize mods\noutput[property]=val[property];}else if(property==='plugins'&&Array.isArray(val[property])){// Serialize the mods by removing any config plugins\noutput[property]=val[property].map(serializeAndEvaluatePlugin);}else{output[property]=serializeAndEvaluate(val[property]);}}}return output;}return serializeAndEvaluate(val);}","map":{"version":3,"sources":["../src/Serialize.ts"],"names":["val","Array","output","serializeAndEvaluate","ConfigError","property","serializeAndEvaluatePlugin"],"mappings":"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","sourcesContent":["import { ConfigError } from './Errors';\n\nexport function serializeAndEvaluate(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    // TODO: Bacon: Should we support async methods?\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeSkippingMods(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods' || property === 'plugins') {\n          // Don't serialize mods or plugins\n          output[property] = val[property];\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n\nfunction serializeAndEvaluatePlugin(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return val.name ?? 'withAnonymous';\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluatePlugin);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluatePlugin(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeAfterStaticPlugins(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods') {\n          // Don't serialize mods\n          output[property] = val[property];\n        } else if (property === 'plugins' && Array.isArray(val[property])) {\n          // Serialize the mods by removing any config plugins\n          output[property] = val[property].map(serializeAndEvaluatePlugin);\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n"]},"metadata":{},"sourceType":"script"}