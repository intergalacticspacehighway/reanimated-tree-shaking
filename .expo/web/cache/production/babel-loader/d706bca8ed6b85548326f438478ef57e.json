{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.getHtmlLoaderRule=exports.getBabelLoaderRule=exports.styleLoaderRule=exports.fallbackLoaderRule=exports.imageLoaderRule=void 0;var paths_1=require(\"@expo/config/paths\");var env_1=require(\"../env\");var createBabelLoader_1=__importDefault(require(\"./createBabelLoader\"));var createFontLoader_1=__importDefault(require(\"./createFontLoader\"));// Inline resources as Base64 when there is less reason to parallelize their download. The\n// heuristic we use is whether the resource would fit within a TCP/IP packet that we would\n// send to request the resource.\n//\n// An Ethernet MTU is usually 1500. IP headers are 20 (v4) or 40 (v6) bytes and TCP\n// headers are 40 bytes. HTTP response headers vary and are around 400 bytes. This leaves\n// about 1000 bytes for content to fit in a packet.\nvar imageInlineSizeLimit=parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT||'1000',10);/**\n * This is needed for webpack to import static images in JavaScript files.\n * \"url\" loader works like \"file\" loader except that it embeds assets\n * smaller than specified limit in bytes as data URLs to avoid requests.\n * A missing `test` is equivalent to a match.\n *\n * @category loaders\n */ // TODO: Bacon: Move SVG\nexports.imageLoaderRule={test:/\\.(gif|jpe?g|png|svg)$/,use:{loader:require.resolve('url-loader'),options:{limit:imageInlineSizeLimit,// Interop assets like Metro bundler\nesModule:false,name:'static/media/[name].[hash:8].[ext]'}}};/**\n * \"file\" loader makes sure those assets get served by WebpackDevServer.\n * When you `import` an asset, you get its (virtual) filename.\n * In production, they would get copied to the `build` folder.\n * This loader doesn't use a \"test\" so it will catch all modules\n * that fall through the other loaders.\n *\n * @category loaders\n */exports.fallbackLoaderRule={loader:require.resolve('file-loader'),// Exclude `js` files to keep \"css\" loader working as it injects\n// its runtime that would otherwise be processed through \"file\" loader.\n// Also exclude `html` and `json` extensions so they get processed\n// by webpacks internal loaders.\n// Excludes: js, jsx, ts, tsx, html, json\nexclude:[/\\.(mjs|[jt]sx?)$/,/\\.html$/,/\\.json$/],options:{// Interop assets like Metro bundler\nesModule:false,name:'static/media/[name].[hash:8].[ext]'}};/**\n * Default CSS loader.\n *\n * @category loaders\n */exports.styleLoaderRule={test:/\\.(css)$/,use:[require.resolve('style-loader'),require.resolve('css-loader')]};/**\n * Create the fallback loader for parsing any unhandled file type.\n *\n * @param env\n * @category loaders\n */function createAllLoaders(env){env.projectRoot=env.projectRoot||(0,paths_1.getPossibleProjectRoot)();// @ts-ignore\nenv.config=env.config||(0,env_1.getConfig)(env);// @ts-ignore\nenv.locations=env.locations||(0,env_1.getPaths)(env.projectRoot,env);var _env$locations=env.locations,root=_env$locations.root,includeModule=_env$locations.includeModule,template=_env$locations.template;var isNative=['ios','android'].includes(env.platform);if(isNative){// TODO: Support fallback loader + assets\nreturn[getHtmlLoaderRule(template.folder),getBabelLoaderRule(env)];}return[getHtmlLoaderRule(template.folder),exports.imageLoaderRule,getBabelLoaderRule(env),(0,createFontLoader_1[\"default\"])(root,includeModule),exports.styleLoaderRule,// This needs to be the last loader\nexports.fallbackLoaderRule].filter(Boolean);}exports[\"default\"]=createAllLoaders;/**\n * Creates a Rule for loading application code and packages that work with the Expo ecosystem.\n * This method attempts to emulate how Metro loads ES modules in the `node_modules` folder.\n *\n * @param env partial Environment object.\n * @category loaders\n */function getBabelLoaderRule(env){var _a;env.projectRoot=env.projectRoot||(0,paths_1.getPossibleProjectRoot)();// @ts-ignore\nenv.config=env.config||(0,env_1.getConfig)(env);env.locations=env.locations||(0,env_1.getPaths)(env.projectRoot,env);var _env$config$web=env.config.web;_env$config$web=_env$config$web===void 0?{}:_env$config$web;var _env$config$web$build=_env$config$web.build;_env$config$web$build=_env$config$web$build===void 0?{}:_env$config$web$build;var _env$config$web$build2=_env$config$web$build.babel,babel=_env$config$web$build2===void 0?{}:_env$config$web$build2;// TODO: deprecate app.json method in favor of env.babel\nvar root=babel.root,verbose=babel.verbose,_babel$include=babel.include,include=_babel$include===void 0?[]:_babel$include,use=babel.use;var babelProjectRoot=root||env.projectRoot;return(0,createBabelLoader_1[\"default\"])({projectRoot:env.locations.root,mode:env.mode,platform:env.platform,babelProjectRoot:babelProjectRoot,verbose:verbose,include:[].concat(_toConsumableArray(include),_toConsumableArray(((_a=env.babel)===null||_a===void 0?void 0:_a.dangerouslyAddModulePathsToTranspile)||[])),use:use});}exports.getBabelLoaderRule=getBabelLoaderRule;/**\n *\n * @param exclude\n * @category loaders\n */function getHtmlLoaderRule(exclude){return{test:/\\.html$/,use:[require.resolve('html-loader')],exclude:exclude};}exports.getHtmlLoaderRule=getHtmlLoaderRule;","map":{"version":3,"sources":["../../src/loaders/createAllLoaders.ts"],"names":[],"mappings":"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","sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport { Rule } from 'webpack';\n\nimport { getConfig, getPaths } from '../env';\nimport { Environment } from '../types';\nimport createBabelLoader from './createBabelLoader';\nimport createFontLoader from './createFontLoader';\n\n// Inline resources as Base64 when there is less reason to parallelize their download. The\n// heuristic we use is whether the resource would fit within a TCP/IP packet that we would\n// send to request the resource.\n//\n// An Ethernet MTU is usually 1500. IP headers are 20 (v4) or 40 (v6) bytes and TCP\n// headers are 40 bytes. HTTP response headers vary and are around 400 bytes. This leaves\n// about 1000 bytes for content to fit in a packet.\nconst imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '1000', 10);\n\n/**\n * This is needed for webpack to import static images in JavaScript files.\n * \"url\" loader works like \"file\" loader except that it embeds assets\n * smaller than specified limit in bytes as data URLs to avoid requests.\n * A missing `test` is equivalent to a match.\n *\n * @category loaders\n */\n// TODO: Bacon: Move SVG\nexport const imageLoaderRule: Rule = {\n  test: /\\.(gif|jpe?g|png|svg)$/,\n  use: {\n    loader: require.resolve('url-loader'),\n    options: {\n      limit: imageInlineSizeLimit,\n      // Interop assets like Metro bundler\n      esModule: false,\n      name: 'static/media/[name].[hash:8].[ext]',\n    },\n  },\n};\n\n/**\n * \"file\" loader makes sure those assets get served by WebpackDevServer.\n * When you `import` an asset, you get its (virtual) filename.\n * In production, they would get copied to the `build` folder.\n * This loader doesn't use a \"test\" so it will catch all modules\n * that fall through the other loaders.\n *\n * @category loaders\n */\nexport const fallbackLoaderRule: Rule = {\n  loader: require.resolve('file-loader'),\n  // Exclude `js` files to keep \"css\" loader working as it injects\n  // its runtime that would otherwise be processed through \"file\" loader.\n  // Also exclude `html` and `json` extensions so they get processed\n  // by webpacks internal loaders.\n\n  // Excludes: js, jsx, ts, tsx, html, json\n  exclude: [/\\.(mjs|[jt]sx?)$/, /\\.html$/, /\\.json$/],\n  options: {\n    // Interop assets like Metro bundler\n    esModule: false,\n    name: 'static/media/[name].[hash:8].[ext]',\n  },\n};\n\n/**\n * Default CSS loader.\n *\n * @category loaders\n */\nexport const styleLoaderRule: Rule = {\n  test: /\\.(css)$/,\n  use: [require.resolve('style-loader'), require.resolve('css-loader')],\n};\n\n/**\n * Create the fallback loader for parsing any unhandled file type.\n *\n * @param env\n * @category loaders\n */\nexport default function createAllLoaders(\n  env: Pick<Environment, 'projectRoot' | 'locations' | 'mode' | 'config' | 'platform' | 'babel'>\n): Rule[] {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n  // @ts-ignore\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const { root, includeModule, template } = env.locations;\n  const isNative = ['ios', 'android'].includes(env.platform);\n\n  if (isNative) {\n    // TODO: Support fallback loader + assets\n    return [getHtmlLoaderRule(template.folder), getBabelLoaderRule(env)];\n  }\n\n  return [\n    getHtmlLoaderRule(template.folder),\n    imageLoaderRule,\n    getBabelLoaderRule(env),\n    createFontLoader(root, includeModule),\n    styleLoaderRule,\n    // This needs to be the last loader\n    fallbackLoaderRule,\n  ].filter(Boolean) as Rule[];\n}\n\n/**\n * Creates a Rule for loading application code and packages that work with the Expo ecosystem.\n * This method attempts to emulate how Metro loads ES modules in the `node_modules` folder.\n *\n * @param env partial Environment object.\n * @category loaders\n */\nexport function getBabelLoaderRule(\n  env: Pick<Environment, 'projectRoot' | 'config' | 'locations' | 'mode' | 'platform' | 'babel'>\n): Rule {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const { web: { build: { babel = {} } = {} } = {} } = env.config;\n\n  // TODO: deprecate app.json method in favor of env.babel\n  const { root, verbose, include = [], use } = babel;\n\n  const babelProjectRoot = root || env.projectRoot;\n\n  return createBabelLoader({\n    projectRoot: env.locations.root,\n    mode: env.mode,\n    platform: env.platform,\n    babelProjectRoot,\n    verbose,\n    include: [...include, ...(env.babel?.dangerouslyAddModulePathsToTranspile || [])],\n    use,\n  });\n}\n\n/**\n *\n * @param exclude\n * @category loaders\n */\nexport function getHtmlLoaderRule(exclude: string): Rule {\n  return {\n    test: /\\.html$/,\n    use: [require.resolve('html-loader')],\n    exclude,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}