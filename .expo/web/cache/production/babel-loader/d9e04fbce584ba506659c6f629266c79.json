{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */var base64=require('./base64');// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\nvar VLQ_BASE_SHIFT=5;// binary: 100000\nvar VLQ_BASE=1<<VLQ_BASE_SHIFT;// binary: 011111\nvar VLQ_BASE_MASK=VLQ_BASE-1;// binary: 100000\nvar VLQ_CONTINUATION_BIT=VLQ_BASE;/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */function toVLQSigned(aValue){return aValue<0?(-aValue<<1)+1:(aValue<<1)+0;}/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */function fromVLQSigned(aValue){var isNegative=(aValue&1)===1;var shifted=aValue>>1;return isNegative?-shifted:shifted;}/**\n * Returns the base 64 VLQ encoded value.\n */exports.encode=function base64VLQ_encode(aValue){var encoded=\"\";var digit;var vlq=toVLQSigned(aValue);do{digit=vlq&VLQ_BASE_MASK;vlq>>>=VLQ_BASE_SHIFT;if(vlq>0){// There are still more digits in this value, so we must make sure the\n// continuation bit is marked.\ndigit|=VLQ_CONTINUATION_BIT;}encoded+=base64.encode(digit);}while(vlq>0);return encoded;};/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */exports.decode=function base64VLQ_decode(aStr,aIndex,aOutParam){var strLen=aStr.length;var result=0;var shift=0;var continuation,digit;do{if(aIndex>=strLen){throw new Error(\"Expected more digits in base 64 VLQ value.\");}digit=base64.decode(aStr.charCodeAt(aIndex++));if(digit===-1){throw new Error(\"Invalid base64 digit: \"+aStr.charAt(aIndex-1));}continuation=!!(digit&VLQ_CONTINUATION_BIT);digit&=VLQ_BASE_MASK;result=result+(digit<<shift);shift+=VLQ_BASE_SHIFT;}while(continuation);aOutParam.value=fromVLQSigned(result);aOutParam.rest=aIndex;};","map":{"version":3,"names":["base64","require","VLQ_BASE_SHIFT","VLQ_BASE","VLQ_BASE_MASK","VLQ_CONTINUATION_BIT","toVLQSigned","aValue","fromVLQSigned","isNegative","shifted","exports","encode","base64VLQ_encode","encoded","digit","vlq","decode","base64VLQ_decode","aStr","aIndex","aOutParam","strLen","length","result","shift","continuation","Error","charCodeAt","charAt","value","rest"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/@expo/webpack-config/node_modules/source-map/lib/base64-vlq.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}