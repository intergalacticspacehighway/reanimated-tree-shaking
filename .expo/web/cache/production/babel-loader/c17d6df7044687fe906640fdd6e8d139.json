{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.escapeAndroidString=escapeAndroidString;exports.format=format;exports.parseXMLAsync=parseXMLAsync;exports.readXMLAsync=readXMLAsync;exports.unescapeAndroidString=unescapeAndroidString;exports.writeXMLAsync=writeXMLAsync;function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _os(){var data=require(\"os\");_os=function _os(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _xml2js(){var data=require(\"xml2js\");_xml2js=function _xml2js(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function writeXMLAsync(_x){return _writeXMLAsync.apply(this,arguments);}function _writeXMLAsync(){_writeXMLAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options){var xml;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:xml=format(options.xml);_context.next=3;return _fs()[\"default\"].promises.mkdir(_path()[\"default\"].dirname(options.path),{recursive:true});case 3:_context.next=5;return _fs()[\"default\"].promises.writeFile(options.path,xml);case 5:case\"end\":return _context.stop();}}},_callee);}));return _writeXMLAsync.apply(this,arguments);}function readXMLAsync(_x2){return _readXMLAsync.apply(this,arguments);}function _readXMLAsync(){_readXMLAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options){var _manifest$resources,contents,parser,manifest,_iterator2,_step2,string,_manifest$resources2;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:contents='';_context2.prev=1;_context2.next=4;return _fs()[\"default\"].promises.readFile(options.path,{encoding:'utf8',flag:'r'});case 4:contents=_context2.sent;_context2.next=9;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](1);case 9:parser=new(_xml2js().Parser)();_context2.next=12;return parser.parseStringPromise(contents||options.fallback||'');case 12:manifest=_context2.sent;if(!Array.isArray(manifest===null||manifest===void 0?void 0:(_manifest$resources=manifest.resources)===null||_manifest$resources===void 0?void 0:_manifest$resources.string)){_context2.next=32;break;}_iterator2=_createForOfIteratorHelper(manifest===null||manifest===void 0?void 0:(_manifest$resources2=manifest.resources)===null||_manifest$resources2===void 0?void 0:_manifest$resources2.string);_context2.prev=15;_iterator2.s();case 17:if((_step2=_iterator2.n()).done){_context2.next=24;break;}string=_step2.value;if(!(string.$.translatable==='false'||string.$.translatable===false)){_context2.next=21;break;}return _context2.abrupt(\"continue\",22);case 21:string._=unescapeAndroidString(string._);case 22:_context2.next=17;break;case 24:_context2.next=29;break;case 26:_context2.prev=26;_context2.t1=_context2[\"catch\"](15);_iterator2.e(_context2.t1);case 29:_context2.prev=29;_iterator2.f();return _context2.finish(29);case 32:return _context2.abrupt(\"return\",manifest);case 33:case\"end\":return _context2.stop();}}},_callee2,null,[[1,7],[15,26,29,32]]);}));return _readXMLAsync.apply(this,arguments);}function parseXMLAsync(_x3){return _parseXMLAsync.apply(this,arguments);}function _parseXMLAsync(){_parseXMLAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contents){var xml;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return new(_xml2js().Parser)().parseStringPromise(contents);case 2:xml=_context3.sent;return _context3.abrupt(\"return\",xml);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return _parseXMLAsync.apply(this,arguments);}var stringTimesN=function stringTimesN(n,_char){return Array(n+1).join(_char);};function format(manifest){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref$indentLevel=_ref.indentLevel,indentLevel=_ref$indentLevel===void 0?2:_ref$indentLevel,_ref$newline=_ref.newline,newline=_ref$newline===void 0?_os().EOL:_ref$newline;var xmlInput;if(typeof manifest==='string'){xmlInput=manifest;}else if(manifest.toString){var _manifest$resources3;var builder=new(_xml2js().Builder)({headless:true});// For strings.xml\nif(Array.isArray(manifest===null||manifest===void 0?void 0:(_manifest$resources3=manifest.resources)===null||_manifest$resources3===void 0?void 0:_manifest$resources3.string)){var _iterator=_createForOfIteratorHelper(manifest===null||manifest===void 0?void 0:(_manifest$resources4=manifest.resources)===null||_manifest$resources4===void 0?void 0:_manifest$resources4.string),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var string=_step.value;var _manifest$resources4;if(string.$.translatable==='false'||string.$.translatable===false){continue;}string._=escapeAndroidString(string._);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}xmlInput=builder.buildObject(manifest);return xmlInput;}else{throw new Error(\"Invalid XML value passed in: \".concat(manifest));}var indentString=stringTimesN(indentLevel,' ');var formatted='';var regex=/(>)(<)(\\/*)/g;var xml=xmlInput.replace(regex,\"$1\".concat(newline,\"$2$3\"));var pad=0;xml.split(/\\r?\\n/).map(function(line){return line.trim();}).forEach(function(line){var indent=0;if(line.match(/.+<\\/\\w[^>]*>$/)){indent=0;}else if(line.match(/^<\\/\\w/)){if(pad!==0){pad-=1;}}else if(line.match(/^<\\w([^>]*[^/])?>.*$/)){indent=1;}else{indent=0;}var padding=stringTimesN(pad,indentString);formatted+=padding+line+newline;pad+=indent;});return formatted.trim();}/**\n * Escapes Android string literals, specifically characters `\"`, `'`, `\\`, `\\n`, `\\r`, `\\t`\n *\n * @param value unescaped Android XML string literal.\n */function escapeAndroidString(value){value=value.replace(/[\\n\\r\\t'\"@]/g,function(m){switch(m){case'\"':case\"'\":case'@':return'\\\\'+m;case'\\n':return'\\\\n';case'\\r':return'\\\\r';case'\\t':return'\\\\t';default:throw new Error(\"Cannot escape unhandled XML character: \".concat(m));}});if(value.match(/(^\\s|\\s$)/)){value='\"'+value+'\"';}return value;}function unescapeAndroidString(value){return value.replace(/\\\\(.)/g,'$1');}","map":{"version":3,"sources":["../../src/utils/XML.ts"],"names":["xml","format","options","path","recursive","fs","contents","encoding","flag","parser","Parser","manifest","Array","string","unescapeAndroidString","stringTimesN","n","indentLevel","newline","EOL","xmlInput","builder","Builder","headless","escapeAndroidString","indentString","formatted","regex","pad","line","indent","padding","value","m"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { EOL } from 'os';\nimport path from 'path';\nimport { Builder, Parser } from 'xml2js';\n\nexport type XMLValue = boolean | number | string | null | XMLArray | XMLObject;\n\nexport interface XMLArray extends Array<XMLValue> {}\n\nexport interface XMLObject {\n  [key: string]: XMLValue | undefined;\n}\n\nexport async function writeXMLAsync(options: { path: string; xml: any }): Promise<void> {\n  const xml = format(options.xml);\n  await fs.promises.mkdir(path.dirname(options.path), { recursive: true });\n  await fs.promises.writeFile(options.path, xml);\n}\n\nexport async function readXMLAsync(options: {\n  path: string;\n  fallback?: string | null;\n}): Promise<XMLObject> {\n  let contents: string = '';\n  try {\n    contents = await fs.promises.readFile(options.path, { encoding: 'utf8', flag: 'r' });\n  } catch {\n    // catch and use fallback\n  }\n  const parser = new Parser();\n  const manifest = await parser.parseStringPromise(contents || options.fallback || '');\n\n  // For strings.xml\n  if (Array.isArray(manifest?.resources?.string)) {\n    for (const string of manifest?.resources?.string) {\n      if (string.$.translatable === 'false' || string.$.translatable === false) {\n        continue;\n      }\n      string._ = unescapeAndroidString(string._);\n    }\n  }\n\n  return manifest;\n}\n\nexport async function parseXMLAsync(contents: string): Promise<XMLObject> {\n  const xml = await new Parser().parseStringPromise(contents);\n  return xml;\n}\n\nconst stringTimesN = (n: number, char: string) => Array(n + 1).join(char);\n\nexport function format(manifest: any, { indentLevel = 2, newline = EOL } = {}): string {\n  let xmlInput: string;\n  if (typeof manifest === 'string') {\n    xmlInput = manifest;\n  } else if (manifest.toString) {\n    const builder = new Builder({\n      headless: true,\n    });\n\n    // For strings.xml\n    if (Array.isArray(manifest?.resources?.string)) {\n      for (const string of manifest?.resources?.string) {\n        if (string.$.translatable === 'false' || string.$.translatable === false) {\n          continue;\n        }\n        string._ = escapeAndroidString(string._);\n      }\n    }\n\n    xmlInput = builder.buildObject(manifest);\n\n    return xmlInput;\n  } else {\n    throw new Error(`Invalid XML value passed in: ${manifest}`);\n  }\n  const indentString = stringTimesN(indentLevel, ' ');\n\n  let formatted = '';\n  const regex = /(>)(<)(\\/*)/g;\n  const xml = xmlInput.replace(regex, `$1${newline}$2$3`);\n  let pad = 0;\n  xml\n    .split(/\\r?\\n/)\n    .map((line: string) => line.trim())\n    .forEach((line: string) => {\n      let indent = 0;\n      if (line.match(/.+<\\/\\w[^>]*>$/)) {\n        indent = 0;\n      } else if (line.match(/^<\\/\\w/)) {\n        if (pad !== 0) {\n          pad -= 1;\n        }\n      } else if (line.match(/^<\\w([^>]*[^/])?>.*$/)) {\n        indent = 1;\n      } else {\n        indent = 0;\n      }\n\n      const padding = stringTimesN(pad, indentString);\n      formatted += padding + line + newline;\n      pad += indent;\n    });\n\n  return formatted.trim();\n}\n\n/**\n * Escapes Android string literals, specifically characters `\"`, `'`, `\\`, `\\n`, `\\r`, `\\t`\n *\n * @param value unescaped Android XML string literal.\n */\nexport function escapeAndroidString(value: string): string {\n  value = value.replace(/[\\n\\r\\t'\"@]/g, m => {\n    switch (m) {\n      case '\"':\n      case \"'\":\n      case '@':\n        return '\\\\' + m;\n      case '\\n':\n        return '\\\\n';\n      case '\\r':\n        return '\\\\r';\n      case '\\t':\n        return '\\\\t';\n      default:\n        throw new Error(`Cannot escape unhandled XML character: ${m}`);\n    }\n  });\n  if (value.match(/(^\\s|\\s$)/)) {\n    value = '\"' + value + '\"';\n  }\n  return value;\n}\n\nexport function unescapeAndroidString(value: string): string {\n  return value.replace(/\\\\(.)/g, '$1');\n}\n"]},"metadata":{},"sourceType":"script"}