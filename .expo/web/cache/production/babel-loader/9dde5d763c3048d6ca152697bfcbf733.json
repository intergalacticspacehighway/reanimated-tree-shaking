{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getWindowSoftInputModeMode=getWindowSoftInputModeMode;exports.setWindowSoftInputModeMode=setWindowSoftInputModeMode;exports.withWindowSoftInputMode=void 0;function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _Manifest(){var data=require(\"./Manifest\");_Manifest=function _Manifest(){return data;};return data;}var ANDROID_WINDOW_SOFT_INPUT_MODE='android:windowSoftInputMode';var MAPPING={pan:'adjustPan',resize:'adjustResize'};var withWindowSoftInputMode=function withWindowSoftInputMode(config){return(0,_androidPlugins().withAndroidManifest)(config,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:config.modResults=setWindowSoftInputModeMode(config,config.modResults);return _context.abrupt(\"return\",config);case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};exports.withWindowSoftInputMode=withWindowSoftInputMode;function setWindowSoftInputModeMode(config,androidManifest){var app=(0,_Manifest().getMainActivityOrThrow)(androidManifest);app.$[ANDROID_WINDOW_SOFT_INPUT_MODE]=getWindowSoftInputModeMode(config);return androidManifest;}function getWindowSoftInputModeMode(config){var _config$android,_MAPPING$value;var value=(_config$android=config.android)===null||_config$android===void 0?void 0:_config$android.softwareKeyboardLayoutMode;if(!value){// Default to `adjustResize` or `resize`.\nreturn'adjustResize';}return(_MAPPING$value=MAPPING[value])!==null&&_MAPPING$value!==void 0?_MAPPING$value:value;}","map":{"version":3,"sources":["../../src/android/WindowSoftInputMode.ts"],"names":["ANDROID_WINDOW_SOFT_INPUT_MODE","MAPPING","pan","resize","withWindowSoftInputMode","config","setWindowSoftInputModeMode","app","getWindowSoftInputModeMode","value"],"mappings":"8gBAGA,QAAA,CAAA,eAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA,eAAA,CAAA,0BAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA,GAAMA,CAAAA,8BAA8B,CAApC,6BAAA,CAEA,GAAMC,CAAAA,OAA+B,CAAG,CACtCC,GAAG,CADmC,WAAA,CAEtCC,MAAM,CAAE,cAF8B,CAAxC,CAKO,GAAMC,CAAAA,uBAAqC,CAAGC,QAAxCD,CAAAA,uBAAwCC,CAAAA,MAAM,CAAI,CAC7D,MAAO,CAAA,EAAA,eAAA,GAAA,mBAAA,EAAA,MAAA,0FAA4B,iBAAA,MAAA,kHACjCA,MAAM,CAANA,UAAAA,CAAoBC,0BAA0B,CAAA,MAAA,CAASD,MAAM,CAA7DA,UAA8C,CAA9CA,CADiC,gCAEjC,MAFiC,wDAA5B,+DAAP,CADK,CAAA,C,wDAOA,QAAA,CAAA,0BAAA,CAAA,MAAA,CAAA,eAAA,CAGL,CACA,GAAME,CAAAA,GAAG,CAAG,CAAA,EAAA,SAAA,GAAA,sBAAA,EAAZ,eAAY,CAAZ,CACAA,GAAG,CAAHA,CAAAA,CAAAA,8BAAAA,EAAwCC,0BAA0B,CAAlED,MAAkE,CAAlEA,CACA,MAAA,CAAA,eAAA,CACD,CAEM,QAAA,CAAA,0BAAA,CAAA,MAAA,CAAyE,CAAA,GAAA,CAAA,eAAA,CAAA,cAAA,CAC9E,GAAME,CAAAA,KAAK,CAAA,CAAA,eAAA,CAAGJ,MAAM,CAAT,OAAA,IAAA,IAAA,EAAA,eAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGA,eAAAA,CAAd,0BAAA,CAEA,GAAI,CAAJ,KAAA,CAAY,CACV;AACA,MAAA,cAAA,CACD,CACD,MAAA,CAAA,cAAA,CAAOJ,OAAO,CAAd,KAAc,CAAd,IAAA,IAAA,EAAA,cAAA,GAAA,IAAA,EAAA,CAAA,cAAA,CAAA,KAAA,CACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\nconst ANDROID_WINDOW_SOFT_INPUT_MODE = 'android:windowSoftInputMode';\n\nconst MAPPING: Record<string, string> = {\n  pan: 'adjustPan',\n  resize: 'adjustResize',\n};\n\nexport const withWindowSoftInputMode: ConfigPlugin = config => {\n  return withAndroidManifest(config, async config => {\n    config.modResults = setWindowSoftInputModeMode(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setWindowSoftInputModeMode(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  androidManifest: AndroidManifest\n) {\n  const app = getMainActivityOrThrow(androidManifest);\n  app.$[ANDROID_WINDOW_SOFT_INPUT_MODE] = getWindowSoftInputModeMode(config);\n  return androidManifest;\n}\n\nexport function getWindowSoftInputModeMode(config: Pick<ExpoConfig, 'android'>) {\n  const value = config.android?.softwareKeyboardLayoutMode;\n\n  if (!value) {\n    // Default to `adjustResize` or `resize`.\n    return 'adjustResize';\n  }\n  return MAPPING[value] ?? value;\n}\n"]},"metadata":{},"sourceType":"script"}