{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var expo_pwa_1=require(\"expo-pwa\");/**\n * Get the Expo project config in a way that's optimized for web.\n *\n * @param env Environment properties used for getting the Expo project config.\n * @category env\n */function getConfig(env){if(env.config){return env.config;}// Fill all config values with PWA defaults\nreturn(0,expo_pwa_1.getConfigForPWA)(env.projectRoot);}exports[\"default\"]=getConfig;","map":{"version":3,"sources":["../../src/env/getConfig.ts"],"names":[],"mappings":"sEAAA,GAAA,CAAA,UAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAIA;;;;;AAKG,GACH,QAAS,CAAA,SAAT,CAAmB,GAAnB,CAAmE,CACjE,GAAI,GAAG,CAAC,MAAR,CAAgB,CACd,MAAO,CAAA,GAAG,CAAC,MAAX,CACD,CACD;AACA,MAAO,CAAA,EAAA,UAAA,CAAA,eAAA,EAAgB,GAAG,CAAC,WAApB,CAAP,CACD,CAED,OAAA,WAAA,CAAe,SAAf","sourcesContent":["import { getConfigForPWA, PWAConfig } from 'expo-pwa';\n\nimport { Environment } from '../types';\n\n/**\n * Get the Expo project config in a way that's optimized for web.\n *\n * @param env Environment properties used for getting the Expo project config.\n * @category env\n */\nfunction getConfig(env: Pick<Environment, 'projectRoot' | 'config'>): PWAConfig {\n  if (env.config) {\n    return env.config;\n  }\n  // Fill all config values with PWA defaults\n  return getConfigForPWA(env.projectRoot);\n}\n\nexport default getConfig;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}