{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.createRunOncePlugin=createRunOncePlugin;exports.withRunOnce=void 0;function _history(){var data=require(\"../utils/history\");_history=function _history(){return data;};return data;}/**\n * Prevents the same plugin from being run twice.\n * Used for migrating from unversioned expo config plugins to versioned plugins.\n *\n * @param config\n * @param name\n */var withRunOnce=function withRunOnce(config,_ref){var plugin=_ref.plugin,name=_ref.name,version=_ref.version;// Detect if a plugin has already been run on this config.\nif((0,_history().getHistoryItem)(config,name)){return config;}// Push the history item so duplicates cannot be run.\nconfig=(0,_history().addHistoryItem)(config,{name:name,version:version});return plugin(config);};/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */exports.withRunOnce=withRunOnce;function createRunOncePlugin(_plugin,name,version){return function(config,props){return withRunOnce(config,{plugin:function plugin(config){return _plugin(config,props);},name:name,version:version});};}","map":{"version":3,"sources":["../../src/plugins/withRunOnce.ts"],"names":["withRunOnce","version","config","name","plugin"],"mappings":"iJACA,QAAA,CAAA,QAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACO,GAAMA,CAAAA,WAIX,CAAG,QAJQA,CAAAA,WAIR,CAAA,MAAA,MAAuC,IAA9B,CAAA,MAA8B,MAA9B,MAA8B,CAA9B,IAA8B,MAA9B,IAA8B,CAAdC,OAAc,MAAdA,OAAc,CAC1C;AACA,GAAI,CAAA,EAAA,QAAA,GAAA,cAAA,EAAA,MAAA,CAAJ,IAAI,CAAJ,CAAkC,CAChC,MAAA,CAAA,MAAA,CAHwC,CAM1C;AACAC,MAAM,CAAG,CAAA,EAAA,QAAA,GAAA,cAAA,EAAA,MAAA,CAAuB,CAAEC,IAAF,CAAEA,IAAF,CAAQF,OAAAA,CAAAA,OAAR,CAAvB,CAATC,CAEA,MAAOE,CAAAA,MAAM,CAAb,MAAa,CAAb,CAbK,CAAA,CAgBP;AACA;AACA;AACA;AACA,G,gCACO,QAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAIY,CACjB,MAAO,UAAA,MAAA,CAAA,KAAA,CAAmB,CACxB,MAAOJ,CAAAA,WAAW,CAAA,MAAA,CAAS,CAAEI,MAAM,CAAEF,gBAAAA,MAAM,QAAIE,CAAAA,OAAM,CAAA,MAAA,CAA1B,KAA0B,CAAV,EAAhB,CAA2CD,IAA3C,CAA2CA,IAA3C,CAAiDF,OAAAA,CAAAA,OAAjD,CAAT,CAAlB,CADF,CAAA,CAGD","sourcesContent":["import { ConfigPlugin } from '../Plugin.types';\nimport { addHistoryItem, getHistoryItem, PluginHistoryItem } from '../utils/history';\n\n/**\n * Prevents the same plugin from being run twice.\n * Used for migrating from unversioned expo config plugins to versioned plugins.\n *\n * @param config\n * @param name\n */\nexport const withRunOnce: ConfigPlugin<{\n  plugin: ConfigPlugin<void>;\n  name: PluginHistoryItem['name'];\n  version?: PluginHistoryItem['version'];\n}> = (config, { plugin, name, version }) => {\n  // Detect if a plugin has already been run on this config.\n  if (getHistoryItem(config, name)) {\n    return config;\n  }\n\n  // Push the history item so duplicates cannot be run.\n  config = addHistoryItem(config, { name, version });\n\n  return plugin(config);\n};\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createRunOncePlugin<T>(\n  plugin: ConfigPlugin<T>,\n  name: string,\n  version?: string\n): ConfigPlugin<T> {\n  return (config, props) => {\n    return withRunOnce(config, { plugin: config => plugin(config, props), name, version });\n  };\n}\n"]},"metadata":{},"sourceType":"script"}