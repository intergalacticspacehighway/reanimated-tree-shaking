{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=renderIntentFilters;exports.getIntentFilters=getIntentFilters;exports.setAndroidIntentFilters=setAndroidIntentFilters;exports.withAndroidIntentFilters=void 0;function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _Manifest(){var data=require(\"./Manifest\");_Manifest=function _Manifest(){return data;};return data;}var GENERATED_TAG='data-generated';var withAndroidIntentFilters=(0,_androidPlugins().createAndroidManifestPlugin)(setAndroidIntentFilters,'withAndroidIntentFilters');exports.withAndroidIntentFilters=withAndroidIntentFilters;function getIntentFilters(config){var _config$android$inten,_config$android;return(_config$android$inten=(_config$android=config.android)===null||_config$android===void 0?void 0:_config$android.intentFilters)!==null&&_config$android$inten!==void 0?_config$android$inten:[];}function setAndroidIntentFilters(config,androidManifest){var _mainActivity$intent,_mainActivity$intent2;// Always ensure old tags are removed.\nvar mainActivity=(0,_Manifest().getMainActivityOrThrow)(androidManifest);// Remove all generated tags from previous runs...\nif((_mainActivity$intent=mainActivity['intent-filter'])!==null&&_mainActivity$intent!==void 0&&_mainActivity$intent.length){mainActivity['intent-filter']=mainActivity['intent-filter'].filter(function(value){var _value$$;return((_value$$=value.$)===null||_value$$===void 0?void 0:_value$$[GENERATED_TAG])!=='true';});}var intentFilters=getIntentFilters(config);if(!intentFilters.length){return androidManifest;}mainActivity['intent-filter']=(_mainActivity$intent2=mainActivity['intent-filter'])===null||_mainActivity$intent2===void 0?void 0:_mainActivity$intent2.concat(renderIntentFilters(intentFilters));return androidManifest;}function renderIntentFilters(intentFilters){return intentFilters.map(function(intentFilter){// <intent-filter>\nreturn{$:_defineProperty({'android:autoVerify':intentFilter.autoVerify?'true':undefined},GENERATED_TAG,'true'),action:[// <action android:name=\"android.intent.action.VIEW\"/>\n{$:{'android:name':\"android.intent.action.\".concat(intentFilter.action)}}],data:renderIntentFilterData(intentFilter.data),category:renderIntentFilterCategory(intentFilter.category)};});}/** Like `<data android:scheme=\"exp\"/>` */function renderIntentFilterData(data){return(Array.isArray(data)?data:[data]).filter(Boolean).map(function(datum){return{$:Object.entries(datum!==null&&datum!==void 0?datum:{}).reduce(function(prev,_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return _objectSpread(_objectSpread({},prev),{},_defineProperty({},\"android:\".concat(key),value));},{})};});}/** Like `<category android:name=\"android.intent.category.DEFAULT\"/>` */function renderIntentFilterCategory(category){return(Array.isArray(category)?category:[category]).filter(Boolean).map(function(cat){return{$:{'android:name':\"android.intent.category.\".concat(cat)}};});}","map":{"version":3,"sources":["../../src/android/IntentFilters.ts"],"names":["GENERATED_TAG","withAndroidIntentFilters","config","mainActivity","value","intentFilters","getIntentFilters","renderIntentFilters","intentFilter","$","action","data","renderIntentFilterData","category","renderIntentFilterCategory","Array","datum","cat"],"mappings":"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","sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow, ManifestIntentFilter } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n\nconst GENERATED_TAG = 'data-generated';\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  // Always ensure old tags are removed.\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n  // Remove all generated tags from previous runs...\n  if (mainActivity['intent-filter']?.length) {\n    mainActivity['intent-filter'] = mainActivity['intent-filter'].filter(\n      value => value.$?.[GENERATED_TAG] !== 'true'\n    );\n  }\n\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    renderIntentFilters(intentFilters)\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(\n  intentFilters: AndroidIntentFilters\n): ManifestIntentFilter[] {\n  return intentFilters.map(intentFilter => {\n    // <intent-filter>\n    return {\n      $: {\n        'android:autoVerify': intentFilter.autoVerify ? 'true' : undefined,\n        // Add a custom \"generated\" tag that we can query later to remove.\n        [GENERATED_TAG]: 'true',\n      },\n      action: [\n        // <action android:name=\"android.intent.action.VIEW\"/>\n        {\n          $: {\n            'android:name': `android.intent.action.${intentFilter.action}`,\n          },\n        },\n      ],\n      data: renderIntentFilterData(intentFilter.data),\n      category: renderIntentFilterCategory(intentFilter.category),\n    };\n  });\n}\n\n/** Like `<data android:scheme=\"exp\"/>` */\nfunction renderIntentFilterData(data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]) {\n  return (Array.isArray(data) ? data : [data]).filter(Boolean).map(datum => ({\n    $: Object.entries(datum ?? {}).reduce(\n      (prev, [key, value]) => ({ ...prev, [`android:${key}`]: value }),\n      {}\n    ),\n  }));\n}\n\n/** Like `<category android:name=\"android.intent.category.DEFAULT\"/>` */\nfunction renderIntentFilterCategory(category?: string | string[]) {\n  return (Array.isArray(category) ? category : [category]).filter(Boolean).map(cat => ({\n    $: {\n      'android:name': `android.intent.category.${cat}`,\n    },\n  }));\n}\n"]},"metadata":{},"sourceType":"script"}