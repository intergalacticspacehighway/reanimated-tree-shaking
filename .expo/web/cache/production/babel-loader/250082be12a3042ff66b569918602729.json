{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.appendScheme=appendScheme;exports.ensureManifestHasValidIntentFilter=ensureManifestHasValidIntentFilter;exports.getScheme=getScheme;exports.getSchemesFromManifest=getSchemesFromManifest;exports.hasScheme=hasScheme;exports.removeScheme=removeScheme;exports.setScheme=setScheme;exports.withScheme=void 0;function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}var withScheme=(0,_androidPlugins().createAndroidManifestPlugin)(setScheme,'withScheme');exports.withScheme=withScheme;function getScheme(config){if(Array.isArray(config.scheme)){var validate=function validate(value){return typeof value==='string';};return config.scheme.filter(validate);}else if(typeof config.scheme==='string'){return[config.scheme];}return[];}// This plugin used to remove the unused schemes but this is unpredictable because other plugins could add schemes.\n// The only way to reliably remove schemes from the project is to nuke the file and regenerate the code (`expo prebuild --clean`).\n// Regardless, having extra schemes isn't a fatal issue and therefore a tolerable compromise is to just add new schemes that aren't currently present.\nfunction setScheme(config,androidManifest){var _config$android,_config$android2;var schemes=[].concat(_toConsumableArray(getScheme(config)),_toConsumableArray(getScheme((_config$android=config.android)!==null&&_config$android!==void 0?_config$android:{})));// Add the package name to the list of schemes for easier Google auth and parity with Turtle v1.\nif((_config$android2=config.android)!==null&&_config$android2!==void 0&&_config$android2[\"package\"]){schemes.push(config.android[\"package\"]);}if(schemes.length===0){return androidManifest;}if(!ensureManifestHasValidIntentFilter(androidManifest)){(0,_warnings().addWarningAndroid)('scheme',\"Cannot add schemes because the provided manifest does not have a valid Activity with `android:launchMode=\\\"singleTask\\\"`\",'https://expo.fyi/setup-android-uri-scheme');return androidManifest;}// Get the current schemes and remove them from the list of schemes to add.\nvar currentSchemes=getSchemesFromManifest(androidManifest);var _iterator=_createForOfIteratorHelper(currentSchemes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var uri=_step.value;var index=schemes.indexOf(uri);if(index>-1)schemes.splice(index,1);}// Now add all of the remaining schemes.\n}catch(err){_iterator.e(err);}finally{_iterator.f();}var _iterator2=_createForOfIteratorHelper(schemes),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _uri=_step2.value;androidManifest=appendScheme(_uri,androidManifest);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return androidManifest;}function isValidRedirectIntentFilter(_ref){var actions=_ref.actions,categories=_ref.categories;return actions.includes('android.intent.action.VIEW')&&!categories.includes('android.intent.category.LAUNCHER');}function propertiesFromIntentFilter(intentFilter){var _intentFilter$action$,_intentFilter$action,_intentFilter$categor,_intentFilter$categor2,_intentFilter$data$fi,_intentFilter$data,_intentFilter$data$fi2;var actions=(_intentFilter$action$=intentFilter===null||intentFilter===void 0?void 0:(_intentFilter$action=intentFilter.action)===null||_intentFilter$action===void 0?void 0:_intentFilter$action.map(function(data){var _data$$;return data===null||data===void 0?void 0:(_data$$=data.$)===null||_data$$===void 0?void 0:_data$$['android:name'];}))!==null&&_intentFilter$action$!==void 0?_intentFilter$action$:[];var categories=(_intentFilter$categor=intentFilter===null||intentFilter===void 0?void 0:(_intentFilter$categor2=intentFilter.category)===null||_intentFilter$categor2===void 0?void 0:_intentFilter$categor2.map(function(data){var _data$$2;return data===null||data===void 0?void 0:(_data$$2=data.$)===null||_data$$2===void 0?void 0:_data$$2['android:name'];}))!==null&&_intentFilter$categor!==void 0?_intentFilter$categor:[];var data=(_intentFilter$data$fi=intentFilter===null||intentFilter===void 0?void 0:(_intentFilter$data=intentFilter.data)===null||_intentFilter$data===void 0?void 0:(_intentFilter$data$fi2=_intentFilter$data.filter(function(data){var _data$$3;return data===null||data===void 0?void 0:(_data$$3=data.$)===null||_data$$3===void 0?void 0:_data$$3['android:scheme'];}))===null||_intentFilter$data$fi2===void 0?void 0:_intentFilter$data$fi2.map(function(data){var _data$$4,_data$$5;return{scheme:data===null||data===void 0?void 0:(_data$$4=data.$)===null||_data$$4===void 0?void 0:_data$$4['android:scheme'],host:data===null||data===void 0?void 0:(_data$$5=data.$)===null||_data$$5===void 0?void 0:_data$$5['android:host']};}))!==null&&_intentFilter$data$fi!==void 0?_intentFilter$data$fi:[];return{actions:actions,categories:categories,data:data};}function getSingleTaskIntentFilters(androidManifest){if(!Array.isArray(androidManifest.manifest.application))return[];var outputSchemes=[];var _iterator3=_createForOfIteratorHelper(androidManifest.manifest.application),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var application=_step3.value;var activity=application.activity;// @ts-ignore\nvar activities=Array.isArray(activity)?activity:[activity];var singleTaskActivities=activities.filter(function(activity){var _activity$$;return(activity===null||activity===void 0?void 0:(_activity$$=activity.$)===null||_activity$$===void 0?void 0:_activity$$['android:launchMode'])==='singleTask';});var _iterator4=_createForOfIteratorHelper(singleTaskActivities),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _activity=_step4.value;var intentFilters=_activity['intent-filter'];outputSchemes=outputSchemes.concat(intentFilters);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return outputSchemes;}function getSchemesFromManifest(androidManifest){var requestedHost=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var outputSchemes=[];var singleTaskIntentFilters=getSingleTaskIntentFilters(androidManifest);var _iterator5=_createForOfIteratorHelper(singleTaskIntentFilters),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var intentFilter=_step5.value;var properties=propertiesFromIntentFilter(intentFilter);if(isValidRedirectIntentFilter(properties)&&properties.data){var _iterator6=_createForOfIteratorHelper(properties.data),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var _step6$value=_step6.value,scheme=_step6$value.scheme,host=_step6$value.host;if(requestedHost===null||!host||host===requestedHost){outputSchemes.push(scheme);}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return outputSchemes;}function ensureManifestHasValidIntentFilter(androidManifest){if(!Array.isArray(androidManifest.manifest.application)){return false;}var _iterator7=_createForOfIteratorHelper(androidManifest.manifest.application),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var application=_step7.value;var _iterator8=_createForOfIteratorHelper(application.activity||[]),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var activity=_step8.value;var _activity$$2;if((activity===null||activity===void 0?void 0:(_activity$$2=activity.$)===null||_activity$$2===void 0?void 0:_activity$$2['android:launchMode'])==='singleTask'){var _iterator9=_createForOfIteratorHelper(activity['intent-filter']||[]),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var intentFilter=_step9.value;// Parse valid intent filters...\nvar properties=propertiesFromIntentFilter(intentFilter);if(isValidRedirectIntentFilter(properties)){return true;}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}if(!activity['intent-filter']){activity['intent-filter']=[];}activity['intent-filter'].push({action:[{$:{'android:name':'android.intent.action.VIEW'}}],category:[{$:{'android:name':'android.intent.category.DEFAULT'}},{$:{'android:name':'android.intent.category.BROWSABLE'}}]});return true;}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}return false;}function hasScheme(scheme,androidManifest){var schemes=getSchemesFromManifest(androidManifest);return schemes.includes(scheme);}function appendScheme(scheme,androidManifest){if(!Array.isArray(androidManifest.manifest.application)){return androidManifest;}var _iterator10=_createForOfIteratorHelper(androidManifest.manifest.application),_step10;try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var application=_step10.value;var _iterator11=_createForOfIteratorHelper(application.activity||[]),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var activity=_step11.value;var _activity$$3;if((activity===null||activity===void 0?void 0:(_activity$$3=activity.$)===null||_activity$$3===void 0?void 0:_activity$$3['android:launchMode'])==='singleTask'){var _iterator12=_createForOfIteratorHelper(activity['intent-filter']||[]),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var intentFilter=_step12.value;var properties=propertiesFromIntentFilter(intentFilter);if(isValidRedirectIntentFilter(properties)){if(!intentFilter.data)intentFilter.data=[];intentFilter.data.push({$:{'android:scheme':scheme}});}}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}break;}}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}return androidManifest;}function removeScheme(scheme,androidManifest){if(!Array.isArray(androidManifest.manifest.application)){return androidManifest;}var _iterator13=_createForOfIteratorHelper(androidManifest.manifest.application),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var application=_step13.value;var _iterator14=_createForOfIteratorHelper(application.activity||[]),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var activity=_step14.value;var _activity$$4;if((activity===null||activity===void 0?void 0:(_activity$$4=activity.$)===null||_activity$$4===void 0?void 0:_activity$$4['android:launchMode'])==='singleTask'){var _iterator15=_createForOfIteratorHelper(activity['intent-filter']||[]),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var intentFilter=_step15.value;// Parse valid intent filters...\nvar properties=propertiesFromIntentFilter(intentFilter);if(isValidRedirectIntentFilter(properties)){for(var dataKey in(intentFilter===null||intentFilter===void 0?void 0:intentFilter.data)||[]){var _intentFilter$data2,_data$$6;var data=(_intentFilter$data2=intentFilter.data)===null||_intentFilter$data2===void 0?void 0:_intentFilter$data2[dataKey];if((data===null||data===void 0?void 0:(_data$$6=data.$)===null||_data$$6===void 0?void 0:_data$$6['android:scheme'])===scheme){var _intentFilter$data3;(_intentFilter$data3=intentFilter.data)===null||_intentFilter$data3===void 0?true:delete _intentFilter$data3[dataKey];}}}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}break;}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}return androidManifest;}","map":{"version":3,"sources":["../../src/android/Scheme.ts"],"names":["withScheme","Array","config","validate","value","schemes","getScheme","ensureManifestHasValidIntentFilter","currentSchemes","getSchemesFromManifest","index","androidManifest","appendScheme","categories","actions","data","scheme","host","outputSchemes","activity","activities","singleTaskActivities","intentFilters","requestedHost","singleTaskIntentFilters","getSingleTaskIntentFilters","properties","propertiesFromIntentFilter","isValidRedirectIntentFilter","application","action","$","category","intentFilter"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest, ManifestActivity } from './Manifest';\n\nexport type IntentFilterProps = {\n  actions: string[];\n  categories: string[];\n  data: {\n    scheme: string;\n    host?: string;\n  }[];\n};\n\nexport const withScheme = createAndroidManifestPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => typeof value === 'string';\n\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\n// This plugin used to remove the unused schemes but this is unpredictable because other plugins could add schemes.\n// The only way to reliably remove schemes from the project is to nuke the file and regenerate the code (`expo prebuild --clean`).\n// Regardless, having extra schemes isn't a fatal issue and therefore a tolerable compromise is to just add new schemes that aren't currently present.\nexport function setScheme(\n  config: Pick<ExpoConfig, 'scheme' | 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const schemes = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: android.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.android ?? {}),\n  ];\n  // Add the package name to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.android?.package) {\n    schemes.push(config.android.package);\n  }\n  if (schemes.length === 0) {\n    return androidManifest;\n  }\n\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    addWarningAndroid(\n      'scheme',\n      `Cannot add schemes because the provided manifest does not have a valid Activity with \\`android:launchMode=\"singleTask\"\\``,\n      'https://expo.fyi/setup-android-uri-scheme'\n    );\n    return androidManifest;\n  }\n\n  // Get the current schemes and remove them from the list of schemes to add.\n  const currentSchemes = getSchemesFromManifest(androidManifest);\n  for (const uri of currentSchemes) {\n    const index = schemes.indexOf(uri);\n    if (index > -1) schemes.splice(index, 1);\n  }\n\n  // Now add all of the remaining schemes.\n  for (const uri of schemes) {\n    androidManifest = appendScheme(uri, androidManifest);\n  }\n\n  return androidManifest;\n}\n\nfunction isValidRedirectIntentFilter({ actions, categories }: IntentFilterProps): boolean {\n  return (\n    actions.includes('android.intent.action.VIEW') &&\n    !categories.includes('android.intent.category.LAUNCHER')\n  );\n}\n\nfunction propertiesFromIntentFilter(intentFilter: any): IntentFilterProps {\n  const actions = intentFilter?.action?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const categories = intentFilter?.category?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const data =\n    intentFilter?.data\n      ?.filter((data: any) => data?.$?.['android:scheme'])\n      ?.map((data: any) => ({\n        scheme: data?.$?.['android:scheme'],\n        host: data?.$?.['android:host'],\n      })) ?? [];\n  return {\n    actions,\n    categories,\n    data,\n  };\n}\n\nfunction getSingleTaskIntentFilters(androidManifest: AndroidManifest): any[] {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n\n  let outputSchemes: any[] = [];\n  for (const application of androidManifest.manifest.application) {\n    const { activity } = application;\n    // @ts-ignore\n    const activities = Array.isArray(activity) ? activity : [activity];\n    const singleTaskActivities = (activities as ManifestActivity[]).filter(\n      activity => activity?.$?.['android:launchMode'] === 'singleTask'\n    );\n    for (const activity of singleTaskActivities) {\n      const intentFilters = activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n  return outputSchemes;\n}\n\nexport function getSchemesFromManifest(\n  androidManifest: AndroidManifest,\n  requestedHost: string | null = null\n): string[] {\n  const outputSchemes: string[] = [];\n\n  const singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n  for (const intentFilter of singleTaskIntentFilters) {\n    const properties = propertiesFromIntentFilter(intentFilter);\n    if (isValidRedirectIntentFilter(properties) && properties.data) {\n      for (const { scheme, host } of properties.data) {\n        if (requestedHost === null || !host || host === requestedHost) {\n          outputSchemes.push(scheme);\n        }\n      }\n    }\n  }\n\n  return outputSchemes;\n}\n\nexport function ensureManifestHasValidIntentFilter(androidManifest: AndroidManifest): boolean {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n\n        activity['intent-filter'].push({\n          action: [{ $: { 'android:name': 'android.intent.action.VIEW' } }],\n          category: [\n            { $: { 'android:name': 'android.intent.category.DEFAULT' } },\n            { $: { 'android:name': 'android.intent.category.BROWSABLE' } },\n          ],\n        });\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function hasScheme(scheme: string, androidManifest: AndroidManifest): boolean {\n  const schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\n\nexport function appendScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: { 'android:scheme': scheme },\n            });\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}\n\nexport function removeScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            for (const dataKey in intentFilter?.data || []) {\n              const data = intentFilter.data?.[dataKey];\n              if (data?.$?.['android:scheme'] === scheme) {\n                delete intentFilter.data?.[dataKey];\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n"]},"metadata":{},"sourceType":"script"}