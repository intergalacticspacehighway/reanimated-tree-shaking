{"ast":null,"code":"import AnimatedValue from'../core/InternalAnimatedValue';import{createAnimatedSet as set}from'../core/AnimatedSet';import{createAnimatedCall as call}from'../core/AnimatedCall';import{createAnimatedAlways as always}from'../core/AnimatedAlways';import{createAnimatedCond as cond}from'../core/AnimatedCond';/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */export function evaluateOnce(node){var input=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var callback=arguments.length>2?arguments[2]:undefined;if(!Array.isArray(input)){input=[input];}var done=new AnimatedValue(0);var evalNode=cond(done,0,call([node,set(done,1)],function(){callback&&callback();for(var i=0;i<input.length;i++){input[i].__removeChild(alwaysNode);alwaysNode.__detach();}}));var alwaysNode=always(evalNode);for(var i=0;i<input.length;i++){input[i].__addChild(alwaysNode);alwaysNode.__attach();}}","map":{"version":3,"names":["AnimatedValue","createAnimatedSet","set","createAnimatedCall","call","createAnimatedAlways","always","createAnimatedCond","cond","evaluateOnce","node","input","callback","Array","isArray","done","evalNode","i","length","__removeChild","alwaysNode","__detach","__addChild","__attach"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js"],"sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\nimport { createAnimatedSet as set } from '../core/AnimatedSet';\nimport { createAnimatedCall as call } from '../core/AnimatedCall';\nimport { createAnimatedAlways as always } from '../core/AnimatedAlways';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */\n\nexport function evaluateOnce(node, input = [], callback) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  const done = new AnimatedValue(0);\n  const evalNode = cond(done, 0, call([node, set(done, 1)], () => {\n    callback && callback();\n\n    for (let i = 0; i < input.length; i++) {\n      input[i].__removeChild(alwaysNode);\n\n      alwaysNode.__detach();\n    }\n  }));\n  const alwaysNode = always(evalNode);\n\n  for (let i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n\n    alwaysNode.__attach();\n  }\n}"],"mappings":"AAAA,MAAOA,CAAAA,aAAP,KAA0B,+BAA1B,CACA,OAASC,iBAAiB,GAAIC,CAAAA,GAA9B,KAAyC,qBAAzC,CACA,OAASC,kBAAkB,GAAIC,CAAAA,IAA/B,KAA2C,sBAA3C,CACA,OAASC,oBAAoB,GAAIC,CAAAA,MAAjC,KAA+C,wBAA/C,CACA,OAASC,kBAAkB,GAAIC,CAAAA,IAA/B,KAA2C,sBAA3C,CACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASC,CAAAA,YAAT,CAAsBC,IAAtB,CAAkD,IAAtBC,CAAAA,KAAsB,2DAAd,EAAc,IAAVC,CAAAA,QAAU,2CACvD,GAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,CAA2B,CACzBA,KAAK,CAAG,CAACA,KAAD,CAAR,CACD,CAED,GAAMI,CAAAA,IAAI,CAAG,GAAIf,CAAAA,aAAJ,CAAkB,CAAlB,CAAb,CACA,GAAMgB,CAAAA,QAAQ,CAAGR,IAAI,CAACO,IAAD,CAAO,CAAP,CAAUX,IAAI,CAAC,CAACM,IAAD,CAAOR,GAAG,CAACa,IAAD,CAAO,CAAP,CAAV,CAAD,CAAuB,UAAM,CAC9DH,QAAQ,EAAIA,QAAQ,EAApB,CAEA,IAAK,GAAIK,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,KAAK,CAACO,MAA1B,CAAkCD,CAAC,EAAnC,CAAuC,CACrCN,KAAK,CAACM,CAAD,CAAL,CAASE,aAAT,CAAuBC,UAAvB,EAEAA,UAAU,CAACC,QAAX,GACD,CACF,CARkC,CAAd,CAArB,CASA,GAAMD,CAAAA,UAAU,CAAGd,MAAM,CAACU,QAAD,CAAzB,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,KAAK,CAACO,MAA1B,CAAkCD,CAAC,EAAnC,CAAuC,CACrCN,KAAK,CAACM,CAAD,CAAL,CAASK,UAAT,CAAoBF,UAApB,EAEAA,UAAU,CAACG,QAAX,GACD,CACF"},"metadata":{},"sourceType":"module"}