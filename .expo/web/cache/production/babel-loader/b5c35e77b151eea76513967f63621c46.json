{"ast":null,"code":"\"use strict\";var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.addBlockedPermissions=addBlockedPermissions;exports.addPermission=addPermission;exports.addPermissionToManifest=addPermissionToManifest;exports.ensurePermission=ensurePermission;exports.ensurePermissionNameFormat=ensurePermissionNameFormat;exports.ensurePermissions=ensurePermissions;exports.getAndroidPermissions=getAndroidPermissions;exports.getPermissions=getPermissions;exports.isPermissionAlreadyRequested=isPermissionAlreadyRequested;exports.removePermissions=removePermissions;exports.setAndroidPermissions=setAndroidPermissions;exports.withPermissions=exports.withInternalBlockedPermissions=exports.withBlockedPermissions=void 0;function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function WarningAggregator(){var data=_interopRequireWildcard(require(\"../utils/warnings\"));WarningAggregator=function WarningAggregator(){return data;};return data;}function _Manifest(){var data=require(\"./Manifest\");_Manifest=function _Manifest(){return data;};return data;}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{\"default\":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj[\"default\"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}var USES_PERMISSION='uses-permission';var withPermissions=function withPermissions(config,permissions){if(Array.isArray(permissions)){permissions=permissions.filter(Boolean);if(!config.android)config.android={};if(!config.android.permissions)config.android.permissions=[];config.android.permissions=_toConsumableArray(new Set(config.android.permissions.concat(permissions)));}return(0,_androidPlugins().withAndroidManifest)(config,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return setAndroidPermissions(config,config.modResults);case 2:config.modResults=_context.sent;return _context.abrupt(\"return\",config);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};/** Given a permission or list of permissions, block permissions in the final `AndroidManifest.xml` to ensure no installed library or plugin can add them. */exports.withPermissions=withPermissions;var withBlockedPermissions=function withBlockedPermissions(config,permissions){var _config$android;var resolvedPermissions=(Array.isArray(permissions)?permissions:[permissions]).filter(Boolean);if(!resolvedPermissions.length){WarningAggregator().addWarningAndroid('block-permissions','No permissions provided');}if(config!==null&&config!==void 0&&(_config$android=config.android)!==null&&_config$android!==void 0&&_config$android.permissions&&Array.isArray(config.android.permissions)){// Remove any static config permissions\nconfig.android.permissions=config.android.permissions.filter(function(permission){return!resolvedPermissions.includes(permission);});}return(0,_androidPlugins().withAndroidManifest)(config,/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:config.modResults=(0,_Manifest().ensureToolsAvailable)(config.modResults);config.modResults=addBlockedPermissions(config.modResults,resolvedPermissions);return _context2.abrupt(\"return\",config);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());};exports.withBlockedPermissions=withBlockedPermissions;var withInternalBlockedPermissions=function withInternalBlockedPermissions(config){var _config$android2,_config$android2$bloc;// Only add permissions if the user defined the property and added some values\n// this ensures we don't add the `tools:*` namespace extraneously.\nif((_config$android2=config.android)!==null&&_config$android2!==void 0&&(_config$android2$bloc=_config$android2.blockedPermissions)!==null&&_config$android2$bloc!==void 0&&_config$android2$bloc.length){return withBlockedPermissions(config,config.android.blockedPermissions);}return config;};exports.withInternalBlockedPermissions=withInternalBlockedPermissions;function addBlockedPermissions(androidManifest,permissions){if(!Array.isArray(androidManifest.manifest['uses-permission'])){androidManifest.manifest['uses-permission']=[];}var _iterator=_createForOfIteratorHelper(permissions),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var permission=_step.value;androidManifest.manifest['uses-permission']=ensureBlockedPermission(androidManifest.manifest['uses-permission'],permission);}}catch(err){_iterator.e(err);}finally{_iterator.f();}return androidManifest;}/**\n * Filter any existing permissions matching the provided permission name, then add a\n * restricted permission to overwrite any extra permissions that may be added in a\n * third-party package's AndroidManifest.xml.\n *\n * @param manifestPermissions manifest `uses-permissions` array.\n * @param permission `android:name` of the permission to restrict\n * @returns\n */function ensureBlockedPermission(manifestPermissions,permission){// Remove permission if it currently exists\nmanifestPermissions=manifestPermissions.filter(function(e){return e.$['android:name']!==permission;});// Add a permission with tools:node to overwrite any existing permission and ensure it's removed upon building.\nmanifestPermissions.push({$:{'android:name':permission,'tools:node':'remove'}});return manifestPermissions;}function prefixAndroidPermissionsIfNecessary(permissions){return permissions.map(function(permission){if(!permission.includes('.')){return\"android.permission.\".concat(permission);}return permission;});}function getAndroidPermissions(config){var _config$android$permi,_config$android3;return(_config$android$permi=(_config$android3=config.android)===null||_config$android3===void 0?void 0:_config$android3.permissions)!==null&&_config$android$permi!==void 0?_config$android$permi:[];}function setAndroidPermissions(config,androidManifest){var _androidManifest$mani;var permissions=getAndroidPermissions(config);var providedPermissions=prefixAndroidPermissionsIfNecessary(permissions);var permissionsToAdd=_toConsumableArray(providedPermissions);if(!androidManifest.manifest.hasOwnProperty('uses-permission')){androidManifest.manifest['uses-permission']=[];}// manifest.manifest['uses-permission'] = [];\nvar manifestPermissions=(_androidManifest$mani=androidManifest.manifest['uses-permission'])!==null&&_androidManifest$mani!==void 0?_androidManifest$mani:[];permissionsToAdd.forEach(function(permission){if(!isPermissionAlreadyRequested(permission,manifestPermissions)){addPermissionToManifest(permission,manifestPermissions);}});return androidManifest;}function isPermissionAlreadyRequested(permission,manifestPermissions){return manifestPermissions.some(function(e){return e.$['android:name']===permission;});}function addPermissionToManifest(permission,manifestPermissions){manifestPermissions.push({$:{'android:name':permission}});return manifestPermissions;}function removePermissions(androidManifest,permissionNames){var targetNames=permissionNames?permissionNames.map(ensurePermissionNameFormat):null;var permissions=androidManifest.manifest[USES_PERMISSION]||[];var nextPermissions=[];var _iterator2=_createForOfIteratorHelper(permissions),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var attribute=_step2.value;if(targetNames){// @ts-ignore: name isn't part of the type\nvar value=attribute.$['android:name']||attribute.$.name;if(!targetNames.includes(value)){nextPermissions.push(attribute);}}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}androidManifest.manifest[USES_PERMISSION]=nextPermissions;}function addPermission(androidManifest,permissionName){var usesPermissions=androidManifest.manifest[USES_PERMISSION]||[];usesPermissions.push({$:{'android:name':permissionName}});androidManifest.manifest[USES_PERMISSION]=usesPermissions;}function ensurePermissions(androidManifest,permissionNames){var permissions=getPermissions(androidManifest);var results={};var _iterator3=_createForOfIteratorHelper(permissionNames),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var permissionName=_step3.value;var targetName=ensurePermissionNameFormat(permissionName);if(!permissions.includes(targetName)){addPermission(androidManifest,targetName);results[permissionName]=true;}else{results[permissionName]=false;}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return results;}function ensurePermission(androidManifest,permissionName){var permissions=getPermissions(androidManifest);var targetName=ensurePermissionNameFormat(permissionName);if(!permissions.includes(targetName)){addPermission(androidManifest,targetName);return true;}return false;}function ensurePermissionNameFormat(permissionName){if(permissionName.includes('.')){var com=permissionName.split('.');var name=com.pop();return[].concat(_toConsumableArray(com),[name.toUpperCase()]).join('.');}else{// If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\nreturn ensurePermissionNameFormat(\"android.permission.\".concat(permissionName));}}function getPermissions(androidManifest){var usesPermissions=androidManifest.manifest[USES_PERMISSION]||[];var permissions=usesPermissions.map(function(permissionObject){return permissionObject.$['android:name']||permissionObject.$.name;});return permissions;}","map":{"version":3,"sources":["../../src/android/Permissions.ts"],"names":["USES_PERMISSION","withPermissions","Array","permissions","config","setAndroidPermissions","withBlockedPermissions","resolvedPermissions","WarningAggregator","permission","addBlockedPermissions","withInternalBlockedPermissions","androidManifest","ensureBlockedPermission","manifestPermissions","e","$","getAndroidPermissions","providedPermissions","prefixAndroidPermissionsIfNecessary","permissionsToAdd","isPermissionAlreadyRequested","addPermissionToManifest","targetNames","permissionNames","nextPermissions","value","attribute","usesPermissions","permissionName","getPermissions","results","targetName","ensurePermissionNameFormat","addPermission","com","name","permissionObject"],"mappings":"6/EAGA,QAAA,CAAA,eAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA,eAAA,CAAA,0BAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,iBAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA,CAAA,iBAAA,CAAA,4BAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,C,+/BAEA,GAAMA,CAAAA,eAAe,CAArB,iBAAA,CAEO,GAAMC,CAAAA,eAA8C,CAAG,QAAjDA,CAAAA,eAAiD,CAAA,MAAA,CAAA,WAAA,CAAyB,CACrF,GAAIC,KAAK,CAALA,OAAAA,CAAJ,WAAIA,CAAJ,CAAgC,CAC9BC,WAAW,CAAGA,WAAW,CAAXA,MAAAA,CAAdA,OAAcA,CAAdA,CACA,GAAI,CAACC,MAAM,CAAX,OAAA,CAAqBA,MAAM,CAANA,OAAAA,CAAAA,EAAAA,CACrB,GAAI,CAACA,MAAM,CAANA,OAAAA,CAAL,WAAA,CAAiCA,MAAM,CAANA,OAAAA,CAAAA,WAAAA,CAAAA,EAAAA,CACjCA,MAAM,CAANA,OAAAA,CAAAA,WAAAA,oBAEK,GAAA,CAAA,GAAA,CAAQA,MAAM,CAANA,OAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAFbA,WAEaA,CAAR,CAFLA,EAID,CACD,MAAO,CAAA,EAAA,eAAA,GAAA,mBAAA,EAAA,MAAA,0FAA4B,iBAAA,MAAA,wIACPC,CAAAA,qBAAqB,CAAA,MAAA,CAASD,MAAM,CAA9DA,UAA+C,CADd,QACjCA,MAAM,CAANA,UADiC,+CAEjC,MAFiC,wDAA5B,+DAAP,CAVK,CAAA,CAgBP,6J,wCACO,GAAME,CAAAA,sBAAuD,CAAG,QAA1DA,CAAAA,sBAA0D,CAAA,MAAA,CAAA,WAAA,CAAyB,CAAA,GAAA,CAAA,eAAA,CAC9F,GAAMC,CAAAA,mBAAmB,CAAG,CAACL,KAAK,CAALA,OAAAA,CAAAA,WAAAA,EAAAA,WAAAA,CAA2C,CAA5C,WAA4C,CAA5C,EAAA,MAAA,CAA5B,OAA4B,CAA5B,CAIA,GAAI,CAACK,mBAAmB,CAAxB,MAAA,CAAiC,CAC/BC,iBAAiB,GAAjBA,iBAAAA,CAAAA,mBAAAA,CAAAA,yBAAAA,EACD,CAED,GAAIJ,MAAM,GAANA,IAAAA,EAAAA,MAAM,GAAA,IAANA,EAAAA,EAAAA,CAAAA,eAAAA,CAAAA,MAAM,CAANA,OAAAA,IAAAA,IAAAA,EAAAA,eAAAA,GAAAA,IAAAA,EAAAA,EAAAA,eAAAA,CAAAA,WAAAA,EAAgCF,KAAK,CAALA,OAAAA,CAAcE,MAAM,CAANA,OAAAA,CAAlD,WAAoCF,CAApC,CAA+E,CAC7E;AACAE,MAAM,CAANA,OAAAA,CAAAA,WAAAA,CAA6BA,MAAM,CAANA,OAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAC3BK,SAAAA,UAAU,QAAI,CAACF,mBAAmB,CAAnBA,QAAAA,CADjBH,UACiBG,CAAL,EADiBH,CAA7BA,CAGD,CAED,MAAO,CAAA,EAAA,eAAA,GAAA,mBAAA,EAAA,MAAA,2FAA4B,kBAAA,MAAA,sHACjCA,MAAM,CAANA,UAAAA,CAAoB,CAAA,EAAA,SAAA,GAAA,oBAAA,EAAqBA,MAAM,CAA/CA,UAAoB,CAApBA,CACAA,MAAM,CAANA,UAAAA,CAAoBM,qBAAqB,CAACN,MAAM,CAAP,UAAA,CAAzCA,mBAAyC,CAAzCA,CAFiC,iCAGjC,MAHiC,0DAA5B,iEAAP,CAhBK,CAAA,C,sDAuBA,GAAMO,CAAAA,8BAA4C,CAAGP,QAA/CO,CAAAA,8BAA+CP,CAAAA,MAAM,CAAI,CAAA,GAAA,CAAA,gBAAA,CAAA,qBAAA,CACpE;AACA;AACA,GAAA,CAAA,gBAAA,CAAIA,MAAM,CAAV,OAAA,IAAA,IAAA,EAAA,gBAAA,GAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,CAAIA,gBAAAA,CAAJ,kBAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,EAAIA,qBAAAA,CAAJ,MAAA,CAAgD,CAC9C,MAAOE,CAAAA,sBAAsB,CAAA,MAAA,CAASF,MAAM,CAANA,OAAAA,CAAtC,kBAA6B,CAA7B,CACD,CAED,MAAA,CAAA,MAAA,CAPK,CAAA,C,sEAUA,QAAA,CAAA,qBAAA,CAAA,eAAA,CAAA,WAAA,CAAwF,CAC7F,GAAI,CAACF,KAAK,CAALA,OAAAA,CAAcU,eAAe,CAAfA,QAAAA,CAAnB,iBAAmBA,CAAdV,CAAL,CAAiE,CAC/DU,eAAe,CAAfA,QAAAA,CAAAA,iBAAAA,EAAAA,EAAAA,CACD,CAH4F,yCAK7F,WAL6F,YAK7F,+CAAsC,IAAtC,CAAA,UAAsC,aACpCA,eAAe,CAAfA,QAAAA,CAAAA,iBAAAA,EAA8CC,uBAAuB,CACnED,eAAe,CAAfA,QAAAA,CADmE,iBACnEA,CADmE,CAArEA,UAAqE,CAArEA,CAID,CAV4F,qDAY7F,MAAA,CAAA,eAAA,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAA,CAAA,uBAAA,CAAA,mBAAA,CAAA,UAAA,CAGE,CACA;AACAE,mBAAmB,CAAGA,mBAAmB,CAAnBA,MAAAA,CAA2BC,SAAAA,CAAC,QAAIA,CAAAA,CAAC,CAADA,CAAAA,CAAAA,cAAAA,IAFtD,UAEkD,EAA5BD,CAAtBA,CAEA;AACAA,mBAAmB,CAAnBA,IAAAA,CAAyB,CACvBE,CAAC,CAAE,CAAE,eAAF,UAAA,CAA8B,aAAc,QAA5C,CADoB,CAAzBF,EAGA,MAAA,CAAA,mBAAA,CACD,CAED,QAAA,CAAA,mCAAA,CAAA,WAAA,CAA8E,CAC5E,MAAO,CAAA,WAAW,CAAX,GAAA,CAAgBL,SAAAA,UAAU,CAAI,CACnC,GAAI,CAACA,UAAU,CAAVA,QAAAA,CAAL,GAAKA,CAAL,CAA+B,CAC7B,mCAAA,UAAA,EACD,CACD,MAAA,CAAA,UAAA,CAJF,CAAO,CAAP,CAMD,CAEM,QAAA,CAAA,qBAAA,CAAA,MAAA,CAA8E,CAAA,GAAA,CAAA,qBAAA,CAAA,gBAAA,CACnF,MAAA,CAAA,qBAAA,CAAA,CAAA,gBAAA,CAAOL,MAAM,CAAb,OAAA,IAAA,IAAA,EAAA,gBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAOA,gBAAAA,CAAP,WAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,CACD,CAEM,QAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,eAAA,CAGL,CAAA,GAAA,CAAA,qBAAA,CACA,GAAMD,CAAAA,WAAW,CAAGc,qBAAqB,CAAzC,MAAyC,CAAzC,CACA,GAAMC,CAAAA,mBAAmB,CAAGC,mCAAmC,CAA/D,WAA+D,CAA/D,CACA,GAAMC,CAAAA,gBAAgB,oBAAtB,mBAAsB,CAAtB,CAEA,GAAI,CAACR,eAAe,CAAfA,QAAAA,CAAAA,cAAAA,CAAL,iBAAKA,CAAL,CAAiE,CAC/DA,eAAe,CAAfA,QAAAA,CAAAA,iBAAAA,EAAAA,EAAAA,CANF,CAQA;AAEA,GAAME,CAAAA,mBAAmB,CAAA,CAAA,qBAAA,CAAGF,eAAe,CAAfA,QAAAA,CAAH,iBAAGA,CAAH,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,qBAAA,CAAzB,EAAA,CAEAQ,gBAAgB,CAAhBA,OAAAA,CAAyBX,SAAAA,UAAU,CAAI,CACrC,GAAI,CAACY,4BAA4B,CAAA,UAAA,CAAjC,mBAAiC,CAAjC,CAAoE,CAClEC,uBAAuB,CAAA,UAAA,CAAvBA,mBAAuB,CAAvBA,CACD,CAHHF,CAAAA,EAMA,MAAA,CAAA,eAAA,CACD,CAEM,QAAA,CAAA,4BAAA,CAAA,UAAA,CAAA,mBAAA,CAGI,CACT,MAAON,CAAAA,mBAAmB,CAAnBA,IAAAA,CAAyBC,SAAAA,CAAC,QAAIA,CAAAA,CAAC,CAADA,CAAAA,CAAAA,cAAAA,IAArC,UAAiC,EAA1BD,CAAP,CACD,CAEM,QAAA,CAAA,uBAAA,CAAA,UAAA,CAAA,mBAAA,CAGL,CACAA,mBAAmB,CAAnBA,IAAAA,CAAyB,CAAEE,CAAC,CAAE,CAAE,eAAgBP,UAAlB,CAAL,CAAzBK,EACA,MAAA,CAAA,mBAAA,CACD,CAEM,QAAA,CAAA,iBAAA,CAAA,eAAA,CAAA,eAAA,CAAyF,CAC9F,GAAMS,CAAAA,WAAW,CAAGC,eAAe,CAAGA,eAAe,CAAfA,GAAAA,CAAH,0BAAGA,CAAH,CAAnC,IAAA,CACA,GAAMrB,CAAAA,WAAW,CAAGS,eAAe,CAAfA,QAAAA,CAAAA,eAAAA,GAApB,EAAA,CACA,GAAMa,CAAAA,eAAe,CAArB,EAAA,CAH8F,0CAI9F,WAJ8F,aAI9F,kDAAqC,IAArC,CAAA,SAAqC,cACnC,GAAA,WAAA,CAAiB,CACf;AACA,GAAMC,CAAAA,KAAK,CAAGC,SAAS,CAATA,CAAAA,CAAAA,cAAAA,GAA+BA,SAAS,CAATA,CAAAA,CAA7C,IAAA,CACA,GAAI,CAACJ,WAAW,CAAXA,QAAAA,CAAL,KAAKA,CAAL,CAAkC,CAChCE,eAAe,CAAfA,IAAAA,CAAAA,SAAAA,EACD,CACF,CACF,CAZ6F,uDAc9Fb,eAAe,CAAfA,QAAAA,CAAAA,eAAAA,EAAAA,eAAAA,CACD,CAEM,QAAA,CAAA,aAAA,CAAA,eAAA,CAAA,cAAA,CAAuF,CAC5F,GAAMgB,CAAAA,eAAyC,CAAGhB,eAAe,CAAfA,QAAAA,CAAAA,eAAAA,GAAlD,EAAA,CACAgB,eAAe,CAAfA,IAAAA,CAAqB,CACnBZ,CAAC,CAAE,CAAE,eAAgBa,cAAlB,CADgB,CAArBD,EAGAhB,eAAe,CAAfA,QAAAA,CAAAA,eAAAA,EAAAA,eAAAA,CACD,CAEM,QAAA,CAAA,iBAAA,CAAA,eAAA,CAAA,eAAA,CAG8B,CACnC,GAAMT,CAAAA,WAAW,CAAG2B,cAAc,CAAlC,eAAkC,CAAlC,CAEA,GAAMC,CAAAA,OAA0C,CAAhD,EAAA,CAHmC,0CAInC,eAJmC,aAInC,kDAA8C,IAA9C,CAAA,cAA8C,cAC5C,GAAMC,CAAAA,UAAU,CAAGC,0BAA0B,CAA7C,cAA6C,CAA7C,CACA,GAAI,CAAC9B,WAAW,CAAXA,QAAAA,CAAL,UAAKA,CAAL,CAAuC,CACrC+B,aAAa,CAAA,eAAA,CAAbA,UAAa,CAAbA,CACAH,OAAO,CAAPA,cAAO,CAAPA,CAAAA,IAAAA,CAFF,CAAA,IAGO,CACLA,OAAO,CAAPA,cAAO,CAAPA,CAAAA,KAAAA,CACD,CACF,CAZkC,uDAanC,MAAA,CAAA,OAAA,CACD,CAEM,QAAA,CAAA,gBAAA,CAAA,eAAA,CAAA,cAAA,CAGI,CACT,GAAM5B,CAAAA,WAAW,CAAG2B,cAAc,CAAlC,eAAkC,CAAlC,CACA,GAAME,CAAAA,UAAU,CAAGC,0BAA0B,CAA7C,cAA6C,CAA7C,CAEA,GAAI,CAAC9B,WAAW,CAAXA,QAAAA,CAAL,UAAKA,CAAL,CAAuC,CACrC+B,aAAa,CAAA,eAAA,CAAbA,UAAa,CAAbA,CACA,MAAA,KAAA,CACD,CACD,MAAA,MAAA,CACD,CAEM,QAAA,CAAA,0BAAA,CAAA,cAAA,CAAoE,CACzE,GAAIL,cAAc,CAAdA,QAAAA,CAAJ,GAAIA,CAAJ,CAAkC,CAChC,GAAMM,CAAAA,GAAG,CAAGN,cAAc,CAAdA,KAAAA,CAAZ,GAAYA,CAAZ,CACA,GAAMO,CAAAA,IAAI,CAAGD,GAAG,CAAhB,GAAaA,EAAb,CACA,MAAO,6BAAA,GAAA,GAASC,IAAI,CAAb,WAASA,EAAT,GAAA,IAAA,CAAP,GAAO,CAAP,CAHF,CAAA,IAIO,CACL;AACA,MAAOH,CAAAA,0BAA0B,8BAAjC,cAAiC,EAAjC,CACD,CACF,CAEM,QAAA,CAAA,cAAA,CAAA,eAAA,CAAoE,CACzE,GAAML,CAAAA,eAAyC,CAAGhB,eAAe,CAAfA,QAAAA,CAAAA,eAAAA,GAAlD,EAAA,CACA,GAAMT,CAAAA,WAAW,CAAG,eAAe,CAAf,GAAA,CAAoBkC,SAAAA,gBAAgB,CAAI,CAC1D,MAAOA,CAAAA,gBAAgB,CAAhBA,CAAAA,CAAAA,cAAAA,GAAsCA,gBAAgB,CAAhBA,CAAAA,CAA7C,IAAA,CADF,CAAoB,CAApB,CAGA,MAAA,CAAA,WAAA,CACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { AndroidManifest, ensureToolsAvailable, ManifestUsesPermission } from './Manifest';\n\nconst USES_PERMISSION = 'uses-permission';\n\nexport const withPermissions: ConfigPlugin<string[] | void> = (config, permissions) => {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = [\n      // @ts-ignore\n      ...new Set(config.android.permissions.concat(permissions)),\n    ];\n  }\n  return withAndroidManifest(config, async config => {\n    config.modResults = await setAndroidPermissions(config, config.modResults);\n    return config;\n  });\n};\n\n/** Given a permission or list of permissions, block permissions in the final `AndroidManifest.xml` to ensure no installed library or plugin can add them. */\nexport const withBlockedPermissions: ConfigPlugin<string[] | string> = (config, permissions) => {\n  const resolvedPermissions = (Array.isArray(permissions) ? permissions : [permissions]).filter(\n    Boolean\n  );\n\n  if (!resolvedPermissions.length) {\n    WarningAggregator.addWarningAndroid('block-permissions', 'No permissions provided');\n  }\n\n  if (config?.android?.permissions && Array.isArray(config.android.permissions)) {\n    // Remove any static config permissions\n    config.android.permissions = config.android.permissions.filter(\n      permission => !resolvedPermissions.includes(permission)\n    );\n  }\n\n  return withAndroidManifest(config, async config => {\n    config.modResults = ensureToolsAvailable(config.modResults);\n    config.modResults = addBlockedPermissions(config.modResults, resolvedPermissions);\n    return config;\n  });\n};\n\nexport const withInternalBlockedPermissions: ConfigPlugin = config => {\n  // Only add permissions if the user defined the property and added some values\n  // this ensures we don't add the `tools:*` namespace extraneously.\n  if (config.android?.blockedPermissions?.length) {\n    return withBlockedPermissions(config, config.android.blockedPermissions);\n  }\n\n  return config;\n};\n\nexport function addBlockedPermissions(androidManifest: AndroidManifest, permissions: string[]) {\n  if (!Array.isArray(androidManifest.manifest['uses-permission'])) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n\n  for (const permission of permissions) {\n    androidManifest.manifest['uses-permission'] = ensureBlockedPermission(\n      androidManifest.manifest['uses-permission'],\n      permission\n    );\n  }\n\n  return androidManifest;\n}\n\n/**\n * Filter any existing permissions matching the provided permission name, then add a\n * restricted permission to overwrite any extra permissions that may be added in a\n * third-party package's AndroidManifest.xml.\n *\n * @param manifestPermissions manifest `uses-permissions` array.\n * @param permission `android:name` of the permission to restrict\n * @returns\n */\nfunction ensureBlockedPermission(\n  manifestPermissions: ManifestUsesPermission[],\n  permission: string\n) {\n  // Remove permission if it currently exists\n  manifestPermissions = manifestPermissions.filter(e => e.$['android:name'] !== permission);\n\n  // Add a permission with tools:node to overwrite any existing permission and ensure it's removed upon building.\n  manifestPermissions.push({\n    $: { 'android:name': permission, 'tools:node': 'remove' },\n  });\n  return manifestPermissions;\n}\n\nfunction prefixAndroidPermissionsIfNecessary(permissions: string[]): string[] {\n  return permissions.map(permission => {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\n\nexport function getAndroidPermissions(config: Pick<ExpoConfig, 'android'>): string[] {\n  return config.android?.permissions ?? [];\n}\n\nexport function setAndroidPermissions(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const permissions = getAndroidPermissions(config);\n  const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  const permissionsToAdd = [...providedPermissions];\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  // manifest.manifest['uses-permission'] = [];\n\n  const manifestPermissions = androidManifest.manifest['uses-permission'] ?? [];\n\n  permissionsToAdd.forEach(permission => {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n\n  return androidManifest;\n}\n\nexport function isPermissionAlreadyRequested(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n): boolean {\n  return manifestPermissions.some(e => e.$['android:name'] === permission);\n}\n\nexport function addPermissionToManifest(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n) {\n  manifestPermissions.push({ $: { 'android:name': permission } });\n  return manifestPermissions;\n}\n\nexport function removePermissions(androidManifest: AndroidManifest, permissionNames?: string[]) {\n  const targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  const permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  const nextPermissions = [];\n  for (const attribute of permissions) {\n    if (targetNames) {\n      // @ts-ignore: name isn't part of the type\n      const value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexport function addPermission(androidManifest: AndroidManifest, permissionName: string): void {\n  const usesPermissions: ManifestUsesPermission[] = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: { 'android:name': permissionName },\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexport function ensurePermissions(\n  androidManifest: AndroidManifest,\n  permissionNames: string[]\n): { [permission: string]: boolean } {\n  const permissions = getPermissions(androidManifest);\n\n  const results: { [permission: string]: boolean } = {};\n  for (const permissionName of permissionNames) {\n    const targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\n\nexport function ensurePermission(\n  androidManifest: AndroidManifest,\n  permissionName: string\n): boolean {\n  const permissions = getPermissions(androidManifest);\n  const targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\n\nexport function ensurePermissionNameFormat(permissionName: string): string {\n  if (permissionName.includes('.')) {\n    const com = permissionName.split('.');\n    const name = com.pop() as string;\n    return [...com, name.toUpperCase()].join('.');\n  } else {\n    // If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\n\nexport function getPermissions(androidManifest: AndroidManifest): string[] {\n  const usesPermissions: { [key: string]: any }[] = androidManifest.manifest[USES_PERMISSION] || [];\n  const permissions = usesPermissions.map(permissionObject => {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n"]},"metadata":{},"sourceType":"script"}