{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */var util=require('./util');var has=Object.prototype.hasOwnProperty;var hasNativeMap=typeof Map!==\"undefined\";/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */function ArraySet(){this._array=[];this._set=hasNativeMap?new Map():Object.create(null);}/**\n * Static method for creating ArraySet instances from an existing array.\n */ArraySet.fromArray=function ArraySet_fromArray(aArray,aAllowDuplicates){var set=new ArraySet();for(var i=0,len=aArray.length;i<len;i++){set.add(aArray[i],aAllowDuplicates);}return set;};/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */ArraySet.prototype.size=function ArraySet_size(){return hasNativeMap?this._set.size:Object.getOwnPropertyNames(this._set).length;};/**\n * Add the given string to this set.\n *\n * @param String aStr\n */ArraySet.prototype.add=function ArraySet_add(aStr,aAllowDuplicates){var sStr=hasNativeMap?aStr:util.toSetString(aStr);var isDuplicate=hasNativeMap?this.has(aStr):has.call(this._set,sStr);var idx=this._array.length;if(!isDuplicate||aAllowDuplicates){this._array.push(aStr);}if(!isDuplicate){if(hasNativeMap){this._set.set(aStr,idx);}else{this._set[sStr]=idx;}}};/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */ArraySet.prototype.has=function ArraySet_has(aStr){if(hasNativeMap){return this._set.has(aStr);}else{var sStr=util.toSetString(aStr);return has.call(this._set,sStr);}};/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */ArraySet.prototype.indexOf=function ArraySet_indexOf(aStr){if(hasNativeMap){var idx=this._set.get(aStr);if(idx>=0){return idx;}}else{var sStr=util.toSetString(aStr);if(has.call(this._set,sStr)){return this._set[sStr];}}throw new Error('\"'+aStr+'\" is not in the set.');};/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */ArraySet.prototype.at=function ArraySet_at(aIdx){if(aIdx>=0&&aIdx<this._array.length){return this._array[aIdx];}throw new Error('No element indexed by '+aIdx);};/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */ArraySet.prototype.toArray=function ArraySet_toArray(){return this._array.slice();};exports.ArraySet=ArraySet;","map":{"version":3,"names":["util","require","has","Object","prototype","hasOwnProperty","hasNativeMap","Map","ArraySet","_array","_set","create","fromArray","ArraySet_fromArray","aArray","aAllowDuplicates","set","i","len","length","add","size","ArraySet_size","getOwnPropertyNames","ArraySet_add","aStr","sStr","toSetString","isDuplicate","call","idx","push","ArraySet_has","indexOf","ArraySet_indexOf","get","Error","at","ArraySet_at","aIdx","toArray","ArraySet_toArray","slice","exports"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/@expo/webpack-config/node_modules/source-map/lib/array-set.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}