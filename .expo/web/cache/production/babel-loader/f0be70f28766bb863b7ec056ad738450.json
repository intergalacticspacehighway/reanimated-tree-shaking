{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function get(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod){if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);}__setModuleDefault(result,mod);return result;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.createDevServer=exports.isDevConfig=void 0;var chalk_1=__importDefault(require(\"chalk\"));var crypto_1=__importDefault(require(\"crypto\"));var fs_extra_1=__importDefault(require(\"fs-extra\"));var getenv_1=require(\"getenv\");var path=__importStar(require(\"path\"));var errorOverlayMiddleware_1=__importDefault(require(\"react-dev-utils/errorOverlayMiddleware\"));// @ts-ignore\nvar evalSourceMapMiddleware_1=__importDefault(require(\"react-dev-utils/evalSourceMapMiddleware\"));var ignoredFiles_1=__importDefault(require(\"react-dev-utils/ignoredFiles\"));var noopServiceWorkerMiddleware_1=__importDefault(require(\"react-dev-utils/noopServiceWorkerMiddleware\"));var redirectServedPathMiddleware_1=__importDefault(require(\"react-dev-utils/redirectServedPathMiddleware\"));var env_1=require(\"../env\");// Ensure the certificate and key provided are valid and if not\n// throw an easy to debug error\nfunction validateKeyAndCerts(_ref){var cert=_ref.cert,key=_ref.key,keyFile=_ref.keyFile,crtFile=_ref.crtFile;var encrypted;try{// publicEncrypt will throw an error with an invalid cert\nencrypted=crypto_1[\"default\"].publicEncrypt(cert,Buffer.from('test'));}catch(_unused){return false;}try{// privateDecrypt will throw an error with an invalid key\ncrypto_1[\"default\"].privateDecrypt(key,encrypted);}catch(_unused2){return false;}return true;}// Read file and throw an error if it doesn't exist\nfunction readEnvFile(file,type){if(!fs_extra_1[\"default\"].existsSync(file)){throw new Error(\"You specified \".concat(chalk_1[\"default\"].cyan(type),\" in your env, but the file \\\"\").concat(chalk_1[\"default\"].yellow(file),\"\\\" can't be found.\"));}return fs_extra_1[\"default\"].readFileSync(file);}// Get the https config\n// Return cert files if provided in env, otherwise just true or false\nfunction getHttpsConfig(projectRoot,isHttps){var _process$env=process.env,SSL_CRT_FILE=_process$env.SSL_CRT_FILE,SSL_KEY_FILE=_process$env.SSL_KEY_FILE;if(isHttps&&SSL_CRT_FILE&&SSL_KEY_FILE){var crtFile=path.resolve(projectRoot,SSL_CRT_FILE);var keyFile=path.resolve(projectRoot,SSL_KEY_FILE);var config={cert:readEnvFile(crtFile,'SSL_CRT_FILE'),key:readEnvFile(keyFile,'SSL_KEY_FILE')};if(validateKeyAndCerts(_objectSpread(_objectSpread({},config),{},{keyFile:keyFile,crtFile:crtFile}))){return config;}else{console.log(chalk_1[\"default\"].yellow(\"\\u203A Failed to self-sign SSL certificates for HTTPS. Falling back to insecure https. You can re run with `--no-https` to disable HTTPS, or delete the `.expo` folder and try again.\"));return true;}}return isHttps;}// @ts-ignore\nvar host=process.env.HOST||'0.0.0.0';var sockHost=process.env.WDS_SOCKET_HOST;var sockPath=process.env.WDS_SOCKET_PATH;// default: '/sockjs-node'\nvar sockPort=process.env.WDS_SOCKET_PORT;/**\n *\n * @param input\n * @internal\n */function isDevConfig(input){return input&&input.mode==='development';}exports.isDevConfig=isDevConfig;/**\n * Add a valid dev server to the provided Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @category addons\n */function withDevServer(webpackConfig,env){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(isDevConfig(webpackConfig)){webpackConfig.devServer=createDevServer(env,options);}return webpackConfig;}exports[\"default\"]=withDevServer;/**\n * Create a valid Webpack dev server config.\n *\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @internal\n */function createDevServer(env){var _ref2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},allowedHost=_ref2.allowedHost,proxy=_ref2.proxy;var _env$https=env.https,https=_env$https===void 0?false:_env$https;var locations=env.locations||(0,env_1.getPaths)(env.projectRoot,env);var isNative=['ios','android'].includes(env.platform);var _ref3=(0,env_1.getPublicPaths)(env),publicUrlOrPath=_ref3.publicPath;// Because native React runtimes uses .bundle we must make\n// the .bundle extension be served as javascript.\nvar mimeTypes=isNative?{typeMap:{'application/javascript':['bundle']},force:true}:undefined;// Attempt to keep this as close to create-react-native app as possible.\n// https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpackDevServer.config.js\nreturn{// WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n// websites from potentially accessing local content through DNS rebinding:\n// https://github.com/webpack/webpack-dev-server/issues/887\n// https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n// However, it made several existing use cases such as development in cloud\n// environment or subdomains in development significantly more complicated:\n// https://github.com/facebook/create-react-app/issues/2271\n// https://github.com/facebook/create-react-app/issues/2233\n// While we're investigating better solutions, for now we will take a\n// compromise. Since our WDS configuration only serves files in the `public`\n// folder we won't consider accessing them a vulnerability. However, if you\n// use the `proxy` feature, it gets more dangerous because it can expose\n// remote code execution vulnerabilities in backends like Django and Rails.\n// So we will disable the host check normally, but enable it if you have\n// specified the `proxy` setting. Finally, we let you override it if you\n// really know what you're doing with a special environment variable.\ndisableHostCheck:!proxy||(0,getenv_1.boolish)('DANGEROUSLY_DISABLE_HOST_CHECK',false),// Enable gzip compression of generated files.\ncompress:true,// Silence WebpackDevServer's own logs since they're generally not useful.\n// It will still show compile warnings and errors with this setting.\nclientLogLevel:'silent',// By default WebpackDevServer serves physical files from current directory\n// in addition to all the virtual build products that it serves from memory.\n// This is confusing because those files wonâ€™t automatically be available in\n// production build folder unless we copy them. However, copying the whole\n// project directory is dangerous because we may expose sensitive files.\n// Instead, we establish a convention that only files in `public` directory\n// get served. Our build script will copy `public` into the `build` folder.\n// In `index.html`, you can get URL of `public` folder with %WEB_PUBLIC_URL%:\n// <link rel=\"icon\" href=\"%WEB_PUBLIC_URL%/favicon.ico\">\n// In JavaScript code, you can access it with `process.env.WEB_PUBLIC_URL`.\n// Note that we only recommend to use `public` folder as an escape hatch\n// for files like `favicon.ico`, `manifest.json`, and libraries that are\n// for some reason broken when imported through webpack. If you just want to\n// use an image, put it in `src` and `import` it from JavaScript instead.\ncontentBase:locations.template.folder,contentBasePublicPath:publicUrlOrPath,// By default files from `contentBase` will not trigger a page reload.\nwatchContentBase:true,// Enable hot reloading server. It will provide WDS_SOCKET_PATH endpoint\n// for the WebpackDevServer client so it can learn when the files were\n// updated. The WebpackDevServer client is included as an entry point\n// in the webpack development configuration. Note that only changes\n// to CSS are currently hot reloaded. JS changes will refresh the browser.\nhot:true,// Use 'ws' instead of 'sockjs-node' on server since we're using native\n// websockets in `webpackHotDevClient`.\ntransportMode:'ws',// Prevent a WS client from getting injected as we're already including\n// `webpackHotDevClient`.\ninjectClient:false,// Enable custom sockjs pathname for websocket connection to hot reloading server.\n// Enable custom sockjs hostname, pathname and port for websocket connection\n// to hot reloading server.\nsockHost:sockHost,sockPath:sockPath,sockPort:sockPort,// It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n// we specified in the webpack config. When homepage is '.', default to serving\n// from the root.\n// remove last slash so user can land on `/test` instead of `/test/`\npublicPath:'/',// Hide `â„¹ ï½¢wdsï½£: Project is running at`\nnoInfo:true,stats:'none',// Reportedly, this avoids CPU overload on some systems.\n// https://github.com/facebook/create-react-app/issues/293\n// src/node_modules is not ignored to support absolute imports\n// https://github.com/facebook/create-react-app/issues/1065\nwatchOptions:{ignored:(0,ignoredFiles_1[\"default\"])(locations.root)},https:getHttpsConfig(env.projectRoot,https),host:host,overlay:false,historyApiFallback:{// Paths with dots should still use the history fallback.\n// See https://github.com/facebook/create-react-app/issues/387.\ndisableDotRule:true,index:publicUrlOrPath},\"public\":allowedHost,// `proxy` is run between `before` and `after` `webpack-dev-server` hooks\nproxy:proxy,before:function before(app,server){// Everything we add here is for web support\nif(isNative){return;}// Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`\n// middlewares before `redirectServedPath` otherwise will not have any effect\n// This lets us fetch source contents from webpack for the error overlay\napp.use((0,evalSourceMapMiddleware_1[\"default\"])(server));// This lets us open files from the runtime error overlay.\napp.use((0,errorOverlayMiddleware_1[\"default\"])());// This service worker file is effectively a 'no-op' that will reset any\n// previous service worker registered for the same host:port combination.\n// We do this in development to avoid hitting the production cache if\n// it used the same host and port.\n// https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\napp.use((0,noopServiceWorkerMiddleware_1[\"default\"])(publicUrlOrPath));},after:function after(app){// Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\napp.use((0,redirectServedPathMiddleware_1[\"default\"])(publicUrlOrPath));},// Without disabling this on native, you get the error `Can't find variable self`.\ninline:!isNative,// Specify the mimetypes for hosting native bundles.\nmimeTypes:mimeTypes};}exports.createDevServer=createDevServer;","map":{"version":3,"sources":["../../src/addons/withDevServer.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport { boolish } from 'getenv';\nimport * as path from 'path';\nimport errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware';\n// @ts-ignore\nimport evalSourceMapMiddleware from 'react-dev-utils/evalSourceMapMiddleware';\nimport ignoredFiles from 'react-dev-utils/ignoredFiles';\nimport noopServiceWorkerMiddleware from 'react-dev-utils/noopServiceWorkerMiddleware';\nimport redirectServedPath from 'react-dev-utils/redirectServedPathMiddleware';\nimport {\n  ProxyConfigArray,\n  ProxyConfigMap,\n  Configuration as WebpackDevServerConfiguration,\n} from 'webpack-dev-server';\n\nimport { getPaths, getPublicPaths } from '../env';\nimport { AnyConfiguration, DevConfiguration, Environment } from '../types';\n\n// Ensure the certificate and key provided are valid and if not\n// throw an easy to debug error\nfunction validateKeyAndCerts({ cert, key, keyFile, crtFile }: any): boolean {\n  let encrypted;\n  try {\n    // publicEncrypt will throw an error with an invalid cert\n    encrypted = crypto.publicEncrypt(cert, Buffer.from('test'));\n  } catch {\n    return false;\n  }\n\n  try {\n    // privateDecrypt will throw an error with an invalid key\n    crypto.privateDecrypt(key, encrypted);\n  } catch {\n    return false;\n  }\n  return true;\n}\n\n// Read file and throw an error if it doesn't exist\nfunction readEnvFile(file: string, type: string): any {\n  if (!fs.existsSync(file)) {\n    throw new Error(\n      `You specified ${chalk.cyan(type)} in your env, but the file \"${chalk.yellow(\n        file\n      )}\" can't be found.`\n    );\n  }\n  return fs.readFileSync(file);\n}\n\n// Get the https config\n// Return cert files if provided in env, otherwise just true or false\nfunction getHttpsConfig(projectRoot: string, isHttps: boolean): any {\n  const { SSL_CRT_FILE, SSL_KEY_FILE } = process.env;\n\n  if (isHttps && SSL_CRT_FILE && SSL_KEY_FILE) {\n    const crtFile = path.resolve(projectRoot, SSL_CRT_FILE);\n    const keyFile = path.resolve(projectRoot, SSL_KEY_FILE);\n    const config = {\n      cert: readEnvFile(crtFile, 'SSL_CRT_FILE'),\n      key: readEnvFile(keyFile, 'SSL_KEY_FILE'),\n    };\n\n    if (validateKeyAndCerts({ ...config, keyFile, crtFile })) {\n      return config;\n    } else {\n      console.log(\n        chalk.yellow(\n          `\\u203A Failed to self-sign SSL certificates for HTTPS. Falling back to insecure https. You can re run with \\`--no-https\\` to disable HTTPS, or delete the \\`.expo\\` folder and try again.`\n        )\n      );\n      return true;\n    }\n  }\n  return isHttps;\n}\n\n// @ts-ignore\nconst host = process.env.HOST || '0.0.0.0';\nconst sockHost = process.env.WDS_SOCKET_HOST;\nconst sockPath = process.env.WDS_SOCKET_PATH; // default: '/sockjs-node'\nconst sockPort = process.env.WDS_SOCKET_PORT;\n\n/**\n *\n * @param input\n * @internal\n */\nexport function isDevConfig(input: AnyConfiguration): input is DevConfiguration {\n  return input && input.mode === 'development';\n}\n\ntype SelectiveEnv = Pick<Environment, 'mode' | 'locations' | 'projectRoot' | 'https' | 'platform'>;\n\ntype DevServerOptions = {\n  allowedHost?: string;\n  proxy?: ProxyConfigMap | ProxyConfigArray;\n};\n\n/**\n * Add a valid dev server to the provided Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @category addons\n */\nexport default function withDevServer(\n  webpackConfig: AnyConfiguration,\n  env: SelectiveEnv,\n  options: DevServerOptions = {}\n): AnyConfiguration {\n  if (isDevConfig(webpackConfig)) {\n    webpackConfig.devServer = createDevServer(env, options);\n  }\n  return webpackConfig;\n}\n\n/**\n * Create a valid Webpack dev server config.\n *\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @internal\n */\nexport function createDevServer(\n  env: SelectiveEnv,\n  { allowedHost, proxy }: DevServerOptions = {}\n): WebpackDevServerConfiguration {\n  const { https = false } = env;\n  const locations = env.locations || getPaths(env.projectRoot, env);\n  const isNative = ['ios', 'android'].includes(env.platform);\n  const { publicPath: publicUrlOrPath } = getPublicPaths(env);\n  // Because native React runtimes uses .bundle we must make\n  // the .bundle extension be served as javascript.\n  const mimeTypes: any = isNative\n    ? {\n        typeMap: { 'application/javascript': ['bundle'] },\n        force: true,\n      }\n    : undefined;\n\n  // Attempt to keep this as close to create-react-native app as possible.\n  // https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpackDevServer.config.js\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebook/create-react-app/issues/2271\n    // https://github.com/facebook/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    disableHostCheck: !proxy || boolish('DANGEROUSLY_DISABLE_HOST_CHECK', false),\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'silent',\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files wonâ€™t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %WEB_PUBLIC_URL%:\n    // <link rel=\"icon\" href=\"%WEB_PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.WEB_PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: locations.template.folder,\n    contentBasePublicPath: publicUrlOrPath,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide WDS_SOCKET_PATH endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // Use 'ws' instead of 'sockjs-node' on server since we're using native\n    // websockets in `webpackHotDevClient`.\n    transportMode: 'ws',\n    // Prevent a WS client from getting injected as we're already including\n    // `webpackHotDevClient`.\n    injectClient: false,\n    // Enable custom sockjs pathname for websocket connection to hot reloading server.\n    // Enable custom sockjs hostname, pathname and port for websocket connection\n    // to hot reloading server.\n    sockHost,\n    sockPath,\n    sockPort,\n    // It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n    // we specified in the webpack config. When homepage is '.', default to serving\n    // from the root.\n    // remove last slash so user can land on `/test` instead of `/test/`\n    publicPath: '/',\n    // Hide `â„¹ ï½¢wdsï½£: Project is running at`\n    noInfo: true,\n    stats: 'none',\n    // Reportedly, this avoids CPU overload on some systems.\n    // https://github.com/facebook/create-react-app/issues/293\n    // src/node_modules is not ignored to support absolute imports\n    // https://github.com/facebook/create-react-app/issues/1065\n    watchOptions: {\n      ignored: ignoredFiles(locations.root),\n    },\n    https: getHttpsConfig(env.projectRoot, https),\n    host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n      index: publicUrlOrPath,\n    },\n    public: allowedHost,\n    // `proxy` is run between `before` and `after` `webpack-dev-server` hooks\n    proxy,\n    before(app, server) {\n      // Everything we add here is for web support\n      if (isNative) {\n        return;\n      }\n      // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`\n      // middlewares before `redirectServedPath` otherwise will not have any effect\n      // This lets us fetch source contents from webpack for the error overlay\n      app.use(evalSourceMapMiddleware(server));\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware(publicUrlOrPath));\n    },\n    after(app) {\n      // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n      app.use(redirectServedPath(publicUrlOrPath));\n    },\n    // Without disabling this on native, you get the error `Can't find variable self`.\n    inline: !isNative,\n    // Specify the mimetypes for hosting native bundles.\n    mimeTypes,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}