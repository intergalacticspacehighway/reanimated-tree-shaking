{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});/**\n * Resolve the `mode` in a way that accounts for legacy treatment and environment variables.\n *\n * mode -> production -> development -> process.env.NODE_ENV -> 'development'\n * @category env\n */function getMode(_ref){var production=_ref.production,development=_ref.development,mode=_ref.mode;if(mode===undefined){if(process.env.NODE_ENV!=null&&isValidMode(process.env.NODE_ENV)){return process.env.NODE_ENV.toLowerCase();}}else if(isValidMode(mode)){return mode.toLowerCase();}if(production){return'production';}else if(development){return'development';}return'development';}exports[\"default\"]=getMode;function isValidMode(inputMode){var mode=inputMode||'';if(typeof inputMode==='string'){mode=inputMode.toLowerCase();}return!!mode&&['none','production','development'].includes(mode);}","map":{"version":3,"sources":["../../src/env/getMode.ts"],"names":[],"mappings":"sEAEA;;;;;AAKG,GACH,QAAwB,CAAA,OAAxB,MAQC,IAPC,CAAA,UAOD,MAPC,UAOD,CANC,WAMD,MANC,WAMD,CALC,IAKD,MALC,IAKD,CACC,GAAI,IAAI,GAAK,SAAb,CAAwB,CACtB,GAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAwB,IAAxB,EAAgC,WAAW,CAAC,OAAO,CAAC,GAAR,CAAY,QAAb,CAA/C,CAAuE,CACrE,MAAO,CAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,WAArB,EAAP,CACD,CACF,CAJD,IAIO,IAAI,WAAW,CAAC,IAAD,CAAf,CAAuB,CAC5B,MAAO,CAAA,IAAI,CAAC,WAAL,EAAP,CACD,CACD,GAAI,UAAJ,CAAgB,CACd,MAAO,YAAP,CACD,CAFD,IAEO,IAAI,WAAJ,CAAiB,CACtB,MAAO,aAAP,CACD,CACD,MAAO,aAAP,CACD,CAtBD,OAAA,WAAA,CAAA,OAAA,CAwBA,QAAS,CAAA,WAAT,CAAqB,SAArB,CAAuC,CACrC,GAAI,CAAA,IAAI,CAAG,SAAS,EAAI,EAAxB,CACA,GAAI,MAAO,CAAA,SAAP,GAAqB,QAAzB,CAAmC,CACjC,IAAI,CAAG,SAAS,CAAC,WAAV,EAAP,CACD,CACD,MAAO,CAAC,CAAC,IAAF,EAAU,CAAC,MAAD,CAAS,YAAT,CAAuB,aAAvB,EAAsC,QAAtC,CAA+C,IAA/C,CAAjB,CACD","sourcesContent":["import { Mode } from '../types';\n\n/**\n * Resolve the `mode` in a way that accounts for legacy treatment and environment variables.\n *\n * mode -> production -> development -> process.env.NODE_ENV -> 'development'\n * @category env\n */\nexport default function getMode({\n  production,\n  development,\n  mode,\n}: {\n  production?: boolean;\n  development?: boolean;\n  mode?: string;\n}): Mode {\n  if (mode === undefined) {\n    if (process.env.NODE_ENV != null && isValidMode(process.env.NODE_ENV)) {\n      return process.env.NODE_ENV.toLowerCase() as Mode;\n    }\n  } else if (isValidMode(mode)) {\n    return mode.toLowerCase() as Mode;\n  }\n  if (production) {\n    return 'production';\n  } else if (development) {\n    return 'development';\n  }\n  return 'development';\n}\n\nfunction isValidMode(inputMode?: string): boolean {\n  let mode = inputMode || '';\n  if (typeof inputMode === 'string') {\n    mode = inputMode.toLowerCase();\n  }\n  return !!mode && ['none', 'production', 'development'].includes(mode);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}