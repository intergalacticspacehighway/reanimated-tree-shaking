{"ast":null,"code":"/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */ // These values are established by empiricism with tests (tradeoff: performance VS precision)\nexport var Bezier=function(){var _f=function _f(mX1,mY1,mX2,mY2){var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var A=function(){var _f=function _f(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;};_f._closure={};_f.asString=\"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\";_f.__workletHash=7696928702327;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (15:4)\";return _f;}();var B=function(){var _f=function _f(aA1,aA2){return 3.0*aA2-6.0*aA1;};_f._closure={};_f.asString=\"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\";_f.__workletHash=3169786778773;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (19:4)\";return _f;}();var C=function(){var _f=function _f(aA1){return 3.0*aA1;};_f._closure={};_f.asString=\"function C(aA1){return 3.0*aA1;}\";_f.__workletHash=6399610653367;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (23:4)\";return _f;}();// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nvar calcBezier=function(){var _f=function _f(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;};_f._closure={A:A,B:B,C:C};_f.asString=\"function calcBezier(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}}\";_f.__workletHash=3153137150968;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (28:4)\";return _f;}();// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nvar getSlope=function(){var _f=function _f(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);};_f._closure={A:A,B:B,C:C};_f.asString=\"function getSlope(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}}\";_f.__workletHash=17050227570308;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (33:4)\";return _f;}();var binarySubdivide=function(){var _f=function _f(aX,aA,aB,mX1,mX2){var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;};_f._closure={SUBDIVISION_PRECISION:SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS:SUBDIVISION_MAX_ITERATIONS,calcBezier:calcBezier};_f.asString=\"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=jsThis._closure;{let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}}\";_f.__workletHash=7302972877011;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (37:4)\";return _f;}();var newtonRaphsonIterate=function(){var _f=function _f(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;};_f._closure={NEWTON_ITERATIONS:NEWTON_ITERATIONS,getSlope:getSlope,calcBezier:calcBezier};_f.asString=\"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=jsThis._closure;{for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}}\";_f.__workletHash=10378506933532;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (55:4)\";return _f;}();var LinearEasing=function(){var _f=function _f(x){return x;};_f._closure={};_f.asString=\"function LinearEasing(x){return x;}\";_f.__workletHash=3962143445177;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (67:4)\";return _f;}();if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}// FIXME: Float32Array is not available in Hermes right now\n//\n// var float32ArraySupported = typeof Float32Array === 'function';\n// const sampleValues = float32ArraySupported\n// ? new Float32Array(kSplineTableSize)\n// : new Array(kSplineTableSize);\n// Precompute samples table\n// FIXME: Float32Array is not available in Hermes right now\n//\n// var float32ArraySupported = typeof Float32Array === 'function';\n// const sampleValues = float32ArraySupported\n// ? new Float32Array(kSplineTableSize)\n// : new Array(kSplineTableSize);\n// Precompute samples table\nvar sampleValues=new Array(kSplineTableSize);for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}var getTForX=function(){var _f=function _f(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;// Interpolate to provide an initial guess for t\n// Interpolate to provide an initial guess for t\nvar dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};_f._closure={kSplineTableSize:kSplineTableSize,sampleValues:sampleValues,kSampleStepSize:kSampleStepSize,getSlope:getSlope,mX1:mX1,mX2:mX2,NEWTON_MIN_SLOPE:NEWTON_MIN_SLOPE,newtonRaphsonIterate:newtonRaphsonIterate,binarySubdivide:binarySubdivide};_f.asString=\"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=jsThis._closure;{let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}}\";_f.__workletHash=3164695138880;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (88:4)\";return _f;}();return function(){var _f=function _f(x){if(mX1===mY1&&mX2===mY2){return x;// linear\n}// Because JavaScript number are imprecise, we should guarantee the extremes are right.\n// Because JavaScript number are imprecise, we should guarantee the extremes are right.\nif(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};_f._closure={mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,calcBezier:calcBezier,getTForX:getTForX};_f.asString=\"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=jsThis._closure;{if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}}\";_f.__workletHash=8676971518933;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (112:11)\";return _f;}();};_f._closure={};_f.asString=\"function Bezier(mX1,mY1,mX2,mY2){const NEWTON_ITERATIONS=4;const NEWTON_MIN_SLOPE=0.001;const SUBDIVISION_PRECISION=0.0000001;const SUBDIVISION_MAX_ITERATIONS=10;const kSplineTableSize=11;const kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\";_f.__workletHash=7389715548968;_f.__location=\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (7:7)\";return _f;}();","map":{"version":3,"names":["Bezier","_f","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","_closure","asString","__workletHash","__location","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope"],"sources":["/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nexport const Bezier = function () {\n  const _f = function (mX1, mY1, mX2, mY2) {\n    const NEWTON_ITERATIONS = 4;\n    const NEWTON_MIN_SLOPE = 0.001;\n    const SUBDIVISION_PRECISION = 0.0000001;\n    const SUBDIVISION_MAX_ITERATIONS = 10;\n    const kSplineTableSize = 11;\n    const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n    const A = function () {\n      const _f = function (aA1, aA2) {\n        return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\";\n      _f.__workletHash = 7696928702327;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (15:4)\";\n      return _f;\n    }();\n\n    const B = function () {\n      const _f = function (aA1, aA2) {\n        return 3.0 * aA2 - 6.0 * aA1;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\";\n      _f.__workletHash = 3169786778773;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (19:4)\";\n      return _f;\n    }();\n\n    const C = function () {\n      const _f = function (aA1) {\n        return 3.0 * aA1;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function C(aA1){return 3.0*aA1;}\";\n      _f.__workletHash = 6399610653367;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (23:4)\";\n      return _f;\n    }(); // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n\n\n    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n    const calcBezier = function () {\n      const _f = function (aT, aA1, aA2) {\n        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n      };\n\n      _f._closure = {\n        A,\n        B,\n        C\n      };\n      _f.asString = \"function calcBezier(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}}\";\n      _f.__workletHash = 3153137150968;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (28:4)\";\n      return _f;\n    }(); // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n\n\n    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n    const getSlope = function () {\n      const _f = function (aT, aA1, aA2) {\n        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n      };\n\n      _f._closure = {\n        A,\n        B,\n        C\n      };\n      _f.asString = \"function getSlope(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}}\";\n      _f.__workletHash = 17050227570308;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (33:4)\";\n      return _f;\n    }();\n\n    const binarySubdivide = function () {\n      const _f = function (aX, aA, aB, mX1, mX2) {\n        let currentX;\n        let currentT;\n        let i = 0;\n\n        do {\n          currentT = aA + (aB - aA) / 2.0;\n          currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n          if (currentX > 0.0) {\n            aB = currentT;\n          } else {\n            aA = currentT;\n          }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n        return currentT;\n      };\n\n      _f._closure = {\n        SUBDIVISION_PRECISION,\n        SUBDIVISION_MAX_ITERATIONS,\n        calcBezier\n      };\n      _f.asString = \"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=jsThis._closure;{let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}}\";\n      _f.__workletHash = 7302972877011;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (37:4)\";\n      return _f;\n    }();\n\n    const newtonRaphsonIterate = function () {\n      const _f = function (aX, aGuessT, mX1, mX2) {\n        for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n          const currentSlope = getSlope(aGuessT, mX1, mX2);\n\n          if (currentSlope === 0.0) {\n            return aGuessT;\n          }\n\n          const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n          aGuessT -= currentX / currentSlope;\n        }\n\n        return aGuessT;\n      };\n\n      _f._closure = {\n        NEWTON_ITERATIONS,\n        getSlope,\n        calcBezier\n      };\n      _f.asString = \"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=jsThis._closure;{for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}}\";\n      _f.__workletHash = 10378506933532;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (55:4)\";\n      return _f;\n    }();\n\n    const LinearEasing = function () {\n      const _f = function (x) {\n        return x;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function LinearEasing(x){return x;}\";\n      _f.__workletHash = 3962143445177;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (67:4)\";\n      return _f;\n    }();\n\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    if (mX1 === mY1 && mX2 === mY2) {\n      return LinearEasing;\n    } // FIXME: Float32Array is not available in Hermes right now\n    //\n    // var float32ArraySupported = typeof Float32Array === 'function';\n    // const sampleValues = float32ArraySupported\n    // ? new Float32Array(kSplineTableSize)\n    // : new Array(kSplineTableSize);\n    // Precompute samples table\n\n\n    // FIXME: Float32Array is not available in Hermes right now\n    //\n    // var float32ArraySupported = typeof Float32Array === 'function';\n    // const sampleValues = float32ArraySupported\n    // ? new Float32Array(kSplineTableSize)\n    // : new Array(kSplineTableSize);\n    // Precompute samples table\n    const sampleValues = new Array(kSplineTableSize);\n\n    for (let i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n\n    const getTForX = function () {\n      const _f = function (aX) {\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n          intervalStart += kSampleStepSize;\n        }\n\n        --currentSample; // Interpolate to provide an initial guess for t\n\n        // Interpolate to provide an initial guess for t\n        const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n          return guessForT;\n        } else {\n          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n      };\n\n      _f._closure = {\n        kSplineTableSize,\n        sampleValues,\n        kSampleStepSize,\n        getSlope,\n        mX1,\n        mX2,\n        NEWTON_MIN_SLOPE,\n        newtonRaphsonIterate,\n        binarySubdivide\n      };\n      _f.asString = \"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=jsThis._closure;{let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}}\";\n      _f.__workletHash = 3164695138880;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (88:4)\";\n      return _f;\n    }();\n\n    return function () {\n      const _f = function (x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n          return x; // linear\n        } // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n\n\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n          return 0;\n        }\n\n        if (x === 1) {\n          return 1;\n        }\n\n        return calcBezier(getTForX(x), mY1, mY2);\n      };\n\n      _f._closure = {\n        mX1,\n        mY1,\n        mX2,\n        mY2,\n        calcBezier,\n        getTForX\n      };\n      _f.asString = \"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=jsThis._closure;{if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}}\";\n      _f.__workletHash = 8676971518933;\n      _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (112:11)\";\n      return _f;\n    }();\n  };\n\n  _f._closure = {};\n  _f.asString = \"function Bezier(mX1,mY1,mX2,mY2){const NEWTON_ITERATIONS=4;const NEWTON_MIN_SLOPE=0.001;const SUBDIVISION_PRECISION=0.0000001;const SUBDIVISION_MAX_ITERATIONS=10;const kSplineTableSize=11;const kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\";\n  _f.__workletHash = 7389715548968;\n  _f.__location = \"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js (7:7)\";\n  return _f;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}