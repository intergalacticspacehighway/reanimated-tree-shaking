{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");var _regeneratorRuntime=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/regenerator\");var _asyncToGenerator=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getApplicationIdAsync=getApplicationIdAsync;exports.getPackage=getPackage;exports.renamePackageOnDisk=renamePackageOnDisk;exports.renamePackageOnDiskForType=renamePackageOnDiskForType;exports.setPackageInAndroidManifest=setPackageInAndroidManifest;exports.setPackageInBuildGradle=setPackageInBuildGradle;exports.withPackageRefactor=exports.withPackageManifest=exports.withPackageGradle=void 0;function _debug(){var data=_interopRequireDefault(require(\"debug\"));_debug=function _debug(){return data;};return data;}function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _glob(){var data=require(\"glob\");_glob=function _glob(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _androidPlugins(){var data=require(\"../plugins/android-plugins\");_androidPlugins=function _androidPlugins(){return data;};return data;}function _withDangerousMod(){var data=require(\"../plugins/withDangerousMod\");_withDangerousMod=function _withDangerousMod(){return data;};return data;}function _modules(){var data=require(\"../utils/modules\");_modules=function _modules(){return data;};return data;}function _warnings(){var data=require(\"../utils/warnings\");_warnings=function _warnings(){return data;};return data;}function _Paths(){var data=require(\"./Paths\");_Paths=function _Paths(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var debug=(0,_debug()[\"default\"])('expo:config-plugins:android:package');var withPackageManifest=(0,_androidPlugins().createAndroidManifestPlugin)(setPackageInAndroidManifest,'withPackageManifest');exports.withPackageManifest=withPackageManifest;var withPackageGradle=function withPackageGradle(config){return(0,_androidPlugins().withAppBuildGradle)(config,function(config){if(config.modResults.language==='groovy'){config.modResults.contents=setPackageInBuildGradle(config,config.modResults.contents);}else{(0,_warnings().addWarningAndroid)('android.package',\"Cannot automatically configure app build.gradle if it's not groovy\");}return config;});};exports.withPackageGradle=withPackageGradle;var withPackageRefactor=function withPackageRefactor(config){return(0,_withDangerousMod().withDangerousMod)(config,['android',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return renamePackageOnDisk(config,config.modRequest.projectRoot);case 2:return _context.abrupt(\"return\",config);case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()]);};exports.withPackageRefactor=withPackageRefactor;function getPackage(config){var _config$android$packa,_config$android;return(_config$android$packa=(_config$android=config.android)===null||_config$android===void 0?void 0:_config$android[\"package\"])!==null&&_config$android$packa!==void 0?_config$android$packa:null;}function getPackageRoot(projectRoot,type){return _path()[\"default\"].join(projectRoot,'android','app','src',type,'java');}function getCurrentPackageName(projectRoot,packageRoot){var mainApplication=(0,_Paths().getProjectFilePath)(projectRoot,'MainApplication');var packagePath=_path()[\"default\"].dirname(mainApplication);var packagePathParts=_path()[\"default\"].relative(packageRoot,packagePath).split(_path()[\"default\"].sep).filter(Boolean);return packagePathParts.join('.');}function getCurrentPackageForProjectFile(projectRoot,packageRoot,fileName,type){var filePath=(0,_glob().sync)(_path()[\"default\"].join(projectRoot,\"android/app/src/\".concat(type,\"/java/**/\").concat(fileName,\".@(java|kt)\")))[0];if(!filePath){return null;}var packagePath=_path()[\"default\"].dirname(filePath);var packagePathParts=_path()[\"default\"].relative(packageRoot,packagePath).split(_path()[\"default\"].sep).filter(Boolean);return packagePathParts.join('.');}function getCurrentPackageNameForType(projectRoot,type){var packageRoot=getPackageRoot(projectRoot,type);if(type==='main'){return getCurrentPackageName(projectRoot,packageRoot);}// debug, etc..\nreturn getCurrentPackageForProjectFile(projectRoot,packageRoot,'*',type);}// NOTE(brentvatne): this assumes that our MainApplication.java file is in the root of the package\n// this makes sense for standard react-native projects but may not apply in customized projects, so if\n// we want this to be runnable in any app we need to handle other possibilities\nfunction renamePackageOnDisk(_x2,_x3){return _renamePackageOnDisk.apply(this,arguments);}function _renamePackageOnDisk(){_renamePackageOnDisk=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config,projectRoot){var newPackageName,_i,_arr,type;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:newPackageName=getPackage(config);if(!(newPackageName===null)){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:_i=0,_arr=['main','debug'];case 4:if(!(_i<_arr.length)){_context2.next=11;break;}type=_arr[_i];_context2.next=8;return renamePackageOnDiskForType({projectRoot:projectRoot,type:type,packageName:newPackageName});case 8:_i++;_context2.next=4;break;case 11:case\"end\":return _context2.stop();}}},_callee2);}));return _renamePackageOnDisk.apply(this,arguments);}function renamePackageOnDiskForType(_x4){return _renamePackageOnDiskForType.apply(this,arguments);}function _renamePackageOnDiskForType(){_renamePackageOnDiskForType=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref2){var _path$default,_path$default2;var projectRoot,type,packageName,currentPackageName,packageRoot,currentPackagePath,newPackagePath,oldPathParts,_path$default3,pathToCheck,files,filesToUpdate;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:projectRoot=_ref2.projectRoot,type=_ref2.type,packageName=_ref2.packageName;if(packageName){_context3.next=3;break;}return _context3.abrupt(\"return\");case 3:currentPackageName=getCurrentPackageNameForType(projectRoot,type);debug(\"Found package \\\"\".concat(currentPackageName,\"\\\" for type \\\"\").concat(type,\"\\\"\"));if(!(!currentPackageName||currentPackageName===packageName)){_context3.next=7;break;}return _context3.abrupt(\"return\");case 7:debug(\"Refactor \\\"\".concat(currentPackageName,\"\\\" to \\\"\").concat(packageName,\"\\\" for type \\\"\").concat(type,\"\\\"\"));packageRoot=getPackageRoot(projectRoot,type);// Set up our paths\n_context3.next=11;return(0,_modules().directoryExistsAsync)(packageRoot);case 11:if(_context3.sent){_context3.next=14;break;}debug(\"- skipping refactor of missing directory: \".concat(packageRoot));return _context3.abrupt(\"return\");case 14:currentPackagePath=(_path$default=_path()[\"default\"]).join.apply(_path$default,[packageRoot].concat(_toConsumableArray(currentPackageName.split('.'))));newPackagePath=(_path$default2=_path()[\"default\"]).join.apply(_path$default2,[packageRoot].concat(_toConsumableArray(packageName.split('.'))));// Create the new directory\n_fs()[\"default\"].mkdirSync(newPackagePath,{recursive:true});// Move everything from the old directory over\n(0,_glob().sync)('**/*',{cwd:currentPackagePath}).forEach(function(relativePath){var filepath=_path()[\"default\"].join(currentPackagePath,relativePath);if(_fs()[\"default\"].lstatSync(filepath).isFile()){moveFileSync(filepath,_path()[\"default\"].join(newPackagePath,relativePath));}else{_fs()[\"default\"].mkdirSync(filepath,{recursive:true});}});// Remove the old directory recursively from com/old/package to com/old and com,\n// as long as the directories are empty\noldPathParts=currentPackageName.split('.');while(oldPathParts.length){pathToCheck=(_path$default3=_path()[\"default\"]).join.apply(_path$default3,[packageRoot].concat(_toConsumableArray(oldPathParts)));try{files=_fs()[\"default\"].readdirSync(pathToCheck);if(files.length===0){_fs()[\"default\"].rmdirSync(pathToCheck);}}finally{oldPathParts.pop();}}filesToUpdate=_toConsumableArray((0,_glob().sync)('**/*',{cwd:newPackagePath,absolute:true}));// Only update the BUCK file to match the main package name\nif(type==='main'){filesToUpdate.push(_path()[\"default\"].join(projectRoot,'android','app','BUCK'));}// Replace all occurrences of the path in the project\nfilesToUpdate.forEach(function(filepath){try{if(_fs()[\"default\"].lstatSync(filepath).isFile()){var contents=_fs()[\"default\"].readFileSync(filepath).toString();contents=contents.replace(new RegExp(currentPackageName,'g'),packageName);_fs()[\"default\"].writeFileSync(filepath,contents);}}catch(_unused){debug(\"Error updating \\\"\".concat(filepath,\"\\\" for type \\\"\").concat(type,\"\\\"\"));}});case 23:case\"end\":return _context3.stop();}}},_callee3);}));return _renamePackageOnDiskForType.apply(this,arguments);}function moveFileSync(src,dest){_fs()[\"default\"].mkdirSync(_path()[\"default\"].dirname(dest),{recursive:true});_fs()[\"default\"].renameSync(src,dest);}function setPackageInBuildGradle(config,buildGradle){var packageName=getPackage(config);if(packageName===null){return buildGradle;}var pattern=new RegExp(\"applicationId ['\\\"].*['\\\"]\");return buildGradle.replace(pattern,\"applicationId '\".concat(packageName,\"'\"));}function setPackageInAndroidManifest(config,androidManifest){var packageName=getPackage(config);if(packageName){androidManifest.manifest.$[\"package\"]=packageName;}else{delete androidManifest.manifest.$[\"package\"];}return androidManifest;}function getApplicationIdAsync(_x5){return _getApplicationIdAsync.apply(this,arguments);}function _getApplicationIdAsync(){_getApplicationIdAsync=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(projectRoot){var _matchResult$,buildGradlePath,buildGradle,matchResult;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:buildGradlePath=(0,_Paths().getAppBuildGradleFilePath)(projectRoot);if(_fs()[\"default\"].existsSync(buildGradlePath)){_context4.next=3;break;}return _context4.abrupt(\"return\",null);case 3:_context4.next=5;return _fs()[\"default\"].promises.readFile(buildGradlePath,'utf8');case 5:buildGradle=_context4.sent;matchResult=buildGradle.match(/applicationId ['\"](.*)['\"]/);// TODO add fallback for legacy cases to read from AndroidManifest.xml\nreturn _context4.abrupt(\"return\",(_matchResult$=matchResult===null||matchResult===void 0?void 0:matchResult[1])!==null&&_matchResult$!==void 0?_matchResult$:null);case 8:case\"end\":return _context4.stop();}}},_callee4);}));return _getApplicationIdAsync.apply(this,arguments);}","map":{"version":3,"sources":["../../src/android/Package.ts"],"names":["debug","withPackageManifest","withPackageGradle","config","setPackageInBuildGradle","withPackageRefactor","renamePackageOnDisk","path","mainApplication","packagePath","packagePathParts","filePath","type","packageRoot","getPackageRoot","getCurrentPackageName","getCurrentPackageForProjectFile","newPackageName","getPackage","renamePackageOnDiskForType","projectRoot","packageName","currentPackageName","getCurrentPackageNameForType","currentPackagePath","newPackagePath","fs","recursive","cwd","relativePath","filepath","moveFileSync","oldPathParts","pathToCheck","files","filesToUpdate","absolute","contents","pattern","buildGradle","androidManifest","buildGradlePath","matchResult"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport Debug from 'debug';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin, withAppBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest } from './Manifest';\nimport { getAppBuildGradleFilePath, getProjectFilePath } from './Paths';\n\nconst debug = Debug('expo:config-plugins:android:package');\n\nexport const withPackageManifest = createAndroidManifestPlugin(\n  setPackageInAndroidManifest,\n  'withPackageManifest'\n);\n\nexport const withPackageGradle: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.package',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withPackageRefactor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await renamePackageOnDisk(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getPackage(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.package ?? null;\n}\n\nfunction getPackageRoot(projectRoot: string, type: 'main' | 'debug') {\n  return path.join(projectRoot, 'android', 'app', 'src', type, 'java');\n}\n\nfunction getCurrentPackageName(projectRoot: string, packageRoot: string) {\n  const mainApplication = getProjectFilePath(projectRoot, 'MainApplication');\n  const packagePath = path.dirname(mainApplication);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageForProjectFile(\n  projectRoot: string,\n  packageRoot: string,\n  fileName: string,\n  type: string\n) {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/${type}/java/**/${fileName}.@(java|kt)`)\n  )[0];\n\n  if (!filePath) {\n    return null;\n  }\n\n  const packagePath = path.dirname(filePath);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageNameForType(projectRoot: string, type: string): string | null {\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n\n  if (type === 'main') {\n    return getCurrentPackageName(projectRoot, packageRoot);\n  }\n  // debug, etc..\n  return getCurrentPackageForProjectFile(projectRoot, packageRoot, '*', type);\n}\n\n// NOTE(brentvatne): this assumes that our MainApplication.java file is in the root of the package\n// this makes sense for standard react-native projects but may not apply in customized projects, so if\n// we want this to be runnable in any app we need to handle other possibilities\nexport async function renamePackageOnDisk(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string\n) {\n  const newPackageName = getPackage(config);\n  if (newPackageName === null) {\n    return;\n  }\n\n  for (const type of ['main', 'debug']) {\n    await renamePackageOnDiskForType({ projectRoot, type, packageName: newPackageName });\n  }\n}\n\nexport async function renamePackageOnDiskForType({\n  projectRoot,\n  type,\n  packageName,\n}: {\n  projectRoot: string;\n  type: string;\n  packageName: string;\n}) {\n  if (!packageName) {\n    return;\n  }\n\n  const currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n  debug(`Found package \"${currentPackageName}\" for type \"${type}\"`);\n  if (!currentPackageName || currentPackageName === packageName) {\n    return;\n  }\n  debug(`Refactor \"${currentPackageName}\" to \"${packageName}\" for type \"${type}\"`);\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n  // Set up our paths\n  if (!(await directoryExistsAsync(packageRoot))) {\n    debug(`- skipping refactor of missing directory: ${packageRoot}`);\n    return;\n  }\n\n  const currentPackagePath = path.join(packageRoot, ...currentPackageName.split('.'));\n  const newPackagePath = path.join(packageRoot, ...packageName.split('.'));\n\n  // Create the new directory\n  fs.mkdirSync(newPackagePath, { recursive: true });\n\n  // Move everything from the old directory over\n  globSync('**/*', { cwd: currentPackagePath }).forEach(relativePath => {\n    const filepath = path.join(currentPackagePath, relativePath);\n    if (fs.lstatSync(filepath).isFile()) {\n      moveFileSync(filepath, path.join(newPackagePath, relativePath));\n    } else {\n      fs.mkdirSync(filepath, { recursive: true });\n    }\n  });\n\n  // Remove the old directory recursively from com/old/package to com/old and com,\n  // as long as the directories are empty\n  const oldPathParts = currentPackageName.split('.');\n  while (oldPathParts.length) {\n    const pathToCheck = path.join(packageRoot, ...oldPathParts);\n    try {\n      const files = fs.readdirSync(pathToCheck);\n      if (files.length === 0) {\n        fs.rmdirSync(pathToCheck);\n      }\n    } finally {\n      oldPathParts.pop();\n    }\n  }\n\n  const filesToUpdate = [...globSync('**/*', { cwd: newPackagePath, absolute: true })];\n  // Only update the BUCK file to match the main package name\n  if (type === 'main') {\n    filesToUpdate.push(path.join(projectRoot, 'android', 'app', 'BUCK'));\n  }\n  // Replace all occurrences of the path in the project\n  filesToUpdate.forEach((filepath: string) => {\n    try {\n      if (fs.lstatSync(filepath).isFile()) {\n        let contents = fs.readFileSync(filepath).toString();\n        contents = contents.replace(new RegExp(currentPackageName!, 'g'), packageName);\n        fs.writeFileSync(filepath, contents);\n      }\n    } catch {\n      debug(`Error updating \"${filepath}\" for type \"${type}\"`);\n    }\n  });\n}\n\nfunction moveFileSync(src: string, dest: string) {\n  fs.mkdirSync(path.dirname(dest), { recursive: true });\n  fs.renameSync(src, dest);\n}\n\nexport function setPackageInBuildGradle(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`applicationId ['\"].*['\"]`);\n  return buildGradle.replace(pattern, `applicationId '${packageName}'`);\n}\n\nexport function setPackageInAndroidManifest(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const packageName = getPackage(config);\n\n  if (packageName) {\n    androidManifest.manifest.$.package = packageName;\n  } else {\n    delete androidManifest.manifest.$.package;\n  }\n\n  return androidManifest;\n}\n\nexport async function getApplicationIdAsync(projectRoot: string): Promise<string | null> {\n  const buildGradlePath = getAppBuildGradleFilePath(projectRoot);\n  if (!fs.existsSync(buildGradlePath)) {\n    return null;\n  }\n  const buildGradle = await fs.promises.readFile(buildGradlePath, 'utf8');\n  const matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n  // TODO add fallback for legacy cases to read from AndroidManifest.xml\n  return matchResult?.[1] ?? null;\n}\n"]},"metadata":{},"sourceType":"script"}