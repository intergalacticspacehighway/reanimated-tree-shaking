{"ast":null,"code":"\"use strict\";function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.createBuildPodfilePropsConfigPlugin=createBuildPodfilePropsConfigPlugin;exports.updateIosBuildPropertiesFromConfig=updateIosBuildPropertiesFromConfig;exports.updateIosBuildProperty=updateIosBuildProperty;exports.withJsEnginePodfileProps=void 0;function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}/**\n * Creates a `withPodfileProperties` config-plugin based on given config to property mapping rules.\n *\n * The factory supports two modes from generic type inference\n * ```ts\n * // config-plugin without `props`, it will implicitly use the expo config as source config.\n * createBuildPodfilePropsConfigPlugin<ExpoConfig>(): ConfigPlugin<void>;\n *\n * // config-plugin with a parameter `props: CustomType`, it will use the `props` as source config.\n * createBuildPodfilePropsConfigPlugin<CustomType>(): ConfigPlugin<CustomType>;\n * ```\n *\n * @param configToPropertyRules config to property mapping rules\n * @param name the config plugin name\n */function createBuildPodfilePropsConfigPlugin(configToPropertyRules,name){var withUnknown=function withUnknown(config,sourceConfig){return(0,_iosPlugins().withPodfileProperties)(config,function(config){config.modResults=updateIosBuildPropertiesFromConfig(sourceConfig!==null&&sourceConfig!==void 0?sourceConfig:config,config.modResults,configToPropertyRules);return config;});};if(name){Object.defineProperty(withUnknown,'name',{value:name});}return withUnknown;}/**\n * A config-plugin to update `ios/Podfile.properties.json` from the `jsEngine` in expo config\n */var withJsEnginePodfileProps=createBuildPodfilePropsConfigPlugin([{propName:'expo.jsEngine',propValueGetter:function propValueGetter(config){var _ref,_config$ios$jsEngine,_config$ios;return(_ref=(_config$ios$jsEngine=(_config$ios=config.ios)===null||_config$ios===void 0?void 0:_config$ios.jsEngine)!==null&&_config$ios$jsEngine!==void 0?_config$ios$jsEngine:config.jsEngine)!==null&&_ref!==void 0?_ref:'jsc';}}],'withJsEnginePodfileProps');exports.withJsEnginePodfileProps=withJsEnginePodfileProps;function updateIosBuildPropertiesFromConfig(config,podfileProperties,configToPropertyRules){var _iterator=_createForOfIteratorHelper(configToPropertyRules),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var configToProperty=_step.value;var value=configToProperty.propValueGetter(config);updateIosBuildProperty(podfileProperties,configToProperty.propName,value);}}catch(err){_iterator.e(err);}finally{_iterator.f();}return podfileProperties;}function updateIosBuildProperty(podfileProperties,name,value,options){if(value){podfileProperties[name]=value;}else if(options!==null&&options!==void 0&&options.removePropWhenValueIsNull){delete podfileProperties[name];}return podfileProperties;}","map":{"version":3,"sources":["../../src/ios/BuildProperties.ts"],"names":["withUnknown","config","updateIosBuildPropertiesFromConfig","sourceConfig","Object","value","name","withJsEnginePodfileProps","createBuildPodfilePropsConfigPlugin","propName","propValueGetter","configToProperty","updateIosBuildProperty","podfileProperties","options"],"mappings":"qrDAGA,QAAA,CAAA,WAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACO,QAAA,CAAA,mCAAA,CAAA,qBAAA,CAAA,IAAA,CAGL,CACA,GAAMA,CAAAA,WAAwF,CAAG,QAA3FA,CAAAA,WAA2F,CAAA,MAAA,CAAA,YAAA,QAI/F,CAAA,EAAA,WAAA,GAAA,qBAAA,EAAA,MAAA,CAA8BC,SAAAA,MAAM,CAAI,CACtCA,MAAM,CAANA,UAAAA,CAAoBC,kCAAkC,CACnDC,YADmD,GAAA,IACnDA,EAAAA,YADmD,GAAA,IAAA,EACnDA,CADmD,YACnDA,CADmD,MAAA,CAEpDF,MAAM,CAF8C,UAAA,CAAtDA,qBAAsD,CAAtDA,CAKA,MAAA,CAAA,MAAA,CAVJ,CAIE,CAJ+F,EAAjG,CAYA,GAAA,IAAA,CAAU,CACRG,MAAM,CAANA,cAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAA2C,CACzCC,KAAK,CAAEC,IADkC,CAA3CF,EAGD,CACD,MAAA,CAAA,WAAA,CACD,CAED;AACA;AACA,GACO,GAAMG,CAAAA,wBAAwB,CAAGC,mCAAmC,CACzE,CACE,CACEC,QAAQ,CADV,eAAA,CAEEC,eAAe,CAAET,yBAAAA,MAAM,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,oBAAA,CAAA,WAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,oBAAA,CAAA,CAAA,WAAA,CAAIA,MAAM,CAAV,GAAA,IAAA,IAAA,EAAA,WAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAIA,WAAAA,CAAJ,QAAA,IAAA,IAAA,EAAA,oBAAA,GAAA,IAAA,EAAA,CAAA,oBAAA,CAA4BA,MAAM,CAAlC,QAAA,IAAA,IAAA,EAAA,IAAA,GAAA,IAAA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAFzB,CADF,CADyE,CAApE,0BAAoE,CAApE,C,0DAUA,QAAA,CAAA,kCAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,qBAAA,CAIL,0CACA,qBADA,YACA,+CAAsD,IAAtD,CAAA,gBAAsD,aACpD,GAAMI,CAAAA,KAAK,CAAGM,gBAAgB,CAAhBA,eAAAA,CAAd,MAAcA,CAAd,CACAC,sBAAsB,CAAA,iBAAA,CAAoBD,gBAAgB,CAApC,QAAA,CAAtBC,KAAsB,CAAtBA,CACD,CAJD,qDAKA,MAAA,CAAA,iBAAA,CACD,CAEM,QAAA,CAAA,sBAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAKL,CACA,GAAA,KAAA,CAAW,CACTC,iBAAiB,CAAjBA,IAAiB,CAAjBA,CAAAA,KAAAA,CADF,CAAA,IAEO,IAAIC,OAAJ,GAAA,IAAIA,EAAAA,OAAJ,GAAA,IAAA,EAAIA,EAAAA,OAAO,CAAX,yBAAA,CAAwC,CAC7C,MAAOD,CAAAA,iBAAiB,CAAxB,IAAwB,CAAxB,CACD,CACD,MAAA,CAAA,iBAAA,CACD","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\n\nimport type { ConfigPlugin } from '../Plugin.types';\nimport { withPodfileProperties } from '../plugins/ios-plugins';\nimport { BuildPropertiesConfig, ConfigToPropertyRuleType } from '../utils/BuildProperties.types';\n\n/**\n * Creates a `withPodfileProperties` config-plugin based on given config to property mapping rules.\n *\n * The factory supports two modes from generic type inference\n * ```ts\n * // config-plugin without `props`, it will implicitly use the expo config as source config.\n * createBuildPodfilePropsConfigPlugin<ExpoConfig>(): ConfigPlugin<void>;\n *\n * // config-plugin with a parameter `props: CustomType`, it will use the `props` as source config.\n * createBuildPodfilePropsConfigPlugin<CustomType>(): ConfigPlugin<CustomType>;\n * ```\n *\n * @param configToPropertyRules config to property mapping rules\n * @param name the config plugin name\n */\nexport function createBuildPodfilePropsConfigPlugin<SourceConfigType extends BuildPropertiesConfig>(\n  configToPropertyRules: ConfigToPropertyRuleType<SourceConfigType>[],\n  name?: string\n) {\n  const withUnknown: ConfigPlugin<SourceConfigType extends ExpoConfig ? void : SourceConfigType> = (\n    config,\n    sourceConfig\n  ) =>\n    withPodfileProperties(config, config => {\n      config.modResults = updateIosBuildPropertiesFromConfig(\n        (sourceConfig ?? config) as SourceConfigType,\n        config.modResults,\n        configToPropertyRules\n      );\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * A config-plugin to update `ios/Podfile.properties.json` from the `jsEngine` in expo config\n */\nexport const withJsEnginePodfileProps = createBuildPodfilePropsConfigPlugin<ExpoConfig>(\n  [\n    {\n      propName: 'expo.jsEngine',\n      propValueGetter: config => config.ios?.jsEngine ?? config.jsEngine ?? 'jsc',\n    },\n  ],\n  'withJsEnginePodfileProps'\n);\n\nexport function updateIosBuildPropertiesFromConfig<SourceConfigType extends BuildPropertiesConfig>(\n  config: SourceConfigType,\n  podfileProperties: Record<string, string>,\n  configToPropertyRules: ConfigToPropertyRuleType<SourceConfigType>[]\n) {\n  for (const configToProperty of configToPropertyRules) {\n    const value = configToProperty.propValueGetter(config);\n    updateIosBuildProperty(podfileProperties, configToProperty.propName, value);\n  }\n  return podfileProperties;\n}\n\nexport function updateIosBuildProperty(\n  podfileProperties: Record<string, string>,\n  name: string,\n  value: string | null | undefined,\n  options?: { removePropWhenValueIsNull?: boolean }\n) {\n  if (value) {\n    podfileProperties[name] = value;\n  } else if (options?.removePropWhenValueIsNull) {\n    delete podfileProperties[name];\n  }\n  return podfileProperties;\n}\n"]},"metadata":{},"sourceType":"script"}