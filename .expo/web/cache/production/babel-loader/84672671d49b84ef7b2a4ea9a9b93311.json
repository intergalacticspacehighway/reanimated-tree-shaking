{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"/Users/fernandorojo/Developer/messing/rea-tree/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.Config=void 0;exports.ensureBundleReactNativePhaseContainsConfigurationScript=ensureBundleReactNativePhaseContainsConfigurationScript;exports.getBundleReactNativePhase=getBundleReactNativePhase;exports.isPlistConfigurationSet=isPlistConfigurationSet;exports.isPlistConfigurationSynced=isPlistConfigurationSynced;exports.isPlistVersionConfigurationSynced=isPlistVersionConfigurationSynced;exports.isShellScriptBuildPhaseConfigured=isShellScriptBuildPhaseConfigured;exports.setUpdatesConfig=setUpdatesConfig;exports.setVersionsConfig=setVersionsConfig;exports.withUpdates=void 0;function path(){var data=_interopRequireWildcard(require(\"path\"));path=function path(){return data;};return data;}function _resolveFrom(){var data=_interopRequireDefault(require(\"resolve-from\"));_resolveFrom=function _resolveFrom(){return data;};return data;}function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _Updates(){var data=require(\"../utils/Updates\");_Updates=function _Updates(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{\"default\":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj[\"default\"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}var CREATE_MANIFEST_IOS_PATH='expo-updates/scripts/create-manifest-ios.sh';var Config;exports.Config=Config;(function(Config){Config[\"ENABLED\"]=\"EXUpdatesEnabled\";Config[\"CHECK_ON_LAUNCH\"]=\"EXUpdatesCheckOnLaunch\";Config[\"LAUNCH_WAIT_MS\"]=\"EXUpdatesLaunchWaitMs\";Config[\"RUNTIME_VERSION\"]=\"EXUpdatesRuntimeVersion\";Config[\"SDK_VERSION\"]=\"EXUpdatesSDKVersion\";Config[\"UPDATE_URL\"]=\"EXUpdatesURL\";Config[\"RELEASE_CHANNEL\"]=\"EXUpdatesReleaseChannel\";Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"]=\"EXUpdatesRequestHeaders\";Config[\"CODE_SIGNING_CERTIFICATE\"]=\"EXUpdatesCodeSigningCertificate\";Config[\"CODE_SIGNING_METADATA\"]=\"EXUpdatesCodeSigningMetadata\";})(Config||(exports.Config=Config={}));var withUpdates=function withUpdates(config,_ref){var expoUsername=_ref.expoUsername;return(0,_iosPlugins().withExpoPlist)(config,function(config){var projectRoot=config.modRequest.projectRoot;var expoUpdatesPackageVersion=(0,_Updates().getExpoUpdatesPackageVersion)(projectRoot);config.modResults=setUpdatesConfig(projectRoot,config,config.modResults,expoUsername,expoUpdatesPackageVersion);return config;});};exports.withUpdates=withUpdates;function setUpdatesConfig(projectRoot,config,expoPlist,username,expoUpdatesPackageVersion){var _objectSpread2;var newExpoPlist=_objectSpread(_objectSpread({},expoPlist),{},(_objectSpread2={},_defineProperty(_objectSpread2,Config.ENABLED,(0,_Updates().getUpdatesEnabled)(config)),_defineProperty(_objectSpread2,Config.CHECK_ON_LAUNCH,(0,_Updates().getUpdatesCheckOnLaunch)(config,expoUpdatesPackageVersion)),_defineProperty(_objectSpread2,Config.LAUNCH_WAIT_MS,(0,_Updates().getUpdatesTimeout)(config)),_objectSpread2));var updateUrl=(0,_Updates().getUpdateUrl)(config,username);if(updateUrl){newExpoPlist[Config.UPDATE_URL]=updateUrl;}else{delete newExpoPlist[Config.UPDATE_URL];}var codeSigningCertificate=(0,_Updates().getUpdatesCodeSigningCertificate)(projectRoot,config);if(codeSigningCertificate){newExpoPlist[Config.CODE_SIGNING_CERTIFICATE]=codeSigningCertificate;}else{delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];}var codeSigningMetadata=(0,_Updates().getUpdatesCodeSigningMetadata)(config);if(codeSigningMetadata){newExpoPlist[Config.CODE_SIGNING_METADATA]=codeSigningMetadata;}else{delete newExpoPlist[Config.CODE_SIGNING_METADATA];}return setVersionsConfig(config,newExpoPlist);}function setVersionsConfig(config,expoPlist){var newExpoPlist=_objectSpread({},expoPlist);var runtimeVersion=(0,_Updates().getRuntimeVersionNullable)(config,'ios');if(!runtimeVersion&&expoPlist[Config.RUNTIME_VERSION]){throw new Error('A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.');}var sdkVersion=(0,_Updates().getSDKVersion)(config);if(runtimeVersion){delete newExpoPlist[Config.SDK_VERSION];newExpoPlist[Config.RUNTIME_VERSION]=runtimeVersion;}else if(sdkVersion){/**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */delete newExpoPlist[Config.RUNTIME_VERSION];newExpoPlist[Config.SDK_VERSION]=sdkVersion;}else{delete newExpoPlist[Config.SDK_VERSION];delete newExpoPlist[Config.RUNTIME_VERSION];}return newExpoPlist;}function formatConfigurationScriptPath(projectRoot){var buildScriptPath=_resolveFrom()[\"default\"].silent(projectRoot,CREATE_MANIFEST_IOS_PATH);if(!buildScriptPath){throw new Error(\"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");}var relativePath=path().relative(path().join(projectRoot,'ios'),buildScriptPath);return process.platform==='win32'?relativePath.replace(/\\\\/g,'/'):relativePath;}function getBundleReactNativePhase(project){var shellScriptBuildPhase=project.hash.project.objects.PBXShellScriptBuildPhase;var bundleReactNative=Object.values(shellScriptBuildPhase).find(function(buildPhase){return buildPhase.name==='\"Bundle React Native code and images\"';});if(!bundleReactNative){throw new Error(\"Couldn't find a build phase \\\"Bundle React Native code and images\\\"\");}return bundleReactNative;}function ensureBundleReactNativePhaseContainsConfigurationScript(projectRoot,project){var bundleReactNative=getBundleReactNativePhase(project);var buildPhaseShellScriptPath=formatConfigurationScriptPath(projectRoot);if(!isShellScriptBuildPhaseConfigured(projectRoot,project)){// check if there's already another path to create-manifest-ios.sh\n// this might be the case for monorepos\nif(bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)){bundleReactNative.shellScript=bundleReactNative.shellScript.replace(new RegExp(\"(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/\".concat(CREATE_MANIFEST_IOS_PATH)),'');}bundleReactNative.shellScript=\"\".concat(bundleReactNative.shellScript.replace(/\"$/,'')).concat(buildPhaseShellScriptPath,\"\\\\n\\\"\");}return project;}function isShellScriptBuildPhaseConfigured(projectRoot,project){var bundleReactNative=getBundleReactNativePhase(project);var buildPhaseShellScriptPath=formatConfigurationScriptPath(projectRoot);return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);}function isPlistConfigurationSet(expoPlist){return Boolean(expoPlist.EXUpdatesURL&&(expoPlist.EXUpdatesSDKVersion||expoPlist.EXUpdatesRuntimeVersion));}function isPlistConfigurationSynced(projectRoot,config,expoPlist,username){return(0,_Updates().getUpdateUrl)(config,username)===expoPlist.EXUpdatesURL&&(0,_Updates().getUpdatesEnabled)(config)===expoPlist.EXUpdatesEnabled&&(0,_Updates().getUpdatesTimeout)(config)===expoPlist.EXUpdatesLaunchWaitMs&&(0,_Updates().getUpdatesCheckOnLaunch)(config)===expoPlist.EXUpdatesCheckOnLaunch&&(0,_Updates().getUpdatesCodeSigningCertificate)(projectRoot,config)===expoPlist.EXUpdatesCodeSigningCertificate&&(0,_Updates().getUpdatesCodeSigningMetadata)(config)===expoPlist.EXUpdatesCodeSigningMetadata&&isPlistVersionConfigurationSynced(config,expoPlist);}function isPlistVersionConfigurationSynced(config,expoPlist){var _expoPlist$EXUpdatesR,_expoPlist$EXUpdatesS;var expectedRuntimeVersion=(0,_Updates().getRuntimeVersionNullable)(config,'ios');var expectedSdkVersion=(0,_Updates().getSDKVersion)(config);var currentRuntimeVersion=(_expoPlist$EXUpdatesR=expoPlist.EXUpdatesRuntimeVersion)!==null&&_expoPlist$EXUpdatesR!==void 0?_expoPlist$EXUpdatesR:null;var currentSdkVersion=(_expoPlist$EXUpdatesS=expoPlist.EXUpdatesSDKVersion)!==null&&_expoPlist$EXUpdatesS!==void 0?_expoPlist$EXUpdatesS:null;if(expectedRuntimeVersion!==null){return currentRuntimeVersion===expectedRuntimeVersion&&currentSdkVersion===null;}else if(expectedSdkVersion!==null){return currentSdkVersion===expectedSdkVersion&&currentRuntimeVersion===null;}else{return true;}}","map":{"version":3,"sources":["../../src/ios/Updates.ts"],"names":["CREATE_MANIFEST_IOS_PATH","Config","withUpdates","expoUsername","config","projectRoot","expoUpdatesPackageVersion","setUpdatesConfig","newExpoPlist","updateUrl","codeSigningCertificate","codeSigningMetadata","setVersionsConfig","expoPlist","runtimeVersion","sdkVersion","buildScriptPath","resolveFrom","relativePath","path","process","shellScriptBuildPhase","project","bundleReactNative","Object","buildPhase","getBundleReactNativePhase","buildPhaseShellScriptPath","formatConfigurationScriptPath","isShellScriptBuildPhaseConfigured","Boolean","isPlistVersionConfigurationSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadata,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'EXUpdatesRequestHeaders',\n  CODE_SIGNING_CERTIFICATE = 'EXUpdatesCodeSigningCertificate',\n  CODE_SIGNING_METADATA = 'EXUpdatesCodeSigningMetadata',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, config => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    newExpoPlist[Config.CODE_SIGNING_CERTIFICATE] = codeSigningCertificate;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadata(config);\n  if (codeSigningMetadata) {\n    newExpoPlist[Config.CODE_SIGNING_METADATA] = codeSigningMetadata;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_METADATA];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'ios');\n  if (!runtimeVersion && expoPlist[Config.RUNTIME_VERSION]) {\n    throw new Error(\n      'A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    buildPhase => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      expoPlist.EXUpdatesCodeSigningCertificate &&\n    getUpdatesCodeSigningMetadata(config) === expoPlist.EXUpdatesCodeSigningMetadata &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'ios');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}