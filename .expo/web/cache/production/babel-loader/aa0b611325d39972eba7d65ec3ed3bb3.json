{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.createBridgingHeaderFile=createBridgingHeaderFile;exports.ensureSwiftBridgingHeaderSetup=ensureSwiftBridgingHeaderSetup;exports.getDesignatedSwiftBridgingHeaderFileReference=getDesignatedSwiftBridgingHeaderFileReference;exports.linkBridgingHeaderFile=linkBridgingHeaderFile;exports.withSwiftBridgingHeader=exports.withNoopSwiftFile=void 0;function _fs(){var data=_interopRequireDefault(require(\"fs\"));_fs=function _fs(){return data;};return data;}function _path(){var data=_interopRequireDefault(require(\"path\"));_path=function _path(){return data;};return data;}function _iosPlugins(){var data=require(\"../plugins/ios-plugins\");_iosPlugins=function _iosPlugins(){return data;};return data;}function _Paths(){var data=require(\"./Paths\");_Paths=function _Paths(){return data;};return data;}function _XcodeProjectFile(){var data=require(\"./XcodeProjectFile\");_XcodeProjectFile=function _XcodeProjectFile(){return data;};return data;}function _Xcodeproj(){var data=require(\"./utils/Xcodeproj\");_Xcodeproj=function _Xcodeproj(){return data;};return data;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}var templateBridgingHeader=\"//\\n//  Use this file to import your target's public headers that you would like to expose to Swift.\\n//\\n\";/**\n * Ensure a Swift bridging header is created for the project.\n * This helps fix problems related to using modules that are written in Swift (lottie, FBSDK).\n *\n * 1. Ensures the file exists given the project path.\n * 2. Writes the file and links to Xcode as a resource file.\n * 3. Sets the build configuration `SWIFT_OBJC_BRIDGING_HEADER = [PROJECT_NAME]-Bridging-Header.h`\n */var withSwiftBridgingHeader=function withSwiftBridgingHeader(config){return(0,_iosPlugins().withXcodeProject)(config,function(config){config.modResults=ensureSwiftBridgingHeaderSetup({project:config.modResults,projectRoot:config.modRequest.projectRoot});return config;});};exports.withSwiftBridgingHeader=withSwiftBridgingHeader;function ensureSwiftBridgingHeaderSetup(_ref){var projectRoot=_ref.projectRoot,project=_ref.project;// Only create a bridging header if using objective-c\nif(shouldCreateSwiftBridgingHeader({projectRoot:projectRoot,project:project})){var projectName=(0,_Xcodeproj().getProjectName)(projectRoot);var bridgingHeader=createBridgingHeaderFileName(projectName);// Ensure a bridging header is created in the Xcode project.\nproject=createBridgingHeaderFile({project:project,projectName:projectName,projectRoot:projectRoot,bridgingHeader:bridgingHeader});// Designate the newly created file as the Swift bridging header in the Xcode project.\nproject=linkBridgingHeaderFile({project:project,bridgingHeader:_path()[\"default\"].join(projectName,bridgingHeader)});}return project;}function shouldCreateSwiftBridgingHeader(_ref2){var projectRoot=_ref2.projectRoot,project=_ref2.project;// Only create a bridging header if the project is using in Objective C (AppDelegate is written in Objc).\nvar isObjc=(0,_Paths().getAppDelegate)(projectRoot).language==='objc';return isObjc&&!getDesignatedSwiftBridgingHeaderFileReference({project:project});}/**\n * @returns String matching the default name used when Xcode automatically creates a bridging header file.\n */function createBridgingHeaderFileName(projectName){return\"\".concat(projectName,\"-Bridging-Header.h\");}function getDesignatedSwiftBridgingHeaderFileReference(_ref3){var project=_ref3.project;var configurations=project.pbxXCBuildConfigurationSection();// @ts-ignore\nfor(var _i=0,_Object$values=Object.values(configurations||{});_i<_Object$values.length;_i++){var buildSettings=_Object$values[_i].buildSettings;// Guessing that this is the best way to emulate Xcode.\n// Using `project.addToBuildSettings` modifies too many targets.\nif(typeof(buildSettings===null||buildSettings===void 0?void 0:buildSettings.PRODUCT_NAME)!=='undefined'){if(typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER==='string'&&buildSettings.SWIFT_OBJC_BRIDGING_HEADER){return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;}}}return null;}/**\n *\n * @param bridgingHeader The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`\n * @returns\n */function linkBridgingHeaderFile(_ref4){var project=_ref4.project,bridgingHeader=_ref4.bridgingHeader;var configurations=project.pbxXCBuildConfigurationSection();// @ts-ignore\nfor(var _i2=0,_Object$values2=Object.values(configurations||{});_i2<_Object$values2.length;_i2++){var buildSettings=_Object$values2[_i2].buildSettings;// Guessing that this is the best way to emulate Xcode.\n// Using `project.addToBuildSettings` modifies too many targets.\nif(typeof(buildSettings===null||buildSettings===void 0?void 0:buildSettings.PRODUCT_NAME)!=='undefined'){buildSettings.SWIFT_OBJC_BRIDGING_HEADER=bridgingHeader;}}return project;}function createBridgingHeaderFile(_ref5){var projectRoot=_ref5.projectRoot,projectName=_ref5.projectName,project=_ref5.project,bridgingHeader=_ref5.bridgingHeader;var bridgingHeaderProjectPath=_path()[\"default\"].join((0,_Paths().getSourceRoot)(projectRoot),bridgingHeader);if(!_fs()[\"default\"].existsSync(bridgingHeaderProjectPath)){// Create the file\n_fs()[\"default\"].writeFileSync(bridgingHeaderProjectPath,templateBridgingHeader,'utf8');}// This is non-standard, Xcode generates the bridging header in `/ios` which is kinda annoying.\n// Instead, this'll generate the default header in the application code folder `/ios/myproject/`.\nvar filePath=\"\".concat(projectName,\"/\").concat(bridgingHeader);// Ensure the file is linked with Xcode resource files\nif(!project.hasFile(filePath)){project=(0,_Xcodeproj().addResourceFileToGroup)({filepath:filePath,groupName:projectName,project:project,// Not sure why, but this is how Xcode generates it.\nisBuildFile:false,verbose:false});}return project;}var withNoopSwiftFile=function withNoopSwiftFile(config){return(0,_XcodeProjectFile().withBuildSourceFile)(config,{filePath:'noop-file.swift',contents:['//','// @generated','// A blank Swift file must be created for native modules with Swift files to work correctly.','//',''].join('\\n')});};exports.withNoopSwiftFile=withNoopSwiftFile;","map":{"version":3,"sources":["../../src/ios/Swift.ts"],"names":["templateBridgingHeader","withSwiftBridgingHeader","config","ensureSwiftBridgingHeaderSetup","project","projectRoot","shouldCreateSwiftBridgingHeader","projectName","bridgingHeader","createBridgingHeaderFileName","createBridgingHeaderFile","linkBridgingHeaderFile","path","isObjc","getDesignatedSwiftBridgingHeaderFileReference","configurations","buildSettings","Object","bridgingHeaderProjectPath","fs","filePath","filepath","groupName","isBuildFile","verbose","withNoopSwiftFile","contents"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { getAppDelegate, getSourceRoot } from './Paths';\nimport { withBuildSourceFile } from './XcodeProjectFile';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nconst templateBridgingHeader = `//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n`;\n\n/**\n * Ensure a Swift bridging header is created for the project.\n * This helps fix problems related to using modules that are written in Swift (lottie, FBSDK).\n *\n * 1. Ensures the file exists given the project path.\n * 2. Writes the file and links to Xcode as a resource file.\n * 3. Sets the build configuration `SWIFT_OBJC_BRIDGING_HEADER = [PROJECT_NAME]-Bridging-Header.h`\n */\nexport const withSwiftBridgingHeader: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot,\n    });\n    return config;\n  });\n};\n\nexport function ensureSwiftBridgingHeaderSetup({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}) {\n  // Only create a bridging header if using objective-c\n  if (shouldCreateSwiftBridgingHeader({ projectRoot, project })) {\n    const projectName = getProjectName(projectRoot);\n    const bridgingHeader = createBridgingHeaderFileName(projectName);\n    // Ensure a bridging header is created in the Xcode project.\n    project = createBridgingHeaderFile({\n      project,\n      projectName,\n      projectRoot,\n      bridgingHeader,\n    });\n    // Designate the newly created file as the Swift bridging header in the Xcode project.\n    project = linkBridgingHeaderFile({\n      project,\n      bridgingHeader: path.join(projectName, bridgingHeader),\n    });\n  }\n  return project;\n}\n\nfunction shouldCreateSwiftBridgingHeader({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}): boolean {\n  // Only create a bridging header if the project is using in Objective C (AppDelegate is written in Objc).\n  const isObjc = getAppDelegate(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({ project });\n}\n\n/**\n * @returns String matching the default name used when Xcode automatically creates a bridging header file.\n */\nfunction createBridgingHeaderFileName(projectName: string): string {\n  return `${projectName}-Bridging-Header.h`;\n}\n\nexport function getDesignatedSwiftBridgingHeaderFileReference({\n  project,\n}: {\n  project: XcodeProject;\n}): string | null {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      if (\n        typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' &&\n        buildSettings.SWIFT_OBJC_BRIDGING_HEADER\n      ) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n *\n * @param bridgingHeader The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`\n * @returns\n */\nexport function linkBridgingHeaderFile({\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  bridgingHeader: string;\n}): XcodeProject {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n\n  return project;\n}\n\nexport function createBridgingHeaderFile({\n  projectRoot,\n  projectName,\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  projectRoot: string;\n  bridgingHeader: string;\n}): XcodeProject {\n  const bridgingHeaderProjectPath = path.join(getSourceRoot(projectRoot), bridgingHeader);\n  if (!fs.existsSync(bridgingHeaderProjectPath)) {\n    // Create the file\n    fs.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n\n  // This is non-standard, Xcode generates the bridging header in `/ios` which is kinda annoying.\n  // Instead, this'll generate the default header in the application code folder `/ios/myproject/`.\n  const filePath = `${projectName}/${bridgingHeader}`;\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addResourceFileToGroup({\n      filepath: filePath,\n      groupName: projectName,\n      project,\n      // Not sure why, but this is how Xcode generates it.\n      isBuildFile: false,\n      verbose: false,\n    });\n  }\n  return project;\n}\n\nexport const withNoopSwiftFile: ConfigPlugin = config => {\n  return withBuildSourceFile(config, {\n    filePath: 'noop-file.swift',\n    contents: [\n      '//',\n      '// @generated',\n      '// A blank Swift file must be created for native modules with Swift files to work correctly.',\n      '//',\n      '',\n    ].join('\\n'),\n  });\n};\n"]},"metadata":{},"sourceType":"script"}